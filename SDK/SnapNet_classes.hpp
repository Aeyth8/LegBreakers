#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnapNet

#include "Basic.hpp"

#include "AIModule_classes.hpp"
#include "Engine_classes.hpp"
#include "SnapNet_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "DeveloperSettings_classes.hpp"


namespace SDK
{

// Class SnapNet.SnapNetAIController
// 0x0008 (0x03C0 - 0x03B8)
class ASnapNetAIController : public AAIController
{
public:
	class USnapNetInput*                          Input;                                             // 0x03B8(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetAIController">();
	}
	static class ASnapNetAIController* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnapNetAIController>();
	}
};
static_assert(alignof(ASnapNetAIController) == 0x000008, "Wrong alignment on ASnapNetAIController");
static_assert(sizeof(ASnapNetAIController) == 0x0003C0, "Wrong size on ASnapNetAIController");
static_assert(offsetof(ASnapNetAIController, Input) == 0x0003B8, "Member 'ASnapNetAIController::Input' has a wrong offset!");

// Class SnapNet.SnapNetAnimationUtilities
// 0x0000 (0x0028 - 0x0028)
class USnapNetAnimationUtilities final : public UBlueprintFunctionLibrary
{
public:
	static bool GetComponentSpaceBoneTransform(const class UAnimMontage* Montage, float Time, class FName SocketName, struct FTransform* OutTransform);
	static bool GetComponentSpaceSocketTransform(const class UAnimSequenceBase* AnimationSequence, double Time, class FName SocketName, struct FTransform* OutTransform);
	static void SyncMontageState(class UAnimInstance* AnimInstance, class FName MontageGroupName, class UAnimMontage* Montage, float PlaybackPosition, float PlayRate, ESnapNetMontageUpdateType UpdateType);
	static void UpdateMontageState(class UAnimInstance* AnimInstance, class FName MontageGroupName, class UAnimMontage* Montage, float PlaybackPosition, ESnapNetMontageUpdateType UpdateType);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetAnimationUtilities">();
	}
	static class USnapNetAnimationUtilities* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetAnimationUtilities>();
	}
};
static_assert(alignof(USnapNetAnimationUtilities) == 0x000008, "Wrong alignment on USnapNetAnimationUtilities");
static_assert(sizeof(USnapNetAnimationUtilities) == 0x000028, "Wrong size on USnapNetAnimationUtilities");

// Class SnapNet.SnapNetCharacterEntity
// 0x0080 (0x06F0 - 0x0670)
class ASnapNetCharacterEntity : public ACharacter
{
public:
	class USnapNetEntityComponent*                EntityComponent;                                   // 0x0668(0x0008)(Edit, BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, EditConst, InstancedReference, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSnapNetPropertyEnum                   MovementMode;                                      // 0x0670(0x0048)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FSnapNetPropertyVelocity               Velocity;                                          // 0x06B8(0x0038)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)

public:
	void CharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetCharacterEntity">();
	}
	static class ASnapNetCharacterEntity* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnapNetCharacterEntity>();
	}
};
static_assert(alignof(ASnapNetCharacterEntity) == 0x000010, "Wrong alignment on ASnapNetCharacterEntity");
static_assert(sizeof(ASnapNetCharacterEntity) == 0x0006F0, "Wrong size on ASnapNetCharacterEntity");
static_assert(offsetof(ASnapNetCharacterEntity, EntityComponent) == 0x000668, "Member 'ASnapNetCharacterEntity::EntityComponent' has a wrong offset!");
static_assert(offsetof(ASnapNetCharacterEntity, MovementMode) == 0x000670, "Member 'ASnapNetCharacterEntity::MovementMode' has a wrong offset!");
static_assert(offsetof(ASnapNetCharacterEntity, Velocity) == 0x0006B8, "Member 'ASnapNetCharacterEntity::Velocity' has a wrong offset!");

// Class SnapNet.SnapNetClient
// 0x01F8 (0x0220 - 0x0028)
class alignas(0x10) USnapNetClient final : public UObject
{
public:
	uint8                                         Pad_28[0x98];                                      // 0x0028(0x0098)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         HistoryTimeAccumulator;                            // 0x00C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_C4[0x4];                                       // 0x00C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetInput*                          Input;                                             // 0x00C8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D0[0x58];                                      // 0x00D0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          LocalPlayerJoinRequested;                          // 0x0128(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetPacketCodec*                    PacketCodec;                                       // 0x0130(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_138[0x60];                                     // 0x0138(0x0060)(Fixing Size After Last Property [ Dumper-7 ])
	uint64                                        ProtocolId;                                        // 0x0198(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A0[0x58];                                     // 0x01A0(0x0058)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetSimulation*                     Simulation;                                        // 0x01F8(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_200[0x18];                                     // 0x0200(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetTransport*                      Transport;                                         // 0x0218(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class USnapNetClient* Get(const class UObject* WorldContextObject);

	void Disconnect();
	bool PlayReplayFile(const class FString& Filename, int32* StartTime, int32* EndTime);
	void SeekReplay(int32 Time);
	void SendReliableMessage(int32 LocalPlayerIndex, class USnapNetReliableMessage* Message);
	void SetAdditionalJitterBufferMilliseconds(int32 Milliseconds);
	void SetInputDelayBeforePredictionMaxMilliseconds(int32 Milliseconds);
	void SetInputDelayBeforePredictionMinMilliseconds(int32 Milliseconds);
	void SetPacketCodecClass(TSubclassOf<class USnapNetPacketCodec> PacketCodecClass);
	void SetPacketSimulationJitter(int32 Milliseconds);
	void SetPacketSimulationLatency(int32 Milliseconds);
	void SetPacketSimulationLoss(float Percentage);
	void SetPredictedMaxMilliseconds(int32 Milliseconds);
	void SetRenderInterpolationMethod(ESnapNetRenderInterpolationMethod RenderInterpolationMethod);
	void SetSpectatedPlayerIndexForReplay(int32 PlayerIndex);
	void SetTransportClass(TSubclassOf<class USnapNetTransport> TransportClass);

	int32 GetAdditionalJitterBufferMilliseconds() const;
	int32 GetBufferedRemoteInputs() const;
	ESnapNetClientConnectionStatus GetConnectionStatus() const;
	int32 GetInputDelayBeforePredictionMaxMilliseconds() const;
	int32 GetInputDelayBeforePredictionMinMilliseconds() const;
	int32 GetInputDelayFrames() const;
	int32 GetInstantReplayContextEntityIndex() const;
	int32 GetInstantReplaySlotIndex() const;
	float GetJitterBufferSeconds() const;
	float GetKbpsReceived() const;
	float GetKbpsSent() const;
	int32 GetLocalPlayerIndexForLocalPlayer(class ULocalPlayer* LocalPlayer) const;
	int32 GetLocalPlayerIndexForPlayerIndex(int32 PlayerIndex) const;
	class USnapNetPacketCodec* GetPacketCodec() const;
	float GetPacketJitterSeconds() const;
	float GetPacketLatencySeconds() const;
	float GetPacketLossFraction() const;
	class APlayerController* GetPlayerControllerForPlayerIndex(int32 PlayerIndex) const;
	int32 GetPlayerIndex(int32 LocalPlayerIndex) const;
	int32 GetPredictedFrames() const;
	int32 GetPredictedMaxMilliseconds() const;
	class USnapNetSimulation* GetSimulation() const;
	float GetSimulationTimeScale() const;
	int32 GetSpectatedPlayerIndex(int32 LocalPlayerIndex) const;
	int32 GetSpectatedPlayerIndexForReplay() const;
	class USnapNetTransport* GetTransport() const;
	bool IsConnectionInterrupted() const;
	bool IsLoopback() const;
	bool IsNetworkSimulationEnabled() const;
	bool IsPlayerIndexLocal(int32 PlayerIndex) const;
	bool IsPlayerIndexSpectatedLocally(int32 PlayerIndex) const;
	bool IsPlayingInstantReplay() const;
	bool IsPlayingReplay() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetClient">();
	}
	static class USnapNetClient* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetClient>();
	}
};
static_assert(alignof(USnapNetClient) == 0x000010, "Wrong alignment on USnapNetClient");
static_assert(sizeof(USnapNetClient) == 0x000220, "Wrong size on USnapNetClient");
static_assert(offsetof(USnapNetClient, HistoryTimeAccumulator) == 0x0000C0, "Member 'USnapNetClient::HistoryTimeAccumulator' has a wrong offset!");
static_assert(offsetof(USnapNetClient, Input) == 0x0000C8, "Member 'USnapNetClient::Input' has a wrong offset!");
static_assert(offsetof(USnapNetClient, LocalPlayerJoinRequested) == 0x000128, "Member 'USnapNetClient::LocalPlayerJoinRequested' has a wrong offset!");
static_assert(offsetof(USnapNetClient, PacketCodec) == 0x000130, "Member 'USnapNetClient::PacketCodec' has a wrong offset!");
static_assert(offsetof(USnapNetClient, ProtocolId) == 0x000198, "Member 'USnapNetClient::ProtocolId' has a wrong offset!");
static_assert(offsetof(USnapNetClient, Simulation) == 0x0001F8, "Member 'USnapNetClient::Simulation' has a wrong offset!");
static_assert(offsetof(USnapNetClient, Transport) == 0x000218, "Member 'USnapNetClient::Transport' has a wrong offset!");

// Class SnapNet.SnapNetClientConnectAsyncAction
// 0x0018 (0x0048 - 0x0030)
class USnapNetClientConnectAsyncAction final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             OnComplete;                                        // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USnapNetClientConnectAsyncAction* Connect(class USnapNetClient* Client);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetClientConnectAsyncAction">();
	}
	static class USnapNetClientConnectAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetClientConnectAsyncAction>();
	}
};
static_assert(alignof(USnapNetClientConnectAsyncAction) == 0x000008, "Wrong alignment on USnapNetClientConnectAsyncAction");
static_assert(sizeof(USnapNetClientConnectAsyncAction) == 0x000048, "Wrong size on USnapNetClientConnectAsyncAction");
static_assert(offsetof(USnapNetClientConnectAsyncAction, OnComplete) == 0x000030, "Member 'USnapNetClientConnectAsyncAction::OnComplete' has a wrong offset!");

// Class SnapNet.SnapNetCustomInput
// 0x0000 (0x0028 - 0x0028)
class USnapNetCustomInput : public UObject
{
public:
	void BlueprintPopulate(class APlayerController* LocalPlayerController);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetCustomInput">();
	}
	static class USnapNetCustomInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetCustomInput>();
	}
};
static_assert(alignof(USnapNetCustomInput) == 0x000008, "Wrong alignment on USnapNetCustomInput");
static_assert(sizeof(USnapNetCustomInput) == 0x000028, "Wrong size on USnapNetCustomInput");

// Class SnapNet.SnapNetTransport
// 0x0000 (0x0028 - 0x0028)
class USnapNetTransport : public UObject
{
public:
	void SetTimeout(int32 TimeoutSeconds);
	void SetupClientByUrl(const class FString& URL);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetTransport">();
	}
	static class USnapNetTransport* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetTransport>();
	}
};
static_assert(alignof(USnapNetTransport) == 0x000008, "Wrong alignment on USnapNetTransport");
static_assert(sizeof(USnapNetTransport) == 0x000028, "Wrong size on USnapNetTransport");

// Class SnapNet.SnapNetNativeTransport
// 0x0040 (0x0068 - 0x0028)
class USnapNetNativeTransport : public USnapNetTransport
{
public:
	uint8                                         Pad_28[0x40];                                      // 0x0028(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetNativeTransport">();
	}
	static class USnapNetNativeTransport* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetNativeTransport>();
	}
};
static_assert(alignof(USnapNetNativeTransport) == 0x000008, "Wrong alignment on USnapNetNativeTransport");
static_assert(sizeof(USnapNetNativeTransport) == 0x000068, "Wrong size on USnapNetNativeTransport");

// Class SnapNet.SnapNetDTLSTransport
// 0x0040 (0x00A8 - 0x0068)
class USnapNetDTLSTransport final : public USnapNetNativeTransport
{
public:
	uint8                                         Pad_68[0x40];                                      // 0x0068(0x0040)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetServerPort(int32 Port);
	void SetSessionId(const class FString& SessionId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetDTLSTransport">();
	}
	static class USnapNetDTLSTransport* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetDTLSTransport>();
	}
};
static_assert(alignof(USnapNetDTLSTransport) == 0x000008, "Wrong alignment on USnapNetDTLSTransport");
static_assert(sizeof(USnapNetDTLSTransport) == 0x0000A8, "Wrong size on USnapNetDTLSTransport");

// Class SnapNet.SnapNetEditorPerProjectUserSettings
// 0x0008 (0x0040 - 0x0038)
class USnapNetEditorPerProjectUserSettings final : public UDeveloperSettings
{
public:
	bool                                          SuppressLicenseExpirationWarnings;                 // 0x0038(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SuppressSupportExpirationWarnings;                 // 0x0039(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetEditorPerProjectUserSettings">();
	}
	static class USnapNetEditorPerProjectUserSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetEditorPerProjectUserSettings>();
	}
};
static_assert(alignof(USnapNetEditorPerProjectUserSettings) == 0x000008, "Wrong alignment on USnapNetEditorPerProjectUserSettings");
static_assert(sizeof(USnapNetEditorPerProjectUserSettings) == 0x000040, "Wrong size on USnapNetEditorPerProjectUserSettings");
static_assert(offsetof(USnapNetEditorPerProjectUserSettings, SuppressLicenseExpirationWarnings) == 0x000038, "Member 'USnapNetEditorPerProjectUserSettings::SuppressLicenseExpirationWarnings' has a wrong offset!");
static_assert(offsetof(USnapNetEditorPerProjectUserSettings, SuppressSupportExpirationWarnings) == 0x000039, "Member 'USnapNetEditorPerProjectUserSettings::SuppressSupportExpirationWarnings' has a wrong offset!");

// Class SnapNet.SnapNetEntityComponent
// 0x0110 (0x01B0 - 0x00A0)
class USnapNetEntityComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x48];                                      // 0x00A0(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          DestroyedBySnapNet;                                // 0x00E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EntityIndex;                                       // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ActorTickWasEnabled;                               // 0x00F0(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Awake;                                             // 0x00F1(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F2[0x6];                                       // 0x00F2(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   EntityRendererClass;                               // 0x00F8(0x0028)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                LastPredictionError;                               // 0x0120(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastPredictionErrorTime;                           // 0x0138(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13C[0x14];                                     // 0x013C(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	ESnapNetEntityPredictionAtSpawn               PredictionAtSpawn;                                 // 0x0150(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ESnapNetEntityPredictionMode                  PredictionMode;                                    // 0x0151(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_152[0x6];                                      // 0x0152(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class FName>                           PreviouslyEnabledComponentTicks;                   // 0x0158(0x0010)(ZeroConstructor, Transient, Protected, NativeAccessSpecifierProtected)
	FMulticastInlineDelegateProperty_             ReceiveSnapNetPropertiesModified;                  // 0x0168(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	bool                                          RequiresOwnerInput;                                // 0x0178(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          RetainOnMapChange;                                 // 0x0179(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_17A[0x6];                                      // 0x017A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                SavedPredictionPosition;                           // 0x0180(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SavedPredictionTeleportFlag;                       // 0x0198(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SavedPredictionValid;                              // 0x0199(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Simulated;                                         // 0x019A(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19B[0x9];                                      // 0x019B(0x0009)(Fixing Size After Last Property [ Dumper-7 ])
	ESnapNetTransformSyncMode                     TransformSyncMode;                                 // 0x01A4(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1A5[0x3];                                      // 0x01A5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SmallPositionDeltaThreshold;                       // 0x01A8(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void MarkTeleported();
	void SendToAllPlayers();
	void SendToNoPlayers();
	void SendToPlayer(int32 PlayerIndex, bool Send);
	void SetInstantReplayBehavior(ESnapNetEntityInstantReplayBehavior Behavior);
	bool SetOwnerPlayerIndex(int32 PlayerIndex);
	void SetPredictedForAllPlayers(bool Predicted);
	void SetPredictedForPlayer(int32 PlayerIndex, bool Predicted);
	void SetRequiresOwnerInput(bool RequiresOwnerInput_0);

	int32 GeneratePerFrameSeed(int32 FixedSeed) const;
	TSoftClassPtr<class UClass> GetEntityRendererClass() const;
	int32 GetOwnerPlayerIndex() const;
	int32 GetTimeMilliseconds() const;
	bool HasSimulatedState() const;
	bool IsOwnerPlayerLocal() const;
	bool IsSimulated() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetEntityComponent">();
	}
	static class USnapNetEntityComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetEntityComponent>();
	}
};
static_assert(alignof(USnapNetEntityComponent) == 0x000008, "Wrong alignment on USnapNetEntityComponent");
static_assert(sizeof(USnapNetEntityComponent) == 0x0001B0, "Wrong size on USnapNetEntityComponent");
static_assert(offsetof(USnapNetEntityComponent, DestroyedBySnapNet) == 0x0000E8, "Member 'USnapNetEntityComponent::DestroyedBySnapNet' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, EntityIndex) == 0x0000EC, "Member 'USnapNetEntityComponent::EntityIndex' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, ActorTickWasEnabled) == 0x0000F0, "Member 'USnapNetEntityComponent::ActorTickWasEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, Awake) == 0x0000F1, "Member 'USnapNetEntityComponent::Awake' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, EntityRendererClass) == 0x0000F8, "Member 'USnapNetEntityComponent::EntityRendererClass' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, LastPredictionError) == 0x000120, "Member 'USnapNetEntityComponent::LastPredictionError' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, LastPredictionErrorTime) == 0x000138, "Member 'USnapNetEntityComponent::LastPredictionErrorTime' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, PredictionAtSpawn) == 0x000150, "Member 'USnapNetEntityComponent::PredictionAtSpawn' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, PredictionMode) == 0x000151, "Member 'USnapNetEntityComponent::PredictionMode' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, PreviouslyEnabledComponentTicks) == 0x000158, "Member 'USnapNetEntityComponent::PreviouslyEnabledComponentTicks' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, ReceiveSnapNetPropertiesModified) == 0x000168, "Member 'USnapNetEntityComponent::ReceiveSnapNetPropertiesModified' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, RequiresOwnerInput) == 0x000178, "Member 'USnapNetEntityComponent::RequiresOwnerInput' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, RetainOnMapChange) == 0x000179, "Member 'USnapNetEntityComponent::RetainOnMapChange' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, SavedPredictionPosition) == 0x000180, "Member 'USnapNetEntityComponent::SavedPredictionPosition' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, SavedPredictionTeleportFlag) == 0x000198, "Member 'USnapNetEntityComponent::SavedPredictionTeleportFlag' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, SavedPredictionValid) == 0x000199, "Member 'USnapNetEntityComponent::SavedPredictionValid' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, Simulated) == 0x00019A, "Member 'USnapNetEntityComponent::Simulated' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, TransformSyncMode) == 0x0001A4, "Member 'USnapNetEntityComponent::TransformSyncMode' has a wrong offset!");
static_assert(offsetof(USnapNetEntityComponent, SmallPositionDeltaThreshold) == 0x0001A8, "Member 'USnapNetEntityComponent::SmallPositionDeltaThreshold' has a wrong offset!");

// Class SnapNet.SnapNetRewindAsyncAction
// 0x0030 (0x0060 - 0x0030)
class USnapNetRewindAsyncAction final : public UBlueprintAsyncActionBase
{
public:
	FMulticastInlineDelegateProperty_             Rewound;                                           // 0x0030(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x20];                                      // 0x0040(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USnapNetRewindAsyncAction* RewindSimulation(class USnapNetEntityComponent* EntityComponent);
	static class USnapNetRewindAsyncAction* RewindSimulationSubset(class USnapNetEntityComponent* EntityComponent, const TArray<int32>& EntityIndicesToRewind);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetRewindAsyncAction">();
	}
	static class USnapNetRewindAsyncAction* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetRewindAsyncAction>();
	}
};
static_assert(alignof(USnapNetRewindAsyncAction) == 0x000008, "Wrong alignment on USnapNetRewindAsyncAction");
static_assert(sizeof(USnapNetRewindAsyncAction) == 0x000060, "Wrong size on USnapNetRewindAsyncAction");
static_assert(offsetof(USnapNetRewindAsyncAction, Rewound) == 0x000030, "Member 'USnapNetRewindAsyncAction::Rewound' has a wrong offset!");

// Class SnapNet.SnapNetEntityRendererComponent
// 0x00C0 (0x0160 - 0x00A0)
class USnapNetEntityRendererComponent final : public UActorComponent
{
public:
	uint8                                         Pad_A0[0x18];                                      // 0x00A0(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         EntityIndex;                                       // 0x00B8(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint32                                        LastFrameNumberTransformPostProcessed;             // 0x00BC(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         LastPredictionErrorTime;                           // 0x00C0(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PositionSmoothingRate;                             // 0x00C4(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C8[0x8];                                       // 0x00C8(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                PredictionError;                                   // 0x00D0(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          PredictionErrorPostProcessingActive;               // 0x00E8(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_E9[0x3];                                       // 0x00E9(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         PredictionErrorReductionRate;                      // 0x00EC(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         PredictionErrorThreshold;                          // 0x00F0(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_F4[0x4];                                       // 0x00F4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             ReceiveUpdateFromEntity;                           // 0x00F8(0x0010)(ZeroConstructor, InstancedReference, BlueprintAssignable, Protected, NativeAccessSpecifierProtected)
	float                                         RotationSmoothingRate;                             // 0x0108(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	float                                         SimulationToggleErrorReductionRate;                // 0x010C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FVector                                SimulationTogglePositionError;                     // 0x0110(0x0018)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SimulationTogglePostProcessingActive;              // 0x0128(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_129[0x7];                                      // 0x0129(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  SimulationToggleRotationError;                     // 0x0130(0x0020)(Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          SmoothingPostProcessingActive;                     // 0x0150(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          WasEntitySimulated;                                // 0x0151(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_152[0xE];                                      // 0x0152(0x000E)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void SetPredictionErrorReductionRate(float PredictionErrorReductionRate_0);
	void SetPredictionErrorThreshold(float PredictionErrorThreshold_0);

	float GetPositionSmoothingRate() const;
	float GetRotationSmoothingRate() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetEntityRendererComponent">();
	}
	static class USnapNetEntityRendererComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetEntityRendererComponent>();
	}
};
static_assert(alignof(USnapNetEntityRendererComponent) == 0x000010, "Wrong alignment on USnapNetEntityRendererComponent");
static_assert(sizeof(USnapNetEntityRendererComponent) == 0x000160, "Wrong size on USnapNetEntityRendererComponent");
static_assert(offsetof(USnapNetEntityRendererComponent, EntityIndex) == 0x0000B8, "Member 'USnapNetEntityRendererComponent::EntityIndex' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, LastFrameNumberTransformPostProcessed) == 0x0000BC, "Member 'USnapNetEntityRendererComponent::LastFrameNumberTransformPostProcessed' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, LastPredictionErrorTime) == 0x0000C0, "Member 'USnapNetEntityRendererComponent::LastPredictionErrorTime' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, PositionSmoothingRate) == 0x0000C4, "Member 'USnapNetEntityRendererComponent::PositionSmoothingRate' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, PredictionError) == 0x0000D0, "Member 'USnapNetEntityRendererComponent::PredictionError' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, PredictionErrorPostProcessingActive) == 0x0000E8, "Member 'USnapNetEntityRendererComponent::PredictionErrorPostProcessingActive' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, PredictionErrorReductionRate) == 0x0000EC, "Member 'USnapNetEntityRendererComponent::PredictionErrorReductionRate' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, PredictionErrorThreshold) == 0x0000F0, "Member 'USnapNetEntityRendererComponent::PredictionErrorThreshold' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, ReceiveUpdateFromEntity) == 0x0000F8, "Member 'USnapNetEntityRendererComponent::ReceiveUpdateFromEntity' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, RotationSmoothingRate) == 0x000108, "Member 'USnapNetEntityRendererComponent::RotationSmoothingRate' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, SimulationToggleErrorReductionRate) == 0x00010C, "Member 'USnapNetEntityRendererComponent::SimulationToggleErrorReductionRate' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, SimulationTogglePositionError) == 0x000110, "Member 'USnapNetEntityRendererComponent::SimulationTogglePositionError' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, SimulationTogglePostProcessingActive) == 0x000128, "Member 'USnapNetEntityRendererComponent::SimulationTogglePostProcessingActive' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, SimulationToggleRotationError) == 0x000130, "Member 'USnapNetEntityRendererComponent::SimulationToggleRotationError' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, SmoothingPostProcessingActive) == 0x000150, "Member 'USnapNetEntityRendererComponent::SmoothingPostProcessingActive' has a wrong offset!");
static_assert(offsetof(USnapNetEntityRendererComponent, WasEntitySimulated) == 0x000151, "Member 'USnapNetEntityRendererComponent::WasEntitySimulated' has a wrong offset!");

// Class SnapNet.SnapNetEvent
// 0x0008 (0x0030 - 0x0028)
class USnapNetEvent : public UObject
{
public:
	uint8                                         Pad_28[0x4];                                       // 0x0028(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          ConfirmedOrPredicted;                              // 0x002C(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Reliable;                                          // 0x002D(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          IncludedInReplays;                                 // 0x002E(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Predicted;                                         // 0x002F(0x0001)(ZeroConstructor, Deprecated, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)

public:
	void BlueprintOnCanceled();
	void BlueprintOnConfirmed();
	void BlueprintOnFirstTriggered();
	void BlueprintOnPredicted();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetEvent">();
	}
	static class USnapNetEvent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetEvent>();
	}
};
static_assert(alignof(USnapNetEvent) == 0x000008, "Wrong alignment on USnapNetEvent");
static_assert(sizeof(USnapNetEvent) == 0x000030, "Wrong size on USnapNetEvent");
static_assert(offsetof(USnapNetEvent, ConfirmedOrPredicted) == 0x00002C, "Member 'USnapNetEvent::ConfirmedOrPredicted' has a wrong offset!");
static_assert(offsetof(USnapNetEvent, Reliable) == 0x00002D, "Member 'USnapNetEvent::Reliable' has a wrong offset!");
static_assert(offsetof(USnapNetEvent, IncludedInReplays) == 0x00002E, "Member 'USnapNetEvent::IncludedInReplays' has a wrong offset!");
static_assert(offsetof(USnapNetEvent, Predicted) == 0x00002F, "Member 'USnapNetEvent::Predicted' has a wrong offset!");

// Class SnapNet.SnapNetGameInstance
// 0x0000 (0x01C0 - 0x01C0)
class USnapNetGameInstance : public UGameInstance
{
public:
	void AdvanceSingleSnapNetFrame(int32 Enabled);
	void ConnectSnapNetClient(const class FString& URL);
	void PlaySnapNetReplay(const class FString& Name_0);
	void SaveSnapNetReplay(const class FString& Name_0);
	void SeekSnapNetReplay(int32 Time);
	void SpectateSnapNetReplay(int32 PlayerIndex);
	void StartSnapNetPacketCapture();
	void StartSnapNetReplayRecording();
	void StopSnapNetPacketCapture();
	void StopSnapNetReplayRecording();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetGameInstance">();
	}
	static class USnapNetGameInstance* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetGameInstance>();
	}
};
static_assert(alignof(USnapNetGameInstance) == 0x000008, "Wrong alignment on USnapNetGameInstance");
static_assert(sizeof(USnapNetGameInstance) == 0x0001C0, "Wrong size on USnapNetGameInstance");

// Class SnapNet.SnapNetGameModeBase
// 0x0000 (0x0328 - 0x0328)
class ASnapNetGameModeBase : public AGameModeBase
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetGameModeBase">();
	}
	static class ASnapNetGameModeBase* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnapNetGameModeBase>();
	}
};
static_assert(alignof(ASnapNetGameModeBase) == 0x000008, "Wrong alignment on ASnapNetGameModeBase");
static_assert(sizeof(ASnapNetGameModeBase) == 0x000328, "Wrong size on ASnapNetGameModeBase");

// Class SnapNet.SnapNetInput
// 0x0048 (0x0070 - 0x0028)
class USnapNetInput final : public UObject
{
public:
	uint8                                         Pad_28[0x38];                                      // 0x0028(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetCustomInput*                    CustomInput;                                       // 0x0060(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_68[0x8];                                       // 0x0068(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetInput">();
	}
	static class USnapNetInput* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetInput>();
	}
};
static_assert(alignof(USnapNetInput) == 0x000008, "Wrong alignment on USnapNetInput");
static_assert(sizeof(USnapNetInput) == 0x000070, "Wrong size on USnapNetInput");
static_assert(offsetof(USnapNetInput, CustomInput) == 0x000060, "Member 'USnapNetInput::CustomInput' has a wrong offset!");

// Class SnapNet.SnapNetInputComponent
// 0x0020 (0x0148 - 0x0128)
class USnapNetInputComponent final : public UInputComponent
{
public:
	uint8                                         Pad_128[0x20];                                     // 0x0128(0x0020)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetInputComponent">();
	}
	static class USnapNetInputComponent* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetInputComponent>();
	}
};
static_assert(alignof(USnapNetInputComponent) == 0x000008, "Wrong alignment on USnapNetInputComponent");
static_assert(sizeof(USnapNetInputComponent) == 0x000148, "Wrong size on USnapNetInputComponent");

// Class SnapNet.SnapNetPacketCodec
// 0x0000 (0x0028 - 0x0028)
class USnapNetPacketCodec final : public UObject
{
public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPacketCodec">();
	}
	static class USnapNetPacketCodec* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPacketCodec>();
	}
};
static_assert(alignof(USnapNetPacketCodec) == 0x000008, "Wrong alignment on USnapNetPacketCodec");
static_assert(sizeof(USnapNetPacketCodec) == 0x000028, "Wrong size on USnapNetPacketCodec");

// Class SnapNet.SnapNetPlayerJoinRequest
// 0x0040 (0x0068 - 0x0028)
class USnapNetPlayerJoinRequest : public UObject
{
public:
	struct FSnapNetPropertyString                 UniqueNetId;                                       // 0x0028(0x0030)(BlueprintVisible, BlueprintReadOnly, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_58[0x4];                                       // 0x0058(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          Complete;                                          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         LocalPlayerIndex;                                  // 0x0060(0x0004)(BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_64[0x4];                                       // 0x0064(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void BlueprintPopulate(class APlayerController* LocalPlayerController);
	void CompletePlayerJoin(int32 ErrorCode);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPlayerJoinRequest">();
	}
	static class USnapNetPlayerJoinRequest* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPlayerJoinRequest>();
	}
};
static_assert(alignof(USnapNetPlayerJoinRequest) == 0x000008, "Wrong alignment on USnapNetPlayerJoinRequest");
static_assert(sizeof(USnapNetPlayerJoinRequest) == 0x000068, "Wrong size on USnapNetPlayerJoinRequest");
static_assert(offsetof(USnapNetPlayerJoinRequest, UniqueNetId) == 0x000028, "Member 'USnapNetPlayerJoinRequest::UniqueNetId' has a wrong offset!");
static_assert(offsetof(USnapNetPlayerJoinRequest, Complete) == 0x00005C, "Member 'USnapNetPlayerJoinRequest::Complete' has a wrong offset!");
static_assert(offsetof(USnapNetPlayerJoinRequest, LocalPlayerIndex) == 0x000060, "Member 'USnapNetPlayerJoinRequest::LocalPlayerIndex' has a wrong offset!");

// Class SnapNet.SnapNetPlayInfo
// 0x0030 (0x02C0 - 0x0290)
class ASnapNetPlayInfo : public AInfo
{
public:
	TSoftObjectPtr<class UWorld>                  NetworkLevel;                                      // 0x0290(0x0028)(Edit, BlueprintVisible, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class USnapNetServerScript>       ServerScriptClass;                                 // 0x02B8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPlayInfo">();
	}
	static class ASnapNetPlayInfo* GetDefaultObj()
	{
		return GetDefaultObjImpl<ASnapNetPlayInfo>();
	}
};
static_assert(alignof(ASnapNetPlayInfo) == 0x000008, "Wrong alignment on ASnapNetPlayInfo");
static_assert(sizeof(ASnapNetPlayInfo) == 0x0002C0, "Wrong size on ASnapNetPlayInfo");
static_assert(offsetof(ASnapNetPlayInfo, NetworkLevel) == 0x000290, "Member 'ASnapNetPlayInfo::NetworkLevel' has a wrong offset!");
static_assert(offsetof(ASnapNetPlayInfo, ServerScriptClass) == 0x0002B8, "Member 'ASnapNetPlayInfo::ServerScriptClass' has a wrong offset!");

// Class SnapNet.SnapNetPropertyBooleanFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyBooleanFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static bool Conv_SnapNetPropertyBooleanToBool(const struct FSnapNetPropertyBoolean& SnapNetPropertyBoolean);
	static void SetValue(struct FSnapNetPropertyBoolean& SnapNetPropertyBoolean, bool Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyBooleanFunctionLibrary">();
	}
	static class USnapNetPropertyBooleanFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyBooleanFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyBooleanFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyBooleanFunctionLibrary");
static_assert(sizeof(USnapNetPropertyBooleanFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyBooleanFunctionLibrary");

// Class SnapNet.SnapNetPropertyClientIndexFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyClientIndexFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Conv_SnapNetPropertyClientIndexToInt(const struct FSnapNetPropertyClientIndex& SnapNetPropertyClientIndex);
	static void SetValue(struct FSnapNetPropertyClientIndex& SnapNetPropertyClientIndex, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyClientIndexFunctionLibrary">();
	}
	static class USnapNetPropertyClientIndexFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyClientIndexFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyClientIndexFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyClientIndexFunctionLibrary");
static_assert(sizeof(USnapNetPropertyClientIndexFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyClientIndexFunctionLibrary");

// Class SnapNet.SnapNetPropertyDoubleFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyDoubleFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static double Conv_SnapNetPropertyDoubleToDouble(const struct FSnapNetPropertyDouble& SnapNetPropertyDouble);
	static void SetValue(struct FSnapNetPropertyDouble& SnapNetPropertyDouble, double Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyDoubleFunctionLibrary">();
	}
	static class USnapNetPropertyDoubleFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyDoubleFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyDoubleFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyDoubleFunctionLibrary");
static_assert(sizeof(USnapNetPropertyDoubleFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyDoubleFunctionLibrary");

// Class SnapNet.SnapNetPropertyEntityIndexFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyEntityIndexFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Conv_SnapNetPropertyEntityIndexToInt(const struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex);
	static class USnapNetEntityComponent* GetEntityComponent(const struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, class USnapNetSimulation* Simulation);
	static void SetValue(struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, int32 Value);
	static void SetValueByEntityReference(struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, class USnapNetEntityComponent* EntityComponent);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyEntityIndexFunctionLibrary">();
	}
	static class USnapNetPropertyEntityIndexFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyEntityIndexFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyEntityIndexFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyEntityIndexFunctionLibrary");
static_assert(sizeof(USnapNetPropertyEntityIndexFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyEntityIndexFunctionLibrary");

// Class SnapNet.SnapNetPropertyEnumFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyEnumFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static uint8 Conv_SnapNetPropertyEnumToByte(const struct FSnapNetPropertyEnum& SnapNetPropertyEnum);
	static int32 Conv_SnapNetPropertyEnumToInt(const struct FSnapNetPropertyEnum& SnapNetPropertyEnum);
	static void SetValueByte(struct FSnapNetPropertyEnum& SnapNetPropertyEnum, uint8 Value);
	static void SetValueInt(struct FSnapNetPropertyEnum& SnapNetPropertyEnum, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyEnumFunctionLibrary">();
	}
	static class USnapNetPropertyEnumFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyEnumFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyEnumFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyEnumFunctionLibrary");
static_assert(sizeof(USnapNetPropertyEnumFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyEnumFunctionLibrary");

// Class SnapNet.SnapNetPropertyFloatFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyFloatFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static float Conv_SnapNetPropertyFloatToFloat(const struct FSnapNetPropertyFloat& SnapNetPropertyFloat);
	static void SetValue(struct FSnapNetPropertyFloat& SnapNetPropertyFloat, float Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyFloatFunctionLibrary">();
	}
	static class USnapNetPropertyFloatFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyFloatFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyFloatFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyFloatFunctionLibrary");
static_assert(sizeof(USnapNetPropertyFloatFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyFloatFunctionLibrary");

// Class SnapNet.SnapNetPropertyInt32FunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyInt32FunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Conv_SnapNetPropertyInt32ToInt(const struct FSnapNetPropertyInt32& SnapNetPropertyInt32);
	static void SetValue(struct FSnapNetPropertyInt32& SnapNetPropertyInt32, int32 Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyInt32FunctionLibrary">();
	}
	static class USnapNetPropertyInt32FunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyInt32FunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyInt32FunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyInt32FunctionLibrary");
static_assert(sizeof(USnapNetPropertyInt32FunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyInt32FunctionLibrary");

// Class SnapNet.SnapNetPropertyPlayerIndexFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyPlayerIndexFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static int32 Conv_SnapNetPropertyPlayerIndexToInt(const struct FSnapNetPropertyPlayerIndex& SnapNetPropertyPlayerIndex);
	static void SetValue(struct FSnapNetPropertyPlayerIndex& SnapNetPropertyPlayerIndex, int32 Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyPlayerIndexFunctionLibrary">();
	}
	static class USnapNetPropertyPlayerIndexFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyPlayerIndexFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyPlayerIndexFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyPlayerIndexFunctionLibrary");
static_assert(sizeof(USnapNetPropertyPlayerIndexFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyPlayerIndexFunctionLibrary");

// Class SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyPrimaryAssetFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class UObject* GetObject(const struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset);
	static struct FPrimaryAssetId GetValue_GetPrimaryAssetId(const struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset);
	static void SetPrimaryAssetId(struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset, const struct FPrimaryAssetId& PrimaryAssetId);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyPrimaryAssetFunctionLibrary">();
	}
	static class USnapNetPropertyPrimaryAssetFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyPrimaryAssetFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyPrimaryAssetFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyPrimaryAssetFunctionLibrary");
static_assert(sizeof(USnapNetPropertyPrimaryAssetFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyPrimaryAssetFunctionLibrary");

// Class SnapNet.SnapNetPropertyQuaternionFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyQuaternionFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FQuat Conv_SnapNetPropertyQuaternionToQuat(const struct FSnapNetPropertyQuaternion& SnapNetPropertyQuaternion);
	static void SetValue(struct FSnapNetPropertyQuaternion& SnapNetPropertyQuaternion, const struct FQuat& Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyQuaternionFunctionLibrary">();
	}
	static class USnapNetPropertyQuaternionFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyQuaternionFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyQuaternionFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyQuaternionFunctionLibrary");
static_assert(sizeof(USnapNetPropertyQuaternionFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyQuaternionFunctionLibrary");

// Class SnapNet.SnapNetPropertyRotatorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyRotatorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FRotator Conv_SnapNetPropertyRotatorToRotator(const struct FSnapNetPropertyRotator& SnapNetPropertyRotator);
	static void SetValue(struct FSnapNetPropertyRotator& SnapNetPropertyRotator, const struct FRotator& Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyRotatorFunctionLibrary">();
	}
	static class USnapNetPropertyRotatorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyRotatorFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyRotatorFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyRotatorFunctionLibrary");
static_assert(sizeof(USnapNetPropertyRotatorFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyRotatorFunctionLibrary");

// Class SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertySoftObjectPathFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static const struct FSoftObjectPath Conv_SnapNetPropertySoftObjectPathToSoftObjectPath(const struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath);
	static class UObject* ResolveObject(const struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath);
	static void SetValue(struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath, const struct FSoftObjectPath& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertySoftObjectPathFunctionLibrary">();
	}
	static class USnapNetPropertySoftObjectPathFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertySoftObjectPathFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertySoftObjectPathFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertySoftObjectPathFunctionLibrary");
static_assert(sizeof(USnapNetPropertySoftObjectPathFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertySoftObjectPathFunctionLibrary");

// Class SnapNet.SnapNetPropertyStringFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyStringFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static class FString Conv_SnapNetPropertyStringToString(const struct FSnapNetPropertyString& SnapNetPropertyString);
	static void SetValue(struct FSnapNetPropertyString& SnapNetPropertyString, const class FString& Value);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyStringFunctionLibrary">();
	}
	static class USnapNetPropertyStringFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyStringFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyStringFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyStringFunctionLibrary");
static_assert(sizeof(USnapNetPropertyStringFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyStringFunctionLibrary");

// Class SnapNet.SnapNetPropertyVectorFunctionLibrary
// 0x0000 (0x0028 - 0x0028)
class USnapNetPropertyVectorFunctionLibrary final : public UBlueprintFunctionLibrary
{
public:
	static struct FVector Conv_SnapNetPropertyAngularVelocityToVector(const struct FSnapNetPropertyAngularVelocity& SnapNetPropertyAngularVelocity);
	static struct FVector Conv_SnapNetPropertyPositionToVector(const struct FSnapNetPropertyPosition& SnapNetPropertyPosition);
	static struct FVector Conv_SnapNetPropertyVectorToVector(const struct FSnapNetPropertyVector& SnapNetPropertyVector);
	static struct FVector Conv_SnapNetPropertyVelocityToVector(const struct FSnapNetPropertyVelocity& SnapNetPropertyVelocity);
	static void SetValue_AngularVelocity(struct FSnapNetPropertyAngularVelocity& SnapNetPropertyAngularVelocity, const struct FVector& Value, ESnapNetInterpolation Interpolation);
	static void SetValue_Position(struct FSnapNetPropertyPosition& SnapNetPropertyPosition, const struct FVector& Value, ESnapNetInterpolation Interpolation);
	static void SetValue_Vector(struct FSnapNetPropertyVector& SnapNetPropertyVector, const struct FVector& Value, ESnapNetInterpolation Interpolation);
	static void SetValue_Velocity(struct FSnapNetPropertyVelocity& SnapNetPropertyVelocity, const struct FVector& Value, ESnapNetInterpolation Interpolation);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetPropertyVectorFunctionLibrary">();
	}
	static class USnapNetPropertyVectorFunctionLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetPropertyVectorFunctionLibrary>();
	}
};
static_assert(alignof(USnapNetPropertyVectorFunctionLibrary) == 0x000008, "Wrong alignment on USnapNetPropertyVectorFunctionLibrary");
static_assert(sizeof(USnapNetPropertyVectorFunctionLibrary) == 0x000028, "Wrong size on USnapNetPropertyVectorFunctionLibrary");

// Class SnapNet.SnapNetReliableMessage
// 0x0000 (0x0028 - 0x0028)
class USnapNetReliableMessage : public UObject
{
public:
	void BlueprintOnReceivedFromClient(int32 PlayerIndex);
	void BlueprintOnReceivedFromServer(int32 LocalPlayerIndex);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetReliableMessage">();
	}
	static class USnapNetReliableMessage* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetReliableMessage>();
	}
};
static_assert(alignof(USnapNetReliableMessage) == 0x000008, "Wrong alignment on USnapNetReliableMessage");
static_assert(sizeof(USnapNetReliableMessage) == 0x000028, "Wrong size on USnapNetReliableMessage");

// Class SnapNet.SnapNetServer
// 0x0128 (0x0150 - 0x0028)
class alignas(0x10) USnapNetServer final : public UObject
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class ASnapNetAIController*>           BotControllers;                                    // 0x00D0(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E0[0x10];                                      // 0x00E0(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetPacketCodec*                    PacketCodec;                                       // 0x00F0(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint64                                        ProtocolId;                                        // 0x00F8(0x0008)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x28];                                     // 0x0100(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          bRewinding;                                        // 0x0128(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_129[0xF];                                      // 0x0129(0x000F)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetServerScript*                   ServerScript;                                      // 0x0138(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USnapNetSimulation*                     Simulation;                                        // 0x0140(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class USnapNetTransport*                      Transport;                                         // 0x0148(0x0008)(ZeroConstructor, Transient, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class USnapNetServer* Get(const class UObject* WorldContextObject);

	void ForceNewBaseline();
	int32 RegisterString(class FName StringPoolName, const class FString& Value);
	void RemovePlayer(int32 PlayerIndex);
	void SaveInstantReplay(int32 SlotIndex, int32 StartTime, int32 EndTime);
	void SaveReplayFile(const class FString& Filename);
	void SendEntityToAllPlayers(int32 EntityIndex);
	void SendEntityToNoPlayers(int32 EntityIndex);
	void SendEntityToPlayer(int32 EntityIndex, int32 PlayerIndex, bool Send);
	void SendReliableMessage(int32 PlayerIndex, class USnapNetReliableMessage* Message);
	void SetPacketCodecClass(TSubclassOf<class USnapNetPacketCodec> PacketCodecClass);
	void SetSpectatedPlayerIndex(int32 PlayerIndex, int32 SpectatedPlayerIndex);
	void SetTransportClass(TSubclassOf<class USnapNetTransport> TransportClass);
	void StartInstantReplay(int32 ClientIndex, int32 SpectatedPlayerIndex, int32 ContextEntityIndex, int32 StartTime, int32 EndTime);
	void StartPacketCapture();
	void StartReplayRecording();
	void StartSavedInstantReplay(int32 SlotIndex, int32 ClientIndex, int32 SpectatedPlayerIndex, int32 ContextEntityIndex);
	void StartServer(TSubclassOf<class USnapNetServerScript> ServerScriptClass);
	void StopInstantReplay(int32 ClientIndex);
	void StopPacketCapture();
	void StopReplayRecording();
	void StopServer();

	bool DoesEntityRequireOwnerInput(int32 EntityIndex) const;
	int32 GetClientIndex(int32 PlayerIndex) const;
	class USnapNetPacketCodec* GetPacketCodec() const;
	float GetPacketLatencySeconds(int32 ClientIndex) const;
	int32 GetPlayerIndex(int32 ClientIndex, int32 LocalPlayerIndex) const;
	int32 GetPlayerInterpolationTimeMilliseconds(int32 PlayerIndex) const;
	class USnapNetServerScript* GetServerScript() const;
	class USnapNetSimulation* GetSimulation() const;
	int32 GetSpectatedPlayerIndex(int32 PlayerIndex) const;
	int32 GetTimeMilliseconds() const;
	class USnapNetTransport* GetTransport() const;
	bool IsBot(int32 PlayerIndex) const;
	bool IsClientConnected(int32 ClientIndex) const;
	bool IsEntityPredictedForPlayer(int32 EntityIndex, int32 PlayerIndex) const;
	bool IsEntitySentToPlayer(int32 EntityIndex, int32 PlayerIndex) const;
	bool IsPlayingInstantReplay(int32 ClientIndex) const;
	bool IsRewinding() const;
	bool IsRunning() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetServer">();
	}
	static class USnapNetServer* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetServer>();
	}
};
static_assert(alignof(USnapNetServer) == 0x000010, "Wrong alignment on USnapNetServer");
static_assert(sizeof(USnapNetServer) == 0x000150, "Wrong size on USnapNetServer");
static_assert(offsetof(USnapNetServer, BotControllers) == 0x0000D0, "Member 'USnapNetServer::BotControllers' has a wrong offset!");
static_assert(offsetof(USnapNetServer, PacketCodec) == 0x0000F0, "Member 'USnapNetServer::PacketCodec' has a wrong offset!");
static_assert(offsetof(USnapNetServer, ProtocolId) == 0x0000F8, "Member 'USnapNetServer::ProtocolId' has a wrong offset!");
static_assert(offsetof(USnapNetServer, bRewinding) == 0x000128, "Member 'USnapNetServer::bRewinding' has a wrong offset!");
static_assert(offsetof(USnapNetServer, ServerScript) == 0x000138, "Member 'USnapNetServer::ServerScript' has a wrong offset!");
static_assert(offsetof(USnapNetServer, Simulation) == 0x000140, "Member 'USnapNetServer::Simulation' has a wrong offset!");
static_assert(offsetof(USnapNetServer, Transport) == 0x000148, "Member 'USnapNetServer::Transport' has a wrong offset!");

// Class SnapNet.SnapNetServerScript
// 0x0008 (0x0030 - 0x0028)
class USnapNetServerScript : public UObject
{
public:
	uint8                                         Pad_28[0x8];                                       // 0x0028(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USnapNetServerScript* Get(const class UObject* WorldContextObject);

	void BlueprintClientConnected(int32 ClientIndex);
	void BlueprintClientDisconnected(int32 ClientIndex);
	void BlueprintPlayerJoined(int32 PlayerIndex);
	void BlueprintPlayerRemoved(int32 PlayerIndex);
	void BlueprintStart();
	void BlueprintTick(float DeltaSeconds);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetServerScript">();
	}
	static class USnapNetServerScript* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetServerScript>();
	}
};
static_assert(alignof(USnapNetServerScript) == 0x000008, "Wrong alignment on USnapNetServerScript");
static_assert(sizeof(USnapNetServerScript) == 0x000030, "Wrong size on USnapNetServerScript");

// Class SnapNet.SnapNetSettings
// 0x0318 (0x0340 - 0x0028)
class USnapNetSettings final : public UObject
{
public:
	uint64                                        ProtocolVersion;                                   // 0x0028(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetEntityPredictionMode                  DefaultEntityPredictionAtSpawn;                    // 0x0030(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MaxClients;                                        // 0x0034(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPlayers;                                        // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TickRate;                                          // 0x003C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         TicksPerServerSend;                                // 0x0040(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SavedInstantReplays;                               // 0x0044(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   DefaultTransportClass;                             // 0x0048(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PlayInEditorTransportClass;                        // 0x0070(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<class FName>                           InputActions;                                      // 0x0098(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	TArray<class FName>                           InputAxes;                                         // 0x00A8(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	bool                                          IncludeControlRotation;                            // 0x00B8(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_B9[0x7];                                       // 0x00B9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   CustomInputClass;                                  // 0x00C0(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           EntityClasses;                                     // 0x00E8(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           EventClasses;                                      // 0x00F8(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<TSoftObjectPtr<class UWorld>>          Maps;                                              // 0x0108(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TSoftClassPtr<class UClass>                   PlayerJoinRequestClass;                            // 0x0118(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSoftClassPtr<class UClass>>           ReliableMessageClasses;                            // 0x0140(0x0010)(Edit, ZeroConstructor, Config, UObjectWrapper, NativeAccessSpecifierPublic)
	TArray<struct FSnapNetStringPool>             StringPools;                                       // 0x0150(0x0010)(Edit, ZeroConstructor, Config, NativeAccessSpecifierPublic)
	struct FSnapNetVectorEncoding                 PositionEncodingSimulatedOrSpectated;              // 0x0160(0x0048)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnapNetVectorEncoding                 PositionEncodingNeitherSimulatedNorSpectated;      // 0x01A8(0x0048)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	double                                        SmallPositionDeltaThreshold;                       // 0x01F0(0x0008)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPrecisionSimulatedOrSpectated;             // 0x01F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         RotationPrecisionNeitherSimulatedNorSpectated;     // 0x01FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FSnapNetVectorEncoding                 VelocityEncoding;                                  // 0x0200(0x0048)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	struct FSnapNetVectorEncoding                 AngularVelocityEncoding;                           // 0x0248(0x0048)(Edit, Config, NoDestructor, NativeAccessSpecifierPublic)
	bool                                          CommonEntitiesCacheEnabled;                        // 0x0290(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DeltaCacheEnabled;                                 // 0x0291(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          DormancyEnabled;                                   // 0x0292(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          EntityHashes;                                      // 0x0293(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          GeneratePacketsForBots;                            // 0x0294(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LegacyLevelLoadingArchitecture;                    // 0x0295(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogDeltaEncoding;                                  // 0x0296(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          TradeBandwidthForPerformance;                      // 0x0297(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ValidateSerialization;                             // 0x0298(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_299[0x3];                                      // 0x0299(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TimeoutSeconds;                                    // 0x029C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEntities;                                       // 0x02A0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxEvents;                                         // 0x02A4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxFutureInputs;                                   // 0x02A8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLocalPlayers;                                   // 0x02AC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxLagCompensationMilliseconds;                    // 0x02B0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         DeltaCompressionHistoryMilliseconds;               // 0x02B4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SnapshotSize;                                      // 0x02B8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPacketSize;                                     // 0x02BC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReplayChunkSeconds;                                // 0x02C0(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C4[0x4];                                      // 0x02C4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSoftClassPtr<class UClass>                   PacketCodecClass;                                  // 0x02C8(0x0028)(Edit, Config, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkSimulationEnabled;                          // 0x02F0(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          NetworkSimulationOnlyInEditorBuilds;               // 0x02F1(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2F2[0x2];                                      // 0x02F2(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         PacketLatencyMilliseconds;                         // 0x02F4(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PacketJitterMilliseconds;                          // 0x02F8(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PacketLossPercentage;                              // 0x02FC(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ClientPredictedPhysicsEnabled;                     // 0x0300(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetRenderInterpolationMethod             RenderInterpolationMethod;                         // 0x0301(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_302[0x2];                                      // 0x0302(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         MinInputDelayBeforePredictionMilliseconds;         // 0x0304(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInputDelayBeforePredictionMilliseconds;         // 0x0308(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxPredictedMilliseconds;                          // 0x030C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          SynchronouslyLoadAllEntityRenderersOnStart;        // 0x0310(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_311[0x3];                                      // 0x0311(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         AdditionalJitterBufferMilliseconds;                // 0x0314(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ConnectionInterruptedMilliseconds;                 // 0x0318(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxInputTransmissions;                             // 0x031C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0320(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReplaysEnabled;                                    // 0x0324(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          MultithreadedDeltaEncoding;                        // 0x0325(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_326[0x2];                                      // 0x0326(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InstantReplayMaxSeconds;                           // 0x0328(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUniqueDeltasPerSend;                            // 0x032C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxUniqueInstantReplays;                           // 0x0330(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MinSecondsBetweenBaselines;                        // 0x0334(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SettingsVersion;                                   // 0x0338(0x0004)(ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetPredictionMode                        PredictionMode;                                    // 0x033C(0x0001)(ZeroConstructor, Config, Deprecated, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_33D[0x3];                                      // 0x033D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetSettings">();
	}
	static class USnapNetSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetSettings>();
	}
};
static_assert(alignof(USnapNetSettings) == 0x000008, "Wrong alignment on USnapNetSettings");
static_assert(sizeof(USnapNetSettings) == 0x000340, "Wrong size on USnapNetSettings");
static_assert(offsetof(USnapNetSettings, ProtocolVersion) == 0x000028, "Member 'USnapNetSettings::ProtocolVersion' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, DefaultEntityPredictionAtSpawn) == 0x000030, "Member 'USnapNetSettings::DefaultEntityPredictionAtSpawn' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxClients) == 0x000034, "Member 'USnapNetSettings::MaxClients' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxPlayers) == 0x000038, "Member 'USnapNetSettings::MaxPlayers' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, TickRate) == 0x00003C, "Member 'USnapNetSettings::TickRate' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, TicksPerServerSend) == 0x000040, "Member 'USnapNetSettings::TicksPerServerSend' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, SavedInstantReplays) == 0x000044, "Member 'USnapNetSettings::SavedInstantReplays' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, DefaultTransportClass) == 0x000048, "Member 'USnapNetSettings::DefaultTransportClass' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PlayInEditorTransportClass) == 0x000070, "Member 'USnapNetSettings::PlayInEditorTransportClass' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, InputActions) == 0x000098, "Member 'USnapNetSettings::InputActions' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, InputAxes) == 0x0000A8, "Member 'USnapNetSettings::InputAxes' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, IncludeControlRotation) == 0x0000B8, "Member 'USnapNetSettings::IncludeControlRotation' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, CustomInputClass) == 0x0000C0, "Member 'USnapNetSettings::CustomInputClass' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, EntityClasses) == 0x0000E8, "Member 'USnapNetSettings::EntityClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, EventClasses) == 0x0000F8, "Member 'USnapNetSettings::EventClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, Maps) == 0x000108, "Member 'USnapNetSettings::Maps' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PlayerJoinRequestClass) == 0x000118, "Member 'USnapNetSettings::PlayerJoinRequestClass' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ReliableMessageClasses) == 0x000140, "Member 'USnapNetSettings::ReliableMessageClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, StringPools) == 0x000150, "Member 'USnapNetSettings::StringPools' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PositionEncodingSimulatedOrSpectated) == 0x000160, "Member 'USnapNetSettings::PositionEncodingSimulatedOrSpectated' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PositionEncodingNeitherSimulatedNorSpectated) == 0x0001A8, "Member 'USnapNetSettings::PositionEncodingNeitherSimulatedNorSpectated' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, SmallPositionDeltaThreshold) == 0x0001F0, "Member 'USnapNetSettings::SmallPositionDeltaThreshold' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, RotationPrecisionSimulatedOrSpectated) == 0x0001F8, "Member 'USnapNetSettings::RotationPrecisionSimulatedOrSpectated' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, RotationPrecisionNeitherSimulatedNorSpectated) == 0x0001FC, "Member 'USnapNetSettings::RotationPrecisionNeitherSimulatedNorSpectated' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, VelocityEncoding) == 0x000200, "Member 'USnapNetSettings::VelocityEncoding' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, AngularVelocityEncoding) == 0x000248, "Member 'USnapNetSettings::AngularVelocityEncoding' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, CommonEntitiesCacheEnabled) == 0x000290, "Member 'USnapNetSettings::CommonEntitiesCacheEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, DeltaCacheEnabled) == 0x000291, "Member 'USnapNetSettings::DeltaCacheEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, DormancyEnabled) == 0x000292, "Member 'USnapNetSettings::DormancyEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, EntityHashes) == 0x000293, "Member 'USnapNetSettings::EntityHashes' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, GeneratePacketsForBots) == 0x000294, "Member 'USnapNetSettings::GeneratePacketsForBots' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, LegacyLevelLoadingArchitecture) == 0x000295, "Member 'USnapNetSettings::LegacyLevelLoadingArchitecture' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, LogDeltaEncoding) == 0x000296, "Member 'USnapNetSettings::LogDeltaEncoding' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, TradeBandwidthForPerformance) == 0x000297, "Member 'USnapNetSettings::TradeBandwidthForPerformance' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ValidateSerialization) == 0x000298, "Member 'USnapNetSettings::ValidateSerialization' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, TimeoutSeconds) == 0x00029C, "Member 'USnapNetSettings::TimeoutSeconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxEntities) == 0x0002A0, "Member 'USnapNetSettings::MaxEntities' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxEvents) == 0x0002A4, "Member 'USnapNetSettings::MaxEvents' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxFutureInputs) == 0x0002A8, "Member 'USnapNetSettings::MaxFutureInputs' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxLocalPlayers) == 0x0002AC, "Member 'USnapNetSettings::MaxLocalPlayers' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxLagCompensationMilliseconds) == 0x0002B0, "Member 'USnapNetSettings::MaxLagCompensationMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, DeltaCompressionHistoryMilliseconds) == 0x0002B4, "Member 'USnapNetSettings::DeltaCompressionHistoryMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, SnapshotSize) == 0x0002B8, "Member 'USnapNetSettings::SnapshotSize' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxPacketSize) == 0x0002BC, "Member 'USnapNetSettings::MaxPacketSize' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ReplayChunkSeconds) == 0x0002C0, "Member 'USnapNetSettings::ReplayChunkSeconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PacketCodecClass) == 0x0002C8, "Member 'USnapNetSettings::PacketCodecClass' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, NetworkSimulationEnabled) == 0x0002F0, "Member 'USnapNetSettings::NetworkSimulationEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, NetworkSimulationOnlyInEditorBuilds) == 0x0002F1, "Member 'USnapNetSettings::NetworkSimulationOnlyInEditorBuilds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PacketLatencyMilliseconds) == 0x0002F4, "Member 'USnapNetSettings::PacketLatencyMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PacketJitterMilliseconds) == 0x0002F8, "Member 'USnapNetSettings::PacketJitterMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PacketLossPercentage) == 0x0002FC, "Member 'USnapNetSettings::PacketLossPercentage' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ClientPredictedPhysicsEnabled) == 0x000300, "Member 'USnapNetSettings::ClientPredictedPhysicsEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, RenderInterpolationMethod) == 0x000301, "Member 'USnapNetSettings::RenderInterpolationMethod' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MinInputDelayBeforePredictionMilliseconds) == 0x000304, "Member 'USnapNetSettings::MinInputDelayBeforePredictionMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxInputDelayBeforePredictionMilliseconds) == 0x000308, "Member 'USnapNetSettings::MaxInputDelayBeforePredictionMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxPredictedMilliseconds) == 0x00030C, "Member 'USnapNetSettings::MaxPredictedMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, SynchronouslyLoadAllEntityRenderersOnStart) == 0x000310, "Member 'USnapNetSettings::SynchronouslyLoadAllEntityRenderersOnStart' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, AdditionalJitterBufferMilliseconds) == 0x000314, "Member 'USnapNetSettings::AdditionalJitterBufferMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ConnectionInterruptedMilliseconds) == 0x000318, "Member 'USnapNetSettings::ConnectionInterruptedMilliseconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxInputTransmissions) == 0x00031C, "Member 'USnapNetSettings::MaxInputTransmissions' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, Port) == 0x000320, "Member 'USnapNetSettings::Port' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, ReplaysEnabled) == 0x000324, "Member 'USnapNetSettings::ReplaysEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MultithreadedDeltaEncoding) == 0x000325, "Member 'USnapNetSettings::MultithreadedDeltaEncoding' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, InstantReplayMaxSeconds) == 0x000328, "Member 'USnapNetSettings::InstantReplayMaxSeconds' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxUniqueDeltasPerSend) == 0x00032C, "Member 'USnapNetSettings::MaxUniqueDeltasPerSend' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MaxUniqueInstantReplays) == 0x000330, "Member 'USnapNetSettings::MaxUniqueInstantReplays' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, MinSecondsBetweenBaselines) == 0x000334, "Member 'USnapNetSettings::MinSecondsBetweenBaselines' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, SettingsVersion) == 0x000338, "Member 'USnapNetSettings::SettingsVersion' has a wrong offset!");
static_assert(offsetof(USnapNetSettings, PredictionMode) == 0x00033C, "Member 'USnapNetSettings::PredictionMode' has a wrong offset!");

// Class SnapNet.SnapNetSimulation
// 0x01E0 (0x0208 - 0x0028)
class USnapNetSimulation final : public UObject
{
public:
	uint8                                         Pad_28[0xA8];                                      // 0x0028(0x00A8)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnapNetEntityComponent*>        Entities;                                          // 0x00D0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	TArray<int32>                                 EntityIndicesWantingModifiedCallback;              // 0x00E0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class USnapNetEntityRendererComponent*> EntityRenderers;                                   // 0x00F0(0x0010)(ExportObject, ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPrivate)
	uint8                                         Pad_100[0x10];                                     // 0x0100(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          EntitySimulatedStatusUpToDate;                     // 0x0110(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_111[0x1F];                                     // 0x0111(0x001F)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnapNetEvent*>                  Events;                                            // 0x0130(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint64                                        FrameCounterRenderer;                              // 0x0140(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint64                                        FrameCounterSimulation;                            // 0x0148(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x18];                                     // 0x0150(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnapNetInput*>                  Inputs;                                            // 0x0168(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class UPendingNetGame*                        PendingNetGame;                                    // 0x0178(0x0008)(ZeroConstructor, Transient, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPlayingInstantReplay;                             // 0x0180(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_181[0x7];                                      // 0x0181(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class USnapNetInput*>                  PreviousInputs;                                    // 0x0188(0x0010)(ZeroConstructor, Transient, NativeAccessSpecifierPrivate)
	class FString                                 PreviousNextURL;                                   // 0x0198(0x0010)(ZeroConstructor, Transient, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	TArray<class USnapNetEntityComponent*>        SavedEntityComponents;                             // 0x01A8(0x0010)(ExportObject, ZeroConstructor, Transient, ContainsInstancedReference, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1B8[0x10];                                     // 0x01B8(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UObject*>                        SavedEntityOuters;                                 // 0x01C8(0x0010)(ZeroConstructor, Transient, UObjectWrapper, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1D8[0x28];                                     // 0x01D8(0x0028)(Fixing Size After Last Property [ Dumper-7 ])
	class UWorld*                                 World;                                             // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)

public:
	static class USnapNetSimulation* Get(const class UObject* WorldContextObject);

	void DestroyEntity(int32 EntityIndex);
	void RequestEntityRendererUpdate(int32 EntityIndex);
	class AActor* SpawnEntity(TSubclassOf<class AActor> EntityClass, int32 OwnerPlayerIndex);
	class USnapNetEvent* SpawnEvent(TSubclassOf<class USnapNetEvent> EventClass, const class USnapNetEntityComponent* EntityComponent);

	int32 FindString(const class FName& StringPoolName, const class FString& Value) const;
	class USnapNetClient* GetClient() const;
	const struct FRotator GetControlRotation(int32 PlayerIndex) const;
	const class USnapNetCustomInput* GetCustomInput(int32 PlayerIndex) const;
	class AActor* GetEntity(int32 EntityIndex) const;
	class USnapNetEntityComponent* GetEntityComponent(int32 EntityIndex) const;
	class USnapNetEntityRendererComponent* GetEntityRenderer(int32 EntityIndex) const;
	ESnapNetSimulationFrameType GetFrameType() const;
	int32 GetInputAge(int32 PlayerIndex) const;
	float GetInputAxis(int32 PlayerIndex, class FName AxisName) const;
	const class USnapNetCustomInput* GetPreviousCustomInput(int32 PlayerIndex) const;
	float GetPreviousInputAxis(int32 PlayerIndex, class FName AxisName) const;
	class USnapNetServer* GetServer() const;
	class FString GetString(const class FName& StringPoolName, int32 StringIndex) const;
	int32 GetStringCount(const class FName& StringPoolName) const;
	class USnapNetSubsystem* GetSubsystem() const;
	bool IsClient() const;
	bool IsInputActionDown(int32 PlayerIndex, class FName ActionName) const;
	bool IsServer() const;
	bool WasInputActionPressed(int32 PlayerIndex, class FName ActionName) const;
	bool WasInputActionReleased(int32 PlayerIndex, class FName ActionName) const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetSimulation">();
	}
	static class USnapNetSimulation* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetSimulation>();
	}
};
static_assert(alignof(USnapNetSimulation) == 0x000008, "Wrong alignment on USnapNetSimulation");
static_assert(sizeof(USnapNetSimulation) == 0x000208, "Wrong size on USnapNetSimulation");
static_assert(offsetof(USnapNetSimulation, Entities) == 0x0000D0, "Member 'USnapNetSimulation::Entities' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, EntityIndicesWantingModifiedCallback) == 0x0000E0, "Member 'USnapNetSimulation::EntityIndicesWantingModifiedCallback' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, EntityRenderers) == 0x0000F0, "Member 'USnapNetSimulation::EntityRenderers' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, EntitySimulatedStatusUpToDate) == 0x000110, "Member 'USnapNetSimulation::EntitySimulatedStatusUpToDate' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, Events) == 0x000130, "Member 'USnapNetSimulation::Events' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, FrameCounterRenderer) == 0x000140, "Member 'USnapNetSimulation::FrameCounterRenderer' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, FrameCounterSimulation) == 0x000148, "Member 'USnapNetSimulation::FrameCounterSimulation' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, Inputs) == 0x000168, "Member 'USnapNetSimulation::Inputs' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, PendingNetGame) == 0x000178, "Member 'USnapNetSimulation::PendingNetGame' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, bPlayingInstantReplay) == 0x000180, "Member 'USnapNetSimulation::bPlayingInstantReplay' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, PreviousInputs) == 0x000188, "Member 'USnapNetSimulation::PreviousInputs' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, PreviousNextURL) == 0x000198, "Member 'USnapNetSimulation::PreviousNextURL' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, SavedEntityComponents) == 0x0001A8, "Member 'USnapNetSimulation::SavedEntityComponents' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, SavedEntityOuters) == 0x0001C8, "Member 'USnapNetSimulation::SavedEntityOuters' has a wrong offset!");
static_assert(offsetof(USnapNetSimulation, World) == 0x000200, "Member 'USnapNetSimulation::World' has a wrong offset!");

// Class SnapNet.SnapNetSubsystem
// 0x00B8 (0x00E8 - 0x0030)
class USnapNetSubsystem final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x18];                                      // 0x0030(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetClient*                         Client;                                            // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	int32                                         LoadingReferenceCount;                             // 0x0050(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_54[0x14];                                      // 0x0054(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USnapNetPlayerJoinRequest>  PlayerJoinRequestClass;                            // 0x0068(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_70[0x10];                                      // 0x0070(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class UClass*>                         RegisteredEntityClasses;                           // 0x0080(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<class UClass*>                         RegisteredEventClasses;                            // 0x0090(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<TSoftObjectPtr<class UWorld>>          RegisteredMaps;                                    // 0x00A0(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPrivate)
	TArray<class UClass*>                         RegisteredReliableMessageClasses;                  // 0x00B0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FSnapNetStringPool>             RegisteredStringPools;                             // 0x00C0(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          SeamlessTravelInProgress;                          // 0x00D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_D1[0x7];                                       // 0x00D1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetServer*                         Server;                                            // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SingleFrameAdvanceActive;                          // 0x00E0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SingleFrameAdvanceEnabled;                         // 0x00E1(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          SingleFrameAdvanceRequested;                       // 0x00E2(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_E3[0x5];                                       // 0x00E3(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class USnapNetSubsystem* Get(const class UObject* WorldContextObject);
	static bool IsSnapNetClient(const class UObject* WorldContextObject);
	static bool IsSnapNetServer(const class UObject* WorldContextObject);

	void RegisterClassesFromSettings();
	void RegisterEntityClass(TSubclassOf<class AActor> EntityClass);
	void RegisterEntityClasses(const TArray<TSubclassOf<class AActor>>& EntityClasses);
	void RegisterEventClass(TSubclassOf<class USnapNetEvent> EventClass);
	void RegisterEventClasses(const TArray<TSubclassOf<class USnapNetEvent>>& EventClasses);
	void RegisterMap(TSoftObjectPtr<class UWorld> Map);
	void RegisterMaps(const TArray<TSoftObjectPtr<class UWorld>>& Maps);
	void RegisterReliableMessageClass(TSubclassOf<class USnapNetReliableMessage> ReliableMessageClass);
	void RegisterReliableMessageClasses(const TArray<TSubclassOf<class USnapNetReliableMessage>>& ReliableMessageClasses);
	void RegisterStringPool(const struct FSnapNetStringPool& StringPool);
	void RegisterStringPools(const TArray<struct FSnapNetStringPool>& StringPools);
	void RequestFrameAdvance();
	void SetPlayerJoinRequestClass(TSubclassOf<class USnapNetPlayerJoinRequest> PlayerJoinRequestClass_0);
	void SetSingleFrameAdvanceEnabled(bool Enabled);
	void UnregisterAllEntityClasses();
	void UnregisterAllEventClasses();
	void UnregisterAllMaps();
	void UnregisterAllReliableMessageClasses();
	void UnregisterAllStringPools();

	class USnapNetClient* GetClient() const;
	class AActor* GetEntityRenderer(int32 EntityIndex) const;
	class USnapNetEntityRendererComponent* GetEntityRendererComponent(int32 EntityIndex) const;
	TSubclassOf<class USnapNetPlayerJoinRequest> GetPlayerJoinRequestClass() const;
	class USnapNetServer* GetServer() const;
	bool IsSingleFrameAdvanceEnabled() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"SnapNetSubsystem">();
	}
	static class USnapNetSubsystem* GetDefaultObj()
	{
		return GetDefaultObjImpl<USnapNetSubsystem>();
	}
};
static_assert(alignof(USnapNetSubsystem) == 0x000008, "Wrong alignment on USnapNetSubsystem");
static_assert(sizeof(USnapNetSubsystem) == 0x0000E8, "Wrong size on USnapNetSubsystem");
static_assert(offsetof(USnapNetSubsystem, Client) == 0x000048, "Member 'USnapNetSubsystem::Client' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, LoadingReferenceCount) == 0x000050, "Member 'USnapNetSubsystem::LoadingReferenceCount' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, PlayerJoinRequestClass) == 0x000068, "Member 'USnapNetSubsystem::PlayerJoinRequestClass' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, RegisteredEntityClasses) == 0x000080, "Member 'USnapNetSubsystem::RegisteredEntityClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, RegisteredEventClasses) == 0x000090, "Member 'USnapNetSubsystem::RegisteredEventClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, RegisteredMaps) == 0x0000A0, "Member 'USnapNetSubsystem::RegisteredMaps' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, RegisteredReliableMessageClasses) == 0x0000B0, "Member 'USnapNetSubsystem::RegisteredReliableMessageClasses' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, RegisteredStringPools) == 0x0000C0, "Member 'USnapNetSubsystem::RegisteredStringPools' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, SeamlessTravelInProgress) == 0x0000D0, "Member 'USnapNetSubsystem::SeamlessTravelInProgress' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, Server) == 0x0000D8, "Member 'USnapNetSubsystem::Server' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, SingleFrameAdvanceActive) == 0x0000E0, "Member 'USnapNetSubsystem::SingleFrameAdvanceActive' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, SingleFrameAdvanceEnabled) == 0x0000E1, "Member 'USnapNetSubsystem::SingleFrameAdvanceEnabled' has a wrong offset!");
static_assert(offsetof(USnapNetSubsystem, SingleFrameAdvanceRequested) == 0x0000E2, "Member 'USnapNetSubsystem::SingleFrameAdvanceRequested' has a wrong offset!");

}

