#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InventorySlot

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Matcha_structs.hpp"
#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK::Params
{

// Function WBP_InventorySlot.WBP_InventorySlot_C.BindData
// 0x0008 (0x0008 - 0x0000)
struct WBP_InventorySlot_C_BindData final
{
public:
	class UOdyUIData*                             NewUIData;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_BindData) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_BindData");
static_assert(sizeof(WBP_InventorySlot_C_BindData) == 0x000008, "Wrong size on WBP_InventorySlot_C_BindData");
static_assert(offsetof(WBP_InventorySlot_C_BindData, NewUIData) == 0x000000, "Member 'WBP_InventorySlot_C_BindData::NewUIData' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeFillColor
// 0x0028 (0x0028 - 0x0000)
struct WBP_InventorySlot_C_ChangeFillColor final
{
public:
	struct FLinearColor                           FillColor;                                         // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_2;         // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeFillColor) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ChangeFillColor");
static_assert(sizeof(WBP_InventorySlot_C_ChangeFillColor) == 0x000028, "Wrong size on WBP_InventorySlot_C_ChangeFillColor");
static_assert(offsetof(WBP_InventorySlot_C_ChangeFillColor, FillColor) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeFillColor::FillColor' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeFillColor, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_InventorySlot_C_ChangeFillColor::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeFillColor, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'WBP_InventorySlot_C_ChangeFillColor::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeFillColor, CallFunc_GetDynamicMaterial_ReturnValue_2) == 0x000020, "Member 'WBP_InventorySlot_C_ChangeFillColor::CallFunc_GetDynamicMaterial_ReturnValue_2' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeItemImage
// 0x0010 (0x0010 - 0x0000)
struct WBP_InventorySlot_C_ChangeItemImage final
{
public:
	class UTexture*                               OldValue;                                          // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               NewValue;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeItemImage) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ChangeItemImage");
static_assert(sizeof(WBP_InventorySlot_C_ChangeItemImage) == 0x000010, "Wrong size on WBP_InventorySlot_C_ChangeItemImage");
static_assert(offsetof(WBP_InventorySlot_C_ChangeItemImage, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeItemImage::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeItemImage, NewValue) == 0x000008, "Member 'WBP_InventorySlot_C_ChangeItemImage::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeOpacityOnHeld
// 0x0010 (0x0010 - 0x0000)
struct WBP_InventorySlot_C_ChangeOpacityOnHeld final
{
public:
	bool                                          RestoreOpacity;                                    // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeOpacityOnHeld) == 0x000004, "Wrong alignment on WBP_InventorySlot_C_ChangeOpacityOnHeld");
static_assert(sizeof(WBP_InventorySlot_C_ChangeOpacityOnHeld) == 0x000010, "Wrong size on WBP_InventorySlot_C_ChangeOpacityOnHeld");
static_assert(offsetof(WBP_InventorySlot_C_ChangeOpacityOnHeld, RestoreOpacity) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeOpacityOnHeld::RestoreOpacity' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeOpacityOnHeld, Temp_bool_Variable) == 0x000001, "Member 'WBP_InventorySlot_C_ChangeOpacityOnHeld::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeOpacityOnHeld, Temp_real_Variable) == 0x000004, "Member 'WBP_InventorySlot_C_ChangeOpacityOnHeld::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeOpacityOnHeld, Temp_real_Variable_1) == 0x000008, "Member 'WBP_InventorySlot_C_ChangeOpacityOnHeld::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeOpacityOnHeld, K2Node_Select_Default) == 0x00000C, "Member 'WBP_InventorySlot_C_ChangeOpacityOnHeld::K2Node_Select_Default' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeStyle
// 0x0010 (0x0010 - 0x0000)
struct WBP_InventorySlot_C_ChangeStyle final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UWidget*                                K2Node_Select_Default;                             // 0x0008(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeStyle) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ChangeStyle");
static_assert(sizeof(WBP_InventorySlot_C_ChangeStyle) == 0x000010, "Wrong size on WBP_InventorySlot_C_ChangeStyle");
static_assert(offsetof(WBP_InventorySlot_C_ChangeStyle, Temp_bool_Variable) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeStyle::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeStyle, K2Node_Select_Default) == 0x000008, "Member 'WBP_InventorySlot_C_ChangeStyle::K2Node_Select_Default' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeVisual_GearSlot
// 0x0168 (0x0168 - 0x0000)
struct WBP_InventorySlot_C_ChangeVisual_GearSlot final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0014(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x006C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_6D[0x3];                                       // 0x006D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0070(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00A4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00D4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_D5[0x3];                                       // 0x00D5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_11;                           // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_5;                           // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13E[0x2];                                      // 0x013E(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0140(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x0144(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_145[0x3];                                      // 0x0145(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable_1;                              // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_7;                              // 0x014C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14D[0x3];                                      // 0x014D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         K2Node_Select_Default_7;                           // 0x0150(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_154[0x4];                                      // 0x0154(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0158(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0160(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeVisual_GearSlot) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ChangeVisual_GearSlot");
static_assert(sizeof(WBP_InventorySlot_C_ChangeVisual_GearSlot) == 0x000168, "Wrong size on WBP_InventorySlot_C_ChangeVisual_GearSlot");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, IsSelected) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::IsSelected' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable) == 0x000004, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable) == 0x000014, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_1) == 0x000018, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_2) == 0x000028, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_1) == 0x000038, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default) == 0x00003C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_3) == 0x00004C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_4) == 0x00005C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_2) == 0x00006C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_1) == 0x000070, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_5) == 0x000080, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_6) == 0x000090, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_3) == 0x0000A0, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_2) == 0x0000A4, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_7) == 0x0000B4, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_8) == 0x0000C4, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_4) == 0x0000D4, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_3) == 0x0000D8, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_9) == 0x0000E8, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_10) == 0x0000F8, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_struct_Variable_11) == 0x000108, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_4) == 0x000118, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_5) == 0x000128, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_byte_Variable) == 0x000129, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_5) == 0x00012C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_byte_Variable_1) == 0x00013C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_6) == 0x00013D, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_real_Variable) == 0x000140, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_6) == 0x000144, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_real_Variable_1) == 0x000148, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, Temp_bool_Variable_7) == 0x00014C, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::Temp_bool_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, K2Node_Select_Default_7) == 0x000150, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::K2Node_Select_Default_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000158, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_GearSlot, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000160, "Member 'WBP_InventorySlot_C_ChangeVisual_GearSlot::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ChangeVisual_InventorySlot
// 0x0148 (0x0148 - 0x0000)
struct WBP_InventorySlot_C_ChangeVisual_InventorySlot final
{
public:
	bool                                          IsSelected;                                        // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x0004(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x0014(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_25[0x3];                                       // 0x0025(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x0028(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x0038(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_49[0x3];                                       // 0x0049(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default;                             // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_4;                            // 0x005C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_5;                            // 0x006C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x007C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7D[0x3];                                       // 0x007D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_1;                           // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_6;                            // 0x0090(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_7;                            // 0x00A0(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_3;                              // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x3];                                       // 0x00B1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_2;                           // 0x00B4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_8;                            // 0x00C4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_9;                            // 0x00D4(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_4;                              // 0x00E4(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_E5[0x3];                                       // 0x00E5(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x00E8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_10;                           // 0x00F8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_4;                           // 0x0108(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_11;                           // 0x0118(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_5;                              // 0x0128(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0129(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12A[0x2];                                      // 0x012A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           K2Node_Select_Default_5;                           // 0x012C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x013C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_6;                              // 0x013D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_6;                           // 0x013E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_13F[0x1];                                      // 0x013F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0140(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ChangeVisual_InventorySlot) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ChangeVisual_InventorySlot");
static_assert(sizeof(WBP_InventorySlot_C_ChangeVisual_InventorySlot) == 0x000148, "Wrong size on WBP_InventorySlot_C_ChangeVisual_InventorySlot");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, IsSelected) == 0x000000, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::IsSelected' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable) == 0x000004, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_1) == 0x000014, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable) == 0x000024, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_2) == 0x000028, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_3) == 0x000038, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_1) == 0x000048, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default) == 0x00004C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_4) == 0x00005C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_5) == 0x00006C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_2) == 0x00007C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_1) == 0x000080, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_6) == 0x000090, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_7) == 0x0000A0, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_3) == 0x0000B0, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_2) == 0x0000B4, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_8) == 0x0000C4, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_8' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_9) == 0x0000D4, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_9' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_4) == 0x0000E4, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_3) == 0x0000E8, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_10) == 0x0000F8, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_10' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_4) == 0x000108, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_struct_Variable_11) == 0x000118, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_struct_Variable_11' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_5) == 0x000128, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_byte_Variable) == 0x000129, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_5) == 0x00012C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_byte_Variable_1) == 0x00013C, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, Temp_bool_Variable_6) == 0x00013D, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::Temp_bool_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, K2Node_Select_Default_6) == 0x00013E, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::K2Node_Select_Default_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ChangeVisual_InventorySlot, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000140, "Member 'WBP_InventorySlot_C_ChangeVisual_InventorySlot::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ConsumeOnHold
// 0x0002 (0x0002 - 0x0000)
struct WBP_InventorySlot_C_ConsumeOnHold final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ConsumeOnHold) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_ConsumeOnHold");
static_assert(sizeof(WBP_InventorySlot_C_ConsumeOnHold) == 0x000002, "Wrong size on WBP_InventorySlot_C_ConsumeOnHold");
static_assert(offsetof(WBP_InventorySlot_C_ConsumeOnHold, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_ConsumeOnHold::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ConsumeOnHold, NewValue) == 0x000001, "Member 'WBP_InventorySlot_C_ConsumeOnHold::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.ExecuteUbergraph_WBP_InventorySlot
// 0x0260 (0x0260 - 0x0000)
struct WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Item_Is_Consumable_On_Hold_bIsConsumableOnHold; // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class UTexture* OldValue, class UTexture* NewValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable;                                // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           Temp_struct_Variable;                              // 0x001C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_1;                            // 0x002C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_2;                            // 0x003C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           Temp_struct_Variable_3;                            // 0x004C(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0060(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               Temp_object_Variable;                              // 0x0070(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_1;                              // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x3];                                       // 0x0079(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate_2;            // 0x007C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable_2;                              // 0x008C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x008D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_2;                              // 0x008E(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_8F[0x1];                                       // 0x008F(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_OldValue_8;                     // 0x0090(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewValue_8;                     // 0x0094(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UOdyUIData*                             CallFunc_GetUIData_ReturnValue;                    // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_IntInt_ReturnValue;             // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x7];                                       // 0x00A1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x00A8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00B0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_B1[0x7];                                       // 0x00B1(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_Conv_IntToText_ReturnValue;               // 0x00B8(0x0010)()
	int32                                         CallFunc_IntBinding_GetValue_ReturnValue;          // 0x00C8(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_CC[0x4];                                       // 0x00CC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x00D8(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x0120(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x0130(0x0010)()
	bool                                          K2Node_Event_IsDesignTime;                         // 0x0140(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_141[0x3];                                      // 0x0141(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         K2Node_CustomEvent_OldValue_7;                     // 0x0144(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         K2Node_CustomEvent_NewValue_7;                     // 0x0148(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_14C[0x4];                                      // 0x014C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   K2Node_CustomEvent_OldValue_6;                     // 0x0150(0x0010)()
	class FText                                   K2Node_CustomEvent_NewValue_6;                     // 0x0160(0x0010)()
	bool                                          K2Node_CustomEvent_OldValue_5;                     // 0x0170(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue_5;                     // 0x0171(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_OldValue_4;                     // 0x0172(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue_4;                     // 0x0173(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_174[0x4];                                      // 0x0174(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UOdyUIData*                             K2Node_Event_NewUIData;                            // 0x0178(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMatchaInventoryItemUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data; // 0x0180(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0188(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_189[0x7];                                      // 0x0189(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data_1; // 0x0190(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x0198(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue;         // 0x0199(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue_1;       // 0x019A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_OldValue_3;                     // 0x019B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue_3;                     // 0x019C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19D[0x3];                                      // 0x019D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate_3;            // 0x01A0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate_4;            // 0x01B0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate_5;            // 0x01C0(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable_3;                              // 0x01D0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1D1[0x3];                                      // 0x01D1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(class FText OldValue, class FText NewValue)> K2Node_CreateDelegate_OutputDelegate_6;            // 0x01D4(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1E4[0x4];                                      // 0x01E4(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_CustomEvent_OldValue_2;                     // 0x01E8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UTexture*                               K2Node_CustomEvent_NewValue_2;                     // 0x01F0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_OldValue_1;                     // 0x01F8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue_1;                     // 0x01F9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable_4;                              // 0x01FA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable_5;                              // 0x01FB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1FC[0x4];                                      // 0x01FC(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               K2Node_Select_Default;                             // 0x0200(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable_6;                              // 0x0208(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 Temp_byte_Variable_7;                              // 0x0209(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_20A[0x2];                                      // 0x020A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Temp_int_Variable;                                 // 0x020C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default_1;                           // 0x0210(0x0014)()
	EObjectRarity                                 K2Node_Select_Default_2;                           // 0x0224(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_225[0x3];                                      // 0x0225(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 OldValue, int32 NewValue)> K2Node_CreateDelegate_OutputDelegate_7;            // 0x0228(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           K2Node_Select_Default_3;                           // 0x0238(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_OldValue;                       // 0x0248(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_CustomEvent_NewValue;                       // 0x0249(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24A[0x2];                                      // 0x024A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(int32 OldValue, int32 NewValue)> K2Node_CreateDelegate_OutputDelegate_8;            // 0x024C(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Get_Item_Is_Throwable_bIsThrowable;       // 0x025C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default_4;                           // 0x025D(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot");
static_assert(sizeof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot) == 0x000260, "Wrong size on WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, EntryPoint) == 0x000000, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_Get_Item_Is_Consumable_On_Hold_bIsConsumableOnHold) == 0x000004, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_Get_Item_Is_Consumable_On_Hold_bIsConsumableOnHold' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable) == 0x000018, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_struct_Variable) == 0x00001C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_struct_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_struct_Variable_1) == 0x00002C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_struct_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_struct_Variable_2) == 0x00003C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_struct_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_struct_Variable_3) == 0x00004C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_struct_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_bool_Variable) == 0x00005C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_1) == 0x000060, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_object_Variable) == 0x000070, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_object_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_bool_Variable_1) == 0x000078, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_bool_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_2) == 0x00007C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_bool_Variable_2) == 0x00008C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_bool_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_1) == 0x00008D, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_2) == 0x00008E, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_8) == 0x000090, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_8' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_8) == 0x000094, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_8' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_GetUIData_ReturnValue) == 0x000098, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_GetUIData_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_LessEqual_IntInt_ReturnValue) == 0x0000A0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_LessEqual_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x0000A8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_bSuccess) == 0x0000B0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_Conv_IntToText_ReturnValue) == 0x0000B8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_Conv_IntToText_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_IntBinding_GetValue_ReturnValue) == 0x0000C8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_IntBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_Conv_IntToInt64_ReturnValue) == 0x0000D0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_MakeStruct_FormatArgumentData) == 0x0000D8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_MakeArray_Array) == 0x000120, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_Format_ReturnValue) == 0x000130, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Event_IsDesignTime) == 0x000140, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Event_IsDesignTime' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_7) == 0x000144, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_7) == 0x000148, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_6) == 0x000150, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_6) == 0x000160, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_5) == 0x000170, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_5) == 0x000171, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_4) == 0x000172, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_4) == 0x000173, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Event_NewUIData) == 0x000178, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Event_NewUIData' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data) == 0x000180, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_bSuccess_1) == 0x000188, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data_1) == 0x000190, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_DynamicCast_bSuccess_2) == 0x000198, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_BoolBinding_GetValue_ReturnValue) == 0x000199, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_BoolBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_BoolBinding_GetValue_ReturnValue_1) == 0x00019A, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_BoolBinding_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_3) == 0x00019B, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_3) == 0x00019C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_3) == 0x0001A0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_4) == 0x0001B0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_5) == 0x0001C0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_3) == 0x0001D0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_6) == 0x0001D4, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_2) == 0x0001E8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_2) == 0x0001F0, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue_1) == 0x0001F8, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue_1) == 0x0001F9, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_4) == 0x0001FA, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_4' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_5) == 0x0001FB, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_5' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Select_Default) == 0x000200, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Select_Default' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_6) == 0x000208, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_6' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_byte_Variable_7) == 0x000209, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_byte_Variable_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, Temp_int_Variable) == 0x00020C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::Temp_int_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Select_Default_1) == 0x000210, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Select_Default_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Select_Default_2) == 0x000224, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Select_Default_2' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_7) == 0x000228, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_7' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Select_Default_3) == 0x000238, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Select_Default_3' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_OldValue) == 0x000248, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CustomEvent_NewValue) == 0x000249, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CustomEvent_NewValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_CreateDelegate_OutputDelegate_8) == 0x00024C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_CreateDelegate_OutputDelegate_8' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, CallFunc_Get_Item_Is_Throwable_bIsThrowable) == 0x00025C, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::CallFunc_Get_Item_Is_Throwable_bIsThrowable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot, K2Node_Select_Default_4) == 0x00025D, "Member 'WBP_InventorySlot_C_ExecuteUbergraph_WBP_InventorySlot::K2Node_Select_Default_4' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.Get Item Is Consumable On Hold
// 0x0028 (0x0028 - 0x0000)
struct WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold final
{
public:
	bool                                          bIsConsumableOnHold;                               // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventoryItemUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue_1;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold");
static_assert(sizeof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold) == 0x000028, "Wrong size on WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, bIsConsumableOnHold) == 0x000000, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::bIsConsumableOnHold' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x000008, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data) == 0x000018, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, CallFunc_BoolBinding_GetValue_ReturnValue) == 0x000021, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::CallFunc_BoolBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold, CallFunc_BoolBinding_GetValue_ReturnValue_1) == 0x000022, "Member 'WBP_InventorySlot_C_Get_Item_Is_Consumable_On_Hold::CallFunc_BoolBinding_GetValue_ReturnValue_1' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.Get Item Is Throwable
// 0x0028 (0x0028 - 0x0000)
struct WBP_InventorySlot_C_Get_Item_Is_Throwable final
{
public:
	bool                                          bIsThrowable;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventoryItemUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data; // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue;         // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue_1;       // 0x0022(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_Get_Item_Is_Throwable) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_Get_Item_Is_Throwable");
static_assert(sizeof(WBP_InventorySlot_C_Get_Item_Is_Throwable) == 0x000028, "Wrong size on WBP_InventorySlot_C_Get_Item_Is_Throwable");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, bIsThrowable) == 0x000000, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::bIsThrowable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x000008, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data) == 0x000018, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::K2Node_DynamicCast_AsMatcha_Inventory_Item_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, K2Node_DynamicCast_bSuccess_1) == 0x000020, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, CallFunc_BoolBinding_GetValue_ReturnValue) == 0x000021, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::CallFunc_BoolBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_Get_Item_Is_Throwable, CallFunc_BoolBinding_GetValue_ReturnValue_1) == 0x000022, "Member 'WBP_InventorySlot_C_Get_Item_Is_Throwable::CallFunc_BoolBinding_GetValue_ReturnValue_1' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.GetItemCountAsInt
// 0x0018 (0x0018 - 0x0000)
struct WBP_InventorySlot_C_GetItemCountAsInt final
{
public:
	int32                                         Count;                                             // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_11[0x3];                                       // 0x0011(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_IntBinding_GetValue_ReturnValue;          // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_GetItemCountAsInt) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_GetItemCountAsInt");
static_assert(sizeof(WBP_InventorySlot_C_GetItemCountAsInt) == 0x000018, "Wrong size on WBP_InventorySlot_C_GetItemCountAsInt");
static_assert(offsetof(WBP_InventorySlot_C_GetItemCountAsInt, Count) == 0x000000, "Member 'WBP_InventorySlot_C_GetItemCountAsInt::Count' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemCountAsInt, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x000008, "Member 'WBP_InventorySlot_C_GetItemCountAsInt::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemCountAsInt, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_InventorySlot_C_GetItemCountAsInt::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemCountAsInt, CallFunc_IntBinding_GetValue_ReturnValue) == 0x000014, "Member 'WBP_InventorySlot_C_GetItemCountAsInt::CallFunc_IntBinding_GetValue_ReturnValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.GetItemIsGun
// 0x0018 (0x0018 - 0x0000)
struct WBP_InventorySlot_C_GetItemIsGun final
{
public:
	bool                                          bIsGun;                                            // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_GetItemIsGun) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_GetItemIsGun");
static_assert(sizeof(WBP_InventorySlot_C_GetItemIsGun) == 0x000018, "Wrong size on WBP_InventorySlot_C_GetItemIsGun");
static_assert(offsetof(WBP_InventorySlot_C_GetItemIsGun, bIsGun) == 0x000000, "Member 'WBP_InventorySlot_C_GetItemIsGun::bIsGun' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemIsGun, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x000008, "Member 'WBP_InventorySlot_C_GetItemIsGun::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemIsGun, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_InventorySlot_C_GetItemIsGun::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_GetItemIsGun, CallFunc_BoolBinding_GetValue_ReturnValue) == 0x000011, "Member 'WBP_InventorySlot_C_GetItemIsGun::CallFunc_BoolBinding_GetValue_ReturnValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.IsEnergized
// 0x0018 (0x0018 - 0x0000)
struct WBP_InventorySlot_C_IsEnergized final
{
public:
	bool                                          bIsEnergized;                                      // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaInventorySlotUIData*             K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data; // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BoolBinding_GetValue_ReturnValue;         // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_IsEnergized) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_IsEnergized");
static_assert(sizeof(WBP_InventorySlot_C_IsEnergized) == 0x000018, "Wrong size on WBP_InventorySlot_C_IsEnergized");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized, bIsEnergized) == 0x000000, "Member 'WBP_InventorySlot_C_IsEnergized::bIsEnergized' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized, K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data) == 0x000008, "Member 'WBP_InventorySlot_C_IsEnergized::K2Node_DynamicCast_AsMatcha_Inventory_Slot_UI_Data' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized, K2Node_DynamicCast_bSuccess) == 0x000010, "Member 'WBP_InventorySlot_C_IsEnergized::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized, CallFunc_BoolBinding_GetValue_ReturnValue) == 0x000011, "Member 'WBP_InventorySlot_C_IsEnergized::CallFunc_BoolBinding_GetValue_ReturnValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.IsEnergized_Gear
// 0x0020 (0x0020 - 0x0000)
struct WBP_InventorySlot_C_IsEnergized_Gear final
{
public:
	bool                                          IsEnergized;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2[0x2];                                        // 0x0002(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Temp_real_Variable;                                // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         Temp_real_Variable_1;                              // 0x0008(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Select_Default;                             // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_IsEnergized_Gear) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_IsEnergized_Gear");
static_assert(sizeof(WBP_InventorySlot_C_IsEnergized_Gear) == 0x000020, "Wrong size on WBP_InventorySlot_C_IsEnergized_Gear");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, IsEnergized) == 0x000000, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::IsEnergized' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, Temp_bool_Variable) == 0x000001, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, Temp_real_Variable) == 0x000004, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::Temp_real_Variable' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, Temp_real_Variable_1) == 0x000008, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::Temp_real_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_IsEnergized_Gear, K2Node_Select_Default) == 0x000018, "Member 'WBP_InventorySlot_C_IsEnergized_Gear::K2Node_Select_Default' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnEnergizedStateChange
// 0x0002 (0x0002 - 0x0000)
struct WBP_InventorySlot_C_OnEnergizedStateChange final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnEnergizedStateChange) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_OnEnergizedStateChange");
static_assert(sizeof(WBP_InventorySlot_C_OnEnergizedStateChange) == 0x000002, "Wrong size on WBP_InventorySlot_C_OnEnergizedStateChange");
static_assert(offsetof(WBP_InventorySlot_C_OnEnergizedStateChange, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnEnergizedStateChange::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnEnergizedStateChange, NewValue) == 0x000001, "Member 'WBP_InventorySlot_C_OnEnergizedStateChange::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnGearSlotBecameEnergized__DelegateSignature
// 0x0001 (0x0001 - 0x0000)
struct WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature final
{
public:
	bool                                          NewEnergizedState;                                 // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature");
static_assert(sizeof(WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature) == 0x000001, "Wrong size on WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature");
static_assert(offsetof(WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature, NewEnergizedState) == 0x000000, "Member 'WBP_InventorySlot_C_OnGearSlotBecameEnergized__DelegateSignature::NewEnergizedState' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnIsGearItemChanged
// 0x0002 (0x0002 - 0x0000)
struct WBP_InventorySlot_C_OnIsGearItemChanged final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnIsGearItemChanged) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_OnIsGearItemChanged");
static_assert(sizeof(WBP_InventorySlot_C_OnIsGearItemChanged) == 0x000002, "Wrong size on WBP_InventorySlot_C_OnIsGearItemChanged");
static_assert(offsetof(WBP_InventorySlot_C_OnIsGearItemChanged, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnIsGearItemChanged::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnIsGearItemChanged, NewValue) == 0x000001, "Member 'WBP_InventorySlot_C_OnIsGearItemChanged::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnItemCountChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_InventorySlot_C_OnItemCountChanged final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewValue;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnItemCountChanged) == 0x000004, "Wrong alignment on WBP_InventorySlot_C_OnItemCountChanged");
static_assert(sizeof(WBP_InventorySlot_C_OnItemCountChanged) == 0x000008, "Wrong size on WBP_InventorySlot_C_OnItemCountChanged");
static_assert(offsetof(WBP_InventorySlot_C_OnItemCountChanged, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnItemCountChanged::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnItemCountChanged, NewValue) == 0x000004, "Member 'WBP_InventorySlot_C_OnItemCountChanged::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnRarityChanged
// 0x0008 (0x0008 - 0x0000)
struct WBP_InventorySlot_C_OnRarityChanged final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewValue;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnRarityChanged) == 0x000004, "Wrong alignment on WBP_InventorySlot_C_OnRarityChanged");
static_assert(sizeof(WBP_InventorySlot_C_OnRarityChanged) == 0x000008, "Wrong size on WBP_InventorySlot_C_OnRarityChanged");
static_assert(offsetof(WBP_InventorySlot_C_OnRarityChanged, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnRarityChanged::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnRarityChanged, NewValue) == 0x000004, "Member 'WBP_InventorySlot_C_OnRarityChanged::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnThrowableOnlyChanged
// 0x0002 (0x0002 - 0x0000)
struct WBP_InventorySlot_C_OnThrowableOnlyChanged final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_OnThrowableOnlyChanged) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_OnThrowableOnlyChanged");
static_assert(sizeof(WBP_InventorySlot_C_OnThrowableOnlyChanged) == 0x000002, "Wrong size on WBP_InventorySlot_C_OnThrowableOnlyChanged");
static_assert(offsetof(WBP_InventorySlot_C_OnThrowableOnlyChanged, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnThrowableOnlyChanged::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnThrowableOnlyChanged, NewValue) == 0x000001, "Member 'WBP_InventorySlot_C_OnThrowableOnlyChanged::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.OnTooltipTextChange
// 0x0020 (0x0020 - 0x0000)
struct WBP_InventorySlot_C_OnTooltipTextChange final
{
public:
	class FText                                   OldValue;                                          // 0x0000(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
	class FText                                   NewValue;                                          // 0x0010(0x0010)(BlueprintVisible, BlueprintReadOnly, Parm)
};
static_assert(alignof(WBP_InventorySlot_C_OnTooltipTextChange) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_OnTooltipTextChange");
static_assert(sizeof(WBP_InventorySlot_C_OnTooltipTextChange) == 0x000020, "Wrong size on WBP_InventorySlot_C_OnTooltipTextChange");
static_assert(offsetof(WBP_InventorySlot_C_OnTooltipTextChange, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_OnTooltipTextChange::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_OnTooltipTextChange, NewValue) == 0x000010, "Member 'WBP_InventorySlot_C_OnTooltipTextChange::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.PreConstruct
// 0x0001 (0x0001 - 0x0000)
struct WBP_InventorySlot_C_PreConstruct final
{
public:
	bool                                          IsDesignTime;                                      // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_PreConstruct) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_PreConstruct");
static_assert(sizeof(WBP_InventorySlot_C_PreConstruct) == 0x000001, "Wrong size on WBP_InventorySlot_C_PreConstruct");
static_assert(offsetof(WBP_InventorySlot_C_PreConstruct, IsDesignTime) == 0x000000, "Member 'WBP_InventorySlot_C_PreConstruct::IsDesignTime' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.SetIsHeld
// 0x0002 (0x0002 - 0x0000)
struct WBP_InventorySlot_C_SetIsHeld final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_SetIsHeld) == 0x000001, "Wrong alignment on WBP_InventorySlot_C_SetIsHeld");
static_assert(sizeof(WBP_InventorySlot_C_SetIsHeld) == 0x000002, "Wrong size on WBP_InventorySlot_C_SetIsHeld");
static_assert(offsetof(WBP_InventorySlot_C_SetIsHeld, OldValue) == 0x000000, "Member 'WBP_InventorySlot_C_SetIsHeld::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetIsHeld, NewValue) == 0x000001, "Member 'WBP_InventorySlot_C_SetIsHeld::NewValue' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.SetItemImage
// 0x0020 (0x0020 - 0x0000)
struct WBP_InventorySlot_C_SetItemImage final
{
public:
	class UTexture*                               Value;                                             // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_SetItemImage) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_SetItemImage");
static_assert(sizeof(WBP_InventorySlot_C_SetItemImage) == 0x000020, "Wrong size on WBP_InventorySlot_C_SetItemImage");
static_assert(offsetof(WBP_InventorySlot_C_SetItemImage, Value) == 0x000000, "Member 'WBP_InventorySlot_C_SetItemImage::Value' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetItemImage, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_InventorySlot_C_SetItemImage::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetItemImage, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'WBP_InventorySlot_C_SetItemImage::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetItemImage, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000010, "Member 'WBP_InventorySlot_C_SetItemImage::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetItemImage, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000018, "Member 'WBP_InventorySlot_C_SetItemImage::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function WBP_InventorySlot.WBP_InventorySlot_C.SetSize
// 0x0018 (0x0018 - 0x0000)
struct WBP_InventorySlot_C_SetSize final
{
public:
	double                                        CallFunc_BreakVector2D_X;                          // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast; // 0x0010(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast; // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_InventorySlot_C_SetSize) == 0x000008, "Wrong alignment on WBP_InventorySlot_C_SetSize");
static_assert(sizeof(WBP_InventorySlot_C_SetSize) == 0x000018, "Wrong size on WBP_InventorySlot_C_SetSize");
static_assert(offsetof(WBP_InventorySlot_C_SetSize, CallFunc_BreakVector2D_X) == 0x000000, "Member 'WBP_InventorySlot_C_SetSize::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetSize, CallFunc_BreakVector2D_Y) == 0x000008, "Member 'WBP_InventorySlot_C_SetSize::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetSize, CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast) == 0x000010, "Member 'WBP_InventorySlot_C_SetSize::CallFunc_SetWidthOverride_InWidthOverride_ImplicitCast' has a wrong offset!");
static_assert(offsetof(WBP_InventorySlot_C_SetSize, CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast) == 0x000014, "Member 'WBP_InventorySlot_C_SetSize::CallFunc_SetHeightOverride_InHeightOverride_ImplicitCast' has a wrong offset!");

}

