#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_Interactable_VaultTerminal

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "InteractiveEntity_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass E_Interactable_VaultTerminal.E_Interactable_VaultTerminal_C
// 0x0028 (0x04E8 - 0x04C0)
class AE_Interactable_VaultTerminal_C final : public AInteractiveEntity_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_E_Interactable_VaultTerminal_C;     // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMatchaItemAsset*                       RequiredItem;                                      // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           RequiredItemSlotCategory;                          // 0x04D8(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         NumKeysRequired;                                   // 0x04E0(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AfterInteractionCancelledOrCompleted(class AActor* InteractingActor, bool bWasCancelled);
	void AfterInteractionStarted(class AActor* InteractingActor);
	void ExecuteUbergraph_E_Interactable_VaultTerminal(int32 EntryPoint);
	void HandleReset();
	void OnEnabledChanged(bool bOldEnabled, bool bNewEnabled);
	void UpdateCollision();

	bool CanStartInteraction(class AActor* InteractingActor) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"E_Interactable_VaultTerminal_C">();
	}
	static class AE_Interactable_VaultTerminal_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AE_Interactable_VaultTerminal_C>();
	}
};
static_assert(alignof(AE_Interactable_VaultTerminal_C) == 0x000008, "Wrong alignment on AE_Interactable_VaultTerminal_C");
static_assert(sizeof(AE_Interactable_VaultTerminal_C) == 0x0004E8, "Wrong size on AE_Interactable_VaultTerminal_C");
static_assert(offsetof(AE_Interactable_VaultTerminal_C, UberGraphFrame_E_Interactable_VaultTerminal_C) == 0x0004C0, "Member 'AE_Interactable_VaultTerminal_C::UberGraphFrame_E_Interactable_VaultTerminal_C' has a wrong offset!");
static_assert(offsetof(AE_Interactable_VaultTerminal_C, StaticMesh) == 0x0004C8, "Member 'AE_Interactable_VaultTerminal_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AE_Interactable_VaultTerminal_C, RequiredItem) == 0x0004D0, "Member 'AE_Interactable_VaultTerminal_C::RequiredItem' has a wrong offset!");
static_assert(offsetof(AE_Interactable_VaultTerminal_C, RequiredItemSlotCategory) == 0x0004D8, "Member 'AE_Interactable_VaultTerminal_C::RequiredItemSlotCategory' has a wrong offset!");
static_assert(offsetof(AE_Interactable_VaultTerminal_C, NumKeysRequired) == 0x0004E0, "Member 'AE_Interactable_VaultTerminal_C::NumKeysRequired' has a wrong offset!");

}

