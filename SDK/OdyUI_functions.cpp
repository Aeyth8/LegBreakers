#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OdyUI

#include "Basic.hpp"

#include "OdyUI_classes.hpp"
#include "OdyUI_parameters.hpp"


namespace SDK
{

// Function OdyUI.OdyWidget.AddDataBindingContext
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             ContextName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::AddDataBindingContext(class FName ContextName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AddDataBindingContext");

	Params::OdyWidget_AddDataBindingContext Parms{};

	Parms.ContextName = ContextName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.AddInputMappingContext
// (Native, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             InputContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::AddInputMappingContext(class UInputMappingContext* InputContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AddInputMappingContext");

	Params::OdyWidget_AddInputMappingContext Parms{};

	Parms.InputContext = InputContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.AnimateIn
// (Native, Event, Protected, BlueprintEvent)

void UOdyWidget::AnimateIn()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AnimateIn");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.AnimateInComplete
// (Final, Native, Protected, BlueprintCallable)

void UOdyWidget::AnimateInComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AnimateInComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.AnimateOut
// (Native, Event, Protected, BlueprintEvent)

void UOdyWidget::AnimateOut()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AnimateOut");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.AnimateOutComplete
// (Final, Native, Protected, BlueprintCallable)

void UOdyWidget::AnimateOutComplete()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "AnimateOutComplete");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.BindData
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UOdyUIData*                       NewUIData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::BindData(class UOdyUIData* NewUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "BindData");

	Params::OdyWidget_BindData Parms{};

	Parms.NewUIData = NewUIData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyWidget.CheckForLocalPlayerStateAndGameState
// (Final, Native, Protected)

void UOdyWidget::CheckForLocalPlayerStateAndGameState()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "CheckForLocalPlayerStateAndGameState");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.ClearAllBindings
// (Final, Native, Public, BlueprintCallable)

void UOdyWidget::ClearAllBindings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "ClearAllBindings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.ClearBindingsWithContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             BindingContext                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::ClearBindingsWithContext(class FName BindingContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "ClearBindingsWithContext");

	Params::OdyWidget_ClearBindingsWithContext Parms{};

	Parms.BindingContext = BindingContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.ClearLastFocusedWidget
// (Final, Native, Protected, BlueprintCallable)

void UOdyWidget::ClearLastFocusedWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "ClearLastFocusedWidget");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.GetWidgetToFocus
// (Native, Event, Protected, BlueprintEvent)
// Parameters:
// class UWidget*                          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UWidget* UOdyWidget::GetWidgetToFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "GetWidgetToFocus");

	Params::OdyWidget_GetWidgetToFocus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyWidget.Hide
// (Final, Native, Public, BlueprintCallable)

void UOdyWidget::Hide()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "Hide");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.OnLocalBasePlayerStateAndGameStateReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AGameStateBase*                   GameState                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::OnLocalBasePlayerStateAndGameStateReady(class APlayerState* PlayerState, class AGameStateBase* GameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "OnLocalBasePlayerStateAndGameStateReady");

	Params::OdyWidget_OnLocalBasePlayerStateAndGameStateReady Parms{};

	Parms.PlayerState = PlayerState;
	Parms.GameState = GameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyWidget.OnNetOwnerBasePlayerStateSet
// (Event, Public, BlueprintEvent)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::OnNetOwnerBasePlayerStateSet(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "OnNetOwnerBasePlayerStateSet");

	Params::OdyWidget_OnNetOwnerBasePlayerStateSet Parms{};

	Parms.PlayerState = PlayerState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyWidget.OnUIDataSet
// (Event, Public, BlueprintEvent)
// Parameters:
// class UOdyUIData*                       NewUIData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::OnUIDataSet(class UOdyUIData* NewUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "OnUIDataSet");

	Params::OdyWidget_OnUIDataSet Parms{};

	Parms.NewUIData = NewUIData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyWidget.RemoveInputMappingContext
// (Native, Public, BlueprintCallable)
// Parameters:
// class UInputMappingContext*             InputContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::RemoveInputMappingContext(class UInputMappingContext* InputContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "RemoveInputMappingContext");

	Params::OdyWidget_RemoveInputMappingContext Parms{};

	Parms.InputContext = InputContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.RemoveLatestDataBindingContext
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// class FName                             ContextName                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::RemoveLatestDataBindingContext(class FName ContextName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "RemoveLatestDataBindingContext");

	Params::OdyWidget_RemoveLatestDataBindingContext Parms{};

	Parms.ContextName = ContextName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.SetInputContextPriority
// (Native, Public, BlueprintCallable)
// Parameters:
// EOdyInputContextPriority                InInputContextPriority                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::SetInputContextPriority(EOdyInputContextPriority InInputContextPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "SetInputContextPriority");

	Params::OdyWidget_SetInputContextPriority Parms{};

	Parms.InInputContextPriority = InInputContextPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.SetNetOwnerPlayerState
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class APlayerState*                     PlayerState                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::SetNetOwnerPlayerState(class APlayerState* PlayerState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "SetNetOwnerPlayerState");

	Params::OdyWidget_SetNetOwnerPlayerState Parms{};

	Parms.PlayerState = PlayerState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.SetTickWhenOffscreen
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// bool                                    bInTickWhenOffscreen                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::SetTickWhenOffscreen(bool bInTickWhenOffscreen)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "SetTickWhenOffscreen");

	Params::OdyWidget_SetTickWhenOffscreen Parms{};

	Parms.bInTickWhenOffscreen = bInTickWhenOffscreen;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.SetUIData
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyUIData*                       InUIData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::SetUIData(class UOdyUIData* InUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "SetUIData");

	Params::OdyWidget_SetUIData Parms{};

	Parms.InUIData = InUIData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.Show
// (Final, Native, Public, BlueprintCallable)

void UOdyWidget::Show()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "Show");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyWidget.UnbindData
// (Event, Protected, BlueprintEvent)
// Parameters:
// class UOdyUIData*                       OldUIData                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyWidget::UnbindData(class UOdyUIData* OldUIData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "UnbindData");

	Params::OdyWidget_UnbindData Parms{};

	Parms.OldUIData = OldUIData;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyWidget.GetCurrentDataBindingContext
// (Final, Native, Protected, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UOdyWidget::GetCurrentDataBindingContext() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "GetCurrentDataBindingContext");

	Params::OdyWidget_GetCurrentDataBindingContext Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyWidget.GetNetOwnerBasePlayerState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class APlayerState*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerState* UOdyWidget::GetNetOwnerBasePlayerState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "GetNetOwnerBasePlayerState");

	Params::OdyWidget_GetNetOwnerBasePlayerState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyWidget.GetUIData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOdyUIData*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyUIData* UOdyWidget::GetUIData() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "GetUIData");

	Params::OdyWidget_GetUIData Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyWidget.GetWidgetToFocusNames
// (Final, Native, Protected, Const)
// Parameters:
// TArray<class FString>                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NativeAccessSpecifierPublic)

TArray<class FString> UOdyWidget::GetWidgetToFocusNames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "GetWidgetToFocusNames");

	Params::OdyWidget_GetWidgetToFocusNames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyWidget.HasOwnerFocus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bIncludingDescendants                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyWidget::HasOwnerFocus(bool bIncludingDescendants) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyWidget", "HasOwnerFocus");

	Params::OdyWidget_HasOwnerFocus Parms{};

	Parms.bIncludingDescendants = bIncludingDescendants;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyMenu.ClearInputModeOverride
// (Final, Native, Public, BlueprintCallable)

void UOdyMenu::ClearInputModeOverride()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "ClearInputModeOverride");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.CloseSelf
// (Final, Native, Public, BlueprintCallable)

void UOdyMenu::CloseSelf()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "CloseSelf");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.DisableConsumeMouseDownEvents
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UOdyMenu::DisableConsumeMouseDownEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "DisableConsumeMouseDownEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.HideOtherModalUntilClosed
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMenu*                         OtherMenu                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::HideOtherModalUntilClosed(class UOdyMenu* OtherMenu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "HideOtherModalUntilClosed");

	Params::OdyMenu_HideOtherModalUntilClosed Parms{};

	Parms.OtherMenu = OtherMenu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.OnNavBack
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UOdyMenu::OnNavBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "OnNavBack");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.OnNavigatedAway
// (Event, Protected, BlueprintEvent)
// Parameters:
// EOdyNavigationDirection                 NavDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::OnNavigatedAway(EOdyNavigationDirection NavDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "OnNavigatedAway");

	Params::OdyMenu_OnNavigatedAway Parms{};

	Parms.NavDirection = NavDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyMenu.OnNavigatedTo
// (Event, Protected, HasOutParams, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      Args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Action                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOdyNavigationDirection                 NavDirection                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::OnNavigatedTo(const TMap<class FString, class FString>& Args, const class FString& Action, EOdyNavigationDirection NavDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "OnNavigatedTo");

	Params::OdyMenu_OnNavigatedTo Parms{};

	Parms.Args = std::move(Args);
	Parms.Action = std::move(Action);
	Parms.NavDirection = NavDirection;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyMenu.SetInputModeOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EMenuInputMode                          InputMode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetInputModeOverride(EMenuInputMode InputMode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetInputModeOverride");

	Params::OdyMenu_SetInputModeOverride Parms{};

	Parms.InputMode = InputMode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetModalPriorityOverride
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOdyModalPriority                       ModalPri                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetModalPriorityOverride(EOdyModalPriority ModalPri)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetModalPriorityOverride");

	Params::OdyMenu_SetModalPriorityOverride Parms{};

	Parms.ModalPri = ModalPri;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetNeverWantsInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bNeverWantsInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetNeverWantsInput(bool bNeverWantsInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetNeverWantsInput");

	Params::OdyMenu_SetNeverWantsInput Parms{};

	Parms.bNeverWantsInput = bNeverWantsInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetupToConsumeMouseDownEvents
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)

void UOdyMenu::SetupToConsumeMouseDownEvents()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetupToConsumeMouseDownEvents");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetWantsAnalogCursor
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOdyAnalogCursorSetting                 InWantsAnalogCursor                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetWantsAnalogCursor(EOdyAnalogCursorSetting InWantsAnalogCursor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetWantsAnalogCursor");

	Params::OdyMenu_SetWantsAnalogCursor Parms{};

	Parms.InWantsAnalogCursor = InWantsAnalogCursor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetWantsAnalogCursorHidden
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOdyAnalogCursorSetting                 InWantsAnalogCursorHidden                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetWantsAnalogCursorHidden(EOdyAnalogCursorSetting InWantsAnalogCursorHidden)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetWantsAnalogCursorHidden");

	Params::OdyMenu_SetWantsAnalogCursorHidden Parms{};

	Parms.InWantsAnalogCursorHidden = InWantsAnalogCursorHidden;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.SetWantsAnalogCursorLocked
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// EOdyAnalogCursorSetting                 InWantsAnalogCursorLocked                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMenu::SetWantsAnalogCursorLocked(EOdyAnalogCursorSetting InWantsAnalogCursorLocked)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "SetWantsAnalogCursorLocked");

	Params::OdyMenu_SetWantsAnalogCursorLocked Parms{};

	Parms.InWantsAnalogCursorLocked = InWantsAnalogCursorLocked;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenu.GetInputMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EMenuInputMode                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EMenuInputMode UOdyMenu::GetInputMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "GetInputMode");

	Params::OdyMenu_GetInputMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyMenu.GetModalPriority
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOdyModalPriority                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOdyModalPriority UOdyMenu::GetModalPriority() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenu", "GetModalPriority");

	Params::OdyMenu_GetModalPriority Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyConfirmationModal.OnCanceled
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UOdyConfirmationModal::OnCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyConfirmationModal", "OnCanceled");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyConfirmationModal.OnConfirmed
// (Native, Event, Protected, BlueprintCallable, BlueprintEvent)

void UOdyConfirmationModal::OnConfirmed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyConfirmationModal", "OnConfirmed");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyDeferredPainter.SetEnableDeferPaint
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInEnableDeferPaint                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyDeferredPainter::SetEnableDeferPaint(bool bInEnableDeferPaint)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyDeferredPainter", "SetEnableDeferPaint");

	Params::OdyDeferredPainter_SetEnableDeferPaint Parms{};

	Parms.bInEnableDeferPaint = bInEnableDeferPaint;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyDeferredPainter.GetEnableDeferPaint
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyDeferredPainter::GetEnableDeferPaint() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyDeferredPainter", "GetEnableDeferPaint");

	Params::OdyDeferredPainter_GetEnableDeferPaint Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyEnhancedInputPlatformData.UpdateMappingContextRedirects
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnable                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyEnhancedInputPlatformData::UpdateMappingContextRedirects(bool bEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyEnhancedInputPlatformData", "UpdateMappingContextRedirects");

	Params::OdyEnhancedInputPlatformData_UpdateMappingContextRedirects Parms{};

	Parms.bEnable = bEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyHUD.OnUIRouterCreated
// (Event, Protected, BlueprintEvent)

void AOdyHUD::OnUIRouterCreated()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyHUD", "OnUIRouterCreated");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OdyUI.OdyHUD.ShowUIRouter
// (Exec, Native, Public)

void AOdyHUD::ShowUIRouter()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyHUD", "ShowUIRouter");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyHUD.GetUIRouter
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOdyUIRouter*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyUIRouter* AOdyHUD::GetUIRouter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyHUD", "GetUIRouter");

	Params::OdyHUD_GetUIRouter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyInputRichTextBlockDecorator.OnControlMappingsRebuilt
// (Final, Native, Public)

void UOdyInputRichTextBlockDecorator::OnControlMappingsRebuilt()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputRichTextBlockDecorator", "OnControlMappingsRebuilt");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputRichTextBlockDecorator.OnInputDeviceChanged
// (Final, Native, Public)
// Parameters:
// struct FGameplayTag                     InputDeviceTag                                         (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputRichTextBlockDecorator::OnInputDeviceChanged(const struct FGameplayTag& InputDeviceTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputRichTextBlockDecorator", "OnInputDeviceChanged");

	Params::OdyInputRichTextBlockDecorator_OnInputDeviceChanged Parms{};

	Parms.InputDeviceTag = std::move(InputDeviceTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyListView.SetEntryWidgetClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          InEntryWidgetClass                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyListView::SetEntryWidgetClass(TSubclassOf<class UUserWidget> InEntryWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyListView", "SetEntryWidgetClass");

	Params::OdyListView_SetEntryWidgetClass Parms{};

	Parms.InEntryWidgetClass = InEntryWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyMenuData.GetMenuClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EPlatformType                           Platform                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> UOdyMenuData::GetMenuClass(EPlatformType Platform) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMenuData", "GetMenuClass");

	Params::OdyMenuData_GetMenuClass Parms{};

	Parms.Platform = Platform;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyNavButton.Navigate
// (Final, Native, Public, BlueprintCallable)

void UOdyNavButton::Navigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyNavButton", "Navigate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyNavCheckbox.Navigate
// (Final, Native, Public, BlueprintCallable)

void UOdyNavCheckbox::Navigate()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyNavCheckbox", "Navigate");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyNavCheckbox.SetGroupId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             InGroupId                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyNavCheckbox::SetGroupId(class FName InGroupId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyNavCheckbox", "SetGroupId");

	Params::OdyNavCheckbox_SetGroupId Parms{};

	Parms.InGroupId = InGroupId;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyNavCheckbox.SetIsCheckedWithCallback
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    InIsChecked                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAllowNavigate                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyNavCheckbox::SetIsCheckedWithCallback(bool InIsChecked, bool bAllowNavigate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyNavCheckbox", "SetIsCheckedWithCallback");

	Params::OdyNavCheckbox_SetIsCheckedWithCallback Parms{};

	Parms.InIsChecked = InIsChecked;
	Parms.bAllowNavigate = bAllowNavigate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdySpringStatics.AdvanceSpringFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          SpringConfiguration                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOdySpringStateFloat             SpringState                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   From                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   To                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdySpringStatics::AdvanceSpringFloat(const float DeltaTime, const struct FOdySpringConfiguration& SpringConfiguration, struct FOdySpringStateFloat& SpringState, const float From, const float To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "AdvanceSpringFloat");

	Params::OdySpringStatics_AdvanceSpringFloat Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SpringConfiguration = std::move(SpringConfiguration);
	Parms.SpringState = std::move(SpringState);
	Parms.From = From;
	Parms.To = To;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function OdyUI.OdySpringStatics.AdvanceSpringFloatAngle
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          SpringConfiguration                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOdySpringStateFloat             SpringState                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   From                                                   (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   To                                                     (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdySpringStatics::AdvanceSpringFloatAngle(const float DeltaTime, const struct FOdySpringConfiguration& SpringConfiguration, struct FOdySpringStateFloat& SpringState, const float From, const float To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "AdvanceSpringFloatAngle");

	Params::OdySpringStatics_AdvanceSpringFloatAngle Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SpringConfiguration = std::move(SpringConfiguration);
	Parms.SpringState = std::move(SpringState);
	Parms.From = From;
	Parms.To = To;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function OdyUI.OdySpringStatics.AdvanceSpringRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          SpringConfiguration                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOdySpringStateRotator           SpringState                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRotator                         From                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         To                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator UOdySpringStatics::AdvanceSpringRotator(const float DeltaTime, const struct FOdySpringConfiguration& SpringConfiguration, struct FOdySpringStateRotator& SpringState, const struct FRotator& From, const struct FRotator& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "AdvanceSpringRotator");

	Params::OdySpringStatics_AdvanceSpringRotator Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SpringConfiguration = std::move(SpringConfiguration);
	Parms.SpringState = std::move(SpringState);
	Parms.From = std::move(From);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function OdyUI.OdySpringStatics.AdvanceSpringVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          SpringConfiguration                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOdySpringStateVector            SpringState                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          From                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          To                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UOdySpringStatics::AdvanceSpringVector(const float DeltaTime, const struct FOdySpringConfiguration& SpringConfiguration, struct FOdySpringStateVector& SpringState, const struct FVector& From, const struct FVector& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "AdvanceSpringVector");

	Params::OdySpringStatics_AdvanceSpringVector Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SpringConfiguration = std::move(SpringConfiguration);
	Parms.SpringState = std::move(SpringState);
	Parms.From = std::move(From);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function OdyUI.OdySpringStatics.AdvanceSpringVector2D
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// float                                   DeltaTime                                              (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          SpringConfiguration                                    (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
// struct FOdySpringStateVector2D          SpringState                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector2D                        From                                                   (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        To                                                     (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UOdySpringStatics::AdvanceSpringVector2D(const float DeltaTime, const struct FOdySpringConfiguration& SpringConfiguration, struct FOdySpringStateVector2D& SpringState, const struct FVector2D& From, const struct FVector2D& To)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "AdvanceSpringVector2D");

	Params::OdySpringStatics_AdvanceSpringVector2D Parms{};

	Parms.DeltaTime = DeltaTime;
	Parms.SpringConfiguration = std::move(SpringConfiguration);
	Parms.SpringState = std::move(SpringState);
	Parms.From = std::move(From);
	Parms.To = std::move(To);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SpringState = std::move(Parms.SpringState);

	return Parms.ReturnValue;
}


// Function OdyUI.OdySpringStatics.GetSpringPreset
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// EOdySpringPreset                        Preset                                                 (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FOdySpringConfiguration          ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, NativeAccessSpecifierPublic)

struct FOdySpringConfiguration UOdySpringStatics::GetSpringPreset(const EOdySpringPreset Preset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdySpringStatics", "GetSpringPreset");

	Params::OdySpringStatics_GetSpringPreset Parms{};

	Parms.Preset = Preset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyTextBlock.SetWrapTextAt
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   InWrapTextAt                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyTextBlock::SetWrapTextAt(float InWrapTextAt)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyTextBlock", "SetWrapTextAt");

	Params::OdyTextBlock_SetWrapTextAt Parms{};

	Parms.InWrapTextAt = InWrapTextAt;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyTileView.SetEntryWidgetClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class UUserWidget>          InEntryWidgetClass                                     (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyTileView::SetEntryWidgetClass(TSubclassOf<class UUserWidget> InEntryWidgetClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyTileView", "SetEntryWidgetClass");

	Params::OdyTileView_SetEntryWidgetClass Parms{};

	Parms.InEntryWidgetClass = InEntryWidgetClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool OldValue, bool NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_AddDelegate(struct FOdyUIBoolBinding& BoolBinding, TDelegate<void(bool OldValue, bool NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_AddDelegate");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_AddDelegate Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_BindWidgetIsEnabled
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInvert                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_BindWidgetIsEnabled(struct FOdyUIBoolBinding& BoolBinding, class UWidget* Widget, bool bInvert)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_BindWidgetIsEnabled");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_BindWidgetIsEnabled Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Widget = Widget;
	Parms.bInvert = bInvert;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_BindWidgetVisibility
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        FalseVisibility                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        TrueVisibility                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_BindWidgetVisibility(struct FOdyUIBoolBinding& BoolBinding, class UWidget* Widget, ESlateVisibility FalseVisibility, ESlateVisibility TrueVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_BindWidgetVisibility");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_BindWidgetVisibility Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Widget = Widget;
	Parms.FalseVisibility = FalseVisibility;
	Parms.TrueVisibility = TrueVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyUIBoolBindingFunctionLibrary::BoolBinding_GetValue(const struct FOdyUIBoolBinding& BoolBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_GetValue");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_GetValue Parms{};

	Parms.BoolBinding = std::move(BoolBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(bool OldValue, bool NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_RemoveDelegate(struct FOdyUIBoolBinding& BoolBinding, TDelegate<void(bool OldValue, bool NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_RemoveDelegate");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_RemoveDelegate Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Bool                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_SetValue(struct FOdyUIBoolBinding& BoolBinding, bool Bool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_SetValue");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_SetValue Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Bool = Bool;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIBoolBindingFunctionLibrary.BoolBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIBoolBinding                BoolBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIBoolBindingFunctionLibrary::BoolBinding_Unbind(struct FOdyUIBoolBinding& BoolBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIBoolBindingFunctionLibrary", "BoolBinding_Unbind");

	Params::OdyUIBoolBindingFunctionLibrary_BoolBinding_Unbind Parms{};

	Parms.BoolBinding = std::move(BoolBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	BoolBinding = std::move(Parms.BoolBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FLinearColor& OldValue, const struct FLinearColor& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_AddDelegate(struct FOdyUIColorBinding& ColorBinding, TDelegate<void(const struct FLinearColor& OldValue, const struct FLinearColor& NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_AddDelegate");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_AddDelegate Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindBorderBrushColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBorder*                          Border                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindBorderBrushColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UBorder* Border)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindBorderBrushColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindBorderBrushColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Border = Border;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindBorderContentColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UBorder*                          Border                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindBorderContentColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UBorder* Border)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindBorderContentColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindBorderContentColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Border = Border;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindButtonColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UButton*                          Button                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindButtonColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UButton* Button)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindButtonColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindButtonColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Button = Button;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindImageColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindImageColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UImage* Image)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindImageColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindImageColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Image = Image;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindTextBlockColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindTextBlockColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UTextBlock* TextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindTextBlockColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindTextBlockColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.TextBlock = TextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_BindUserWidgetColorAndOpacity
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UUserWidget*                      Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_BindUserWidgetColorAndOpacity(struct FOdyUIColorBinding& ColorBinding, class UUserWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_BindUserWidgetColorAndOpacity");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_BindUserWidgetColorAndOpacity Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FLinearColor UOdyUIColorBindingFunctionLibrary::ColorBinding_GetValue(const struct FOdyUIColorBinding& ColorBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_GetValue");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_GetValue Parms{};

	Parms.ColorBinding = std::move(ColorBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FLinearColor& OldValue, const struct FLinearColor& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_RemoveDelegate(struct FOdyUIColorBinding& ColorBinding, TDelegate<void(const struct FLinearColor& OldValue, const struct FLinearColor& NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_RemoveDelegate");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_RemoveDelegate Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_SetValue(struct FOdyUIColorBinding& ColorBinding, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_SetValue");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_SetValue Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIColorBindingFunctionLibrary.ColorBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIColorBinding               ColorBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIColorBindingFunctionLibrary::ColorBinding_Unbind(struct FOdyUIColorBinding& ColorBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIColorBindingFunctionLibrary", "ColorBinding_Unbind");

	Params::OdyUIColorBindingFunctionLibrary_ColorBinding_Unbind Parms{};

	Parms.ColorBinding = std::move(ColorBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ColorBinding = std::move(Parms.ColorBinding);
}


// Function OdyUI.OdyUIData.Init
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FInstancedStruct                 InitParams                                             (Parm, NativeAccessSpecifierPublic)

void UOdyUIData::Init(const struct FInstancedStruct& InitParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "Init");

	Params::OdyUIData_Init Parms{};

	Parms.InitParams = std::move(InitParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIData.OnInit
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FInstancedStruct                 InitParams                                             (Parm, NativeAccessSpecifierPublic)

void UOdyUIData::OnInit(const struct FInstancedStruct& InitParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "OnInit");

	Params::OdyUIData_OnInit Parms{};

	Parms.InitParams = std::move(InitParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyUIData.OnShutdown
// (Event, Public, BlueprintEvent)

void UOdyUIData::OnShutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "OnShutdown");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OdyUI.OdyUIData.OnUpdateData
// (Event, Public, BlueprintEvent)
// Parameters:
// struct FInstancedStruct                 UpdateParams                                           (Parm, NativeAccessSpecifierPublic)

void UOdyUIData::OnUpdateData(const struct FInstancedStruct& UpdateParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "OnUpdateData");

	Params::OdyUIData_OnUpdateData Parms{};

	Parms.UpdateParams = std::move(UpdateParams);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyUIData.Shutdown
// (Native, Public, BlueprintCallable)

void UOdyUIData::Shutdown()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "Shutdown");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIData.UpdateData
// (Native, Public, BlueprintCallable)
// Parameters:
// struct FInstancedStruct                 UpdateParams                                           (Parm, NativeAccessSpecifierPublic)

void UOdyUIData::UpdateData(const struct FInstancedStruct& UpdateParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIData", "UpdateData");

	Params::OdyUIData_UpdateData Parms{};

	Parms.UpdateParams = std::move(UpdateParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIDateTimeBindingFunctionLibrary.DateTimeBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIDateTimeBinding            DateTimeBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FDateTime& OldValue, const struct FDateTime& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIDateTimeBindingFunctionLibrary::DateTimeBinding_AddDelegate(struct FOdyUIDateTimeBinding& DateTimeBinding, TDelegate<void(const struct FDateTime& OldValue, const struct FDateTime& NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIDateTimeBindingFunctionLibrary", "DateTimeBinding_AddDelegate");

	Params::OdyUIDateTimeBindingFunctionLibrary_DateTimeBinding_AddDelegate Parms{};

	Parms.DateTimeBinding = std::move(DateTimeBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DateTimeBinding = std::move(Parms.DateTimeBinding);
}


// Function OdyUI.OdyUIDateTimeBindingFunctionLibrary.DateTimeBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIDateTimeBinding            DateTimeBinding                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDateTime                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FDateTime UOdyUIDateTimeBindingFunctionLibrary::DateTimeBinding_GetValue(const struct FOdyUIDateTimeBinding& DateTimeBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIDateTimeBindingFunctionLibrary", "DateTimeBinding_GetValue");

	Params::OdyUIDateTimeBindingFunctionLibrary_DateTimeBinding_GetValue Parms{};

	Parms.DateTimeBinding = std::move(DateTimeBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIDateTimeBindingFunctionLibrary.DateTimeBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIDateTimeBinding            DateTimeBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FDateTime& OldValue, const struct FDateTime& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIDateTimeBindingFunctionLibrary::DateTimeBinding_RemoveDelegate(struct FOdyUIDateTimeBinding& DateTimeBinding, TDelegate<void(const struct FDateTime& OldValue, const struct FDateTime& NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIDateTimeBindingFunctionLibrary", "DateTimeBinding_RemoveDelegate");

	Params::OdyUIDateTimeBindingFunctionLibrary_DateTimeBinding_RemoveDelegate Parms{};

	Parms.DateTimeBinding = std::move(DateTimeBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DateTimeBinding = std::move(Parms.DateTimeBinding);
}


// Function OdyUI.OdyUIDateTimeBindingFunctionLibrary.DateTimeBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOdyUIDateTimeBinding            DateTimeBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FDateTime                        DateTime                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIDateTimeBindingFunctionLibrary::DateTimeBinding_SetValue(struct FOdyUIDateTimeBinding& DateTimeBinding, const struct FDateTime& DateTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIDateTimeBindingFunctionLibrary", "DateTimeBinding_SetValue");

	Params::OdyUIDateTimeBindingFunctionLibrary_DateTimeBinding_SetValue Parms{};

	Parms.DateTimeBinding = std::move(DateTimeBinding);
	Parms.DateTime = std::move(DateTime);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DateTimeBinding = std::move(Parms.DateTimeBinding);
}


// Function OdyUI.OdyUIDateTimeBindingFunctionLibrary.DateTimeBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIDateTimeBinding            DateTimeBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIDateTimeBindingFunctionLibrary::DateTimeBinding_Unbind(struct FOdyUIDateTimeBinding& DateTimeBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIDateTimeBindingFunctionLibrary", "DateTimeBinding_Unbind");

	Params::OdyUIDateTimeBindingFunctionLibrary_DateTimeBinding_Unbind Parms{};

	Parms.DateTimeBinding = std::move(DateTimeBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	DateTimeBinding = std::move(Parms.DateTimeBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_AddDelegate(struct FOdyUIFloatBinding& FloatBinding, TDelegate<void(float OldValue, float NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_AddDelegate");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_AddDelegate Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_BindImageMaterialScalarParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_BindImageMaterialScalarParam(struct FOdyUIFloatBinding& FloatBinding, class UImage* Image, class FName ParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_BindImageMaterialScalarParam");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_BindImageMaterialScalarParam Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Image = Image;
	Parms.ParamName = ParamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_BindMaterialScalarParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_BindMaterialScalarParam(struct FOdyUIFloatBinding& FloatBinding, class UMaterialInstanceDynamic* Mid, class FName ParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_BindMaterialScalarParam");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_BindMaterialScalarParam Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Mid = Mid;
	Parms.ParamName = ParamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdyUIFloatBindingFunctionLibrary::FloatBinding_GetValue(const struct FOdyUIFloatBinding& FloatBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_GetValue");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_GetValue Parms{};

	Parms.FloatBinding = std::move(FloatBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(float OldValue, float NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_RemoveDelegate(struct FOdyUIFloatBinding& FloatBinding, TDelegate<void(float OldValue, float NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_RemoveDelegate");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_RemoveDelegate Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Float                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_SetValue(struct FOdyUIFloatBinding& FloatBinding, float Float)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_SetValue");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_SetValue Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Float = Float;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIFloatBindingFunctionLibrary.FloatBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIFloatBinding               FloatBinding                                           (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIFloatBindingFunctionLibrary::FloatBinding_Unbind(struct FOdyUIFloatBinding& FloatBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIFloatBindingFunctionLibrary", "FloatBinding_Unbind");

	Params::OdyUIFloatBindingFunctionLibrary_FloatBinding_Unbind Parms{};

	Parms.FloatBinding = std::move(FloatBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	FloatBinding = std::move(Parms.FloatBinding);
}


// Function OdyUI.OdyUIGameplayTagBindingFunctionLibrary.GameplayTagBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIGameplayTagBinding         GameplayTagBinding                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayTag& OldValue, const struct FGameplayTag& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIGameplayTagBindingFunctionLibrary::GameplayTagBinding_AddDelegate(struct FOdyUIGameplayTagBinding& GameplayTagBinding, TDelegate<void(const struct FGameplayTag& OldValue, const struct FGameplayTag& NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIGameplayTagBindingFunctionLibrary", "GameplayTagBinding_AddDelegate");

	Params::OdyUIGameplayTagBindingFunctionLibrary_GameplayTagBinding_AddDelegate Parms{};

	Parms.GameplayTagBinding = std::move(GameplayTagBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GameplayTagBinding = std::move(Parms.GameplayTagBinding);
}


// Function OdyUI.OdyUIGameplayTagBindingFunctionLibrary.GameplayTagBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIGameplayTagBinding         GameplayTagBinding                                     (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UOdyUIGameplayTagBindingFunctionLibrary::GameplayTagBinding_GetValue(const struct FOdyUIGameplayTagBinding& GameplayTagBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIGameplayTagBindingFunctionLibrary", "GameplayTagBinding_GetValue");

	Params::OdyUIGameplayTagBindingFunctionLibrary_GameplayTagBinding_GetValue Parms{};

	Parms.GameplayTagBinding = std::move(GameplayTagBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIGameplayTagBindingFunctionLibrary.GameplayTagBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIGameplayTagBinding         GameplayTagBinding                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FGameplayTag& OldValue, const struct FGameplayTag& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIGameplayTagBindingFunctionLibrary::GameplayTagBinding_RemoveDelegate(struct FOdyUIGameplayTagBinding& GameplayTagBinding, TDelegate<void(const struct FGameplayTag& OldValue, const struct FGameplayTag& NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIGameplayTagBindingFunctionLibrary", "GameplayTagBinding_RemoveDelegate");

	Params::OdyUIGameplayTagBindingFunctionLibrary_GameplayTagBinding_RemoveDelegate Parms{};

	Parms.GameplayTagBinding = std::move(GameplayTagBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GameplayTagBinding = std::move(Parms.GameplayTagBinding);
}


// Function OdyUI.OdyUIGameplayTagBindingFunctionLibrary.GameplayTagBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIGameplayTagBinding         GameplayTagBinding                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FGameplayTag                     GameplayTag                                            (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIGameplayTagBindingFunctionLibrary::GameplayTagBinding_SetValue(struct FOdyUIGameplayTagBinding& GameplayTagBinding, const struct FGameplayTag& GameplayTag)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIGameplayTagBindingFunctionLibrary", "GameplayTagBinding_SetValue");

	Params::OdyUIGameplayTagBindingFunctionLibrary_GameplayTagBinding_SetValue Parms{};

	Parms.GameplayTagBinding = std::move(GameplayTagBinding);
	Parms.GameplayTag = std::move(GameplayTag);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GameplayTagBinding = std::move(Parms.GameplayTagBinding);
}


// Function OdyUI.OdyUIGameplayTagBindingFunctionLibrary.GameplayTagBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIGameplayTagBinding         GameplayTagBinding                                     (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIGameplayTagBindingFunctionLibrary::GameplayTagBinding_Unbind(struct FOdyUIGameplayTagBinding& GameplayTagBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIGameplayTagBindingFunctionLibrary", "GameplayTagBinding_Unbind");

	Params::OdyUIGameplayTagBindingFunctionLibrary_GameplayTagBinding_Unbind Parms{};

	Parms.GameplayTagBinding = std::move(GameplayTagBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	GameplayTagBinding = std::move(Parms.GameplayTagBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OldValue, int32 NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_AddDelegate(struct FOdyUIIntBinding& IntBinding, TDelegate<void(int32 OldValue, int32 NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_AddDelegate");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_AddDelegate Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_BindTextBlockFontSize
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_BindTextBlockFontSize(struct FOdyUIIntBinding& IntBinding, class UTextBlock* TextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_BindTextBlockFontSize");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_BindTextBlockFontSize Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.TextBlock = TextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_BindTextBlockText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseGrouping                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_BindTextBlockText(struct FOdyUIIntBinding& IntBinding, class UTextBlock* TextBlock, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_BindTextBlockText");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_BindTextBlockText Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.TextBlock = TextBlock;
	Parms.bAlwaysSign = bAlwaysSign;
	Parms.bUseGrouping = bUseGrouping;
	Parms.MinimumIntegralDigits = MinimumIntegralDigits;
	Parms.MaximumIntegralDigits = MaximumIntegralDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_BindTextBlockTextToFormat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Pattern                                                (Parm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bAlwaysSign                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bUseGrouping                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MinimumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   MaximumIntegralDigits                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_BindTextBlockTextToFormat(struct FOdyUIIntBinding& IntBinding, const class FText& Pattern, class UTextBlock* TextBlock, bool bAlwaysSign, bool bUseGrouping, int32 MinimumIntegralDigits, int32 MaximumIntegralDigits)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_BindTextBlockTextToFormat");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_BindTextBlockTextToFormat Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Pattern = std::move(Pattern);
	Parms.TextBlock = TextBlock;
	Parms.bAlwaysSign = bAlwaysSign;
	Parms.bUseGrouping = bUseGrouping;
	Parms.MinimumIntegralDigits = MinimumIntegralDigits;
	Parms.MaximumIntegralDigits = MaximumIntegralDigits;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_BindWidgetVisibility
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ComparisonValue                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        WhenGreater                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        WhenEqual                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESlateVisibility                        WhenLess                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_BindWidgetVisibility(struct FOdyUIIntBinding& IntBinding, class UWidget* Widget, int32 ComparisonValue, ESlateVisibility WhenGreater, ESlateVisibility WhenEqual, ESlateVisibility WhenLess)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_BindWidgetVisibility");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_BindWidgetVisibility Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Widget = Widget;
	Parms.ComparisonValue = ComparisonValue;
	Parms.WhenGreater = WhenGreater;
	Parms.WhenEqual = WhenEqual;
	Parms.WhenLess = WhenLess;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOdyUIIntBindingFunctionLibrary::IntBinding_GetValue(const struct FOdyUIIntBinding& IntBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_GetValue");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_GetValue Parms{};

	Parms.IntBinding = std::move(IntBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(int32 OldValue, int32 NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_RemoveDelegate(struct FOdyUIIntBinding& IntBinding, TDelegate<void(int32 OldValue, int32 NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_RemoveDelegate");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_RemoveDelegate Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Int                                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_SetValue(struct FOdyUIIntBinding& IntBinding, int32 Int)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_SetValue");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_SetValue Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Int = Int;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIIntBindingFunctionLibrary.IntBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIIntBinding                 IntBinding                                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIIntBindingFunctionLibrary::IntBinding_Unbind(struct FOdyUIIntBinding& IntBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIIntBindingFunctionLibrary", "IntBinding_Unbind");

	Params::OdyUIIntBindingFunctionLibrary_IntBinding_Unbind Parms{};

	Parms.IntBinding = std::move(IntBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	IntBinding = std::move(Parms.IntBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UMaterialInterface* OldValue, class UMaterialInterface* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_AddDelegate(struct FOdyUIMaterialBinding& MaterialBinding, TDelegate<void(class UMaterialInterface* OldValue, class UMaterialInterface* NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_AddDelegate");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_AddDelegate Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_BindImage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBindVisibility                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_BindImage(struct FOdyUIMaterialBinding& MaterialBinding, class UImage* Image, bool bBindVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_BindImage");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_BindImage Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Image = Image;
	Parms.bBindVisibility = bBindVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_BindImageWithFallback
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UMaterialInterface*               FallbackMaterial                                       (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_BindImageWithFallback(struct FOdyUIMaterialBinding& MaterialBinding, class UImage* Image, class UMaterialInterface* FallbackMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_BindImageWithFallback");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_BindImageWithFallback Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Image = Image;
	Parms.FallbackMaterial = FallbackMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_GetMaterialValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UMaterialInterface* UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_GetMaterialValue(const struct FOdyUIMaterialBinding& MaterialBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_GetMaterialValue");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_GetMaterialValue Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_GetSoftValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UMaterialInterface> UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_GetSoftValue(struct FOdyUIMaterialBinding& MaterialBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_GetSoftValue");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_GetSoftValue Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_HasMaterial
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_HasMaterial(struct FOdyUIMaterialBinding& MaterialBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_HasMaterial");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_HasMaterial Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UMaterialInterface* OldValue, class UMaterialInterface* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_RemoveDelegate(struct FOdyUIMaterialBinding& MaterialBinding, TDelegate<void(class UMaterialInterface* OldValue, class UMaterialInterface* NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_RemoveDelegate");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_RemoveDelegate Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_SetMaterialValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInterface*               Material                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_SetMaterialValue(struct FOdyUIMaterialBinding& MaterialBinding, class UMaterialInterface* Material)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_SetMaterialValue");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_SetMaterialValue Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Material = Material;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_SetSoftValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UMaterialInterface>SoftMaterial                                           (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_SetSoftValue(struct FOdyUIMaterialBinding& MaterialBinding, TSoftObjectPtr<class UMaterialInterface> SoftMaterial)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_SetSoftValue");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_SetSoftValue Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.SoftMaterial = SoftMaterial;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUIMaterialBindingFunctionLibrary.MaterialBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIMaterialBinding            MaterialBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIMaterialBindingFunctionLibrary::MaterialBinding_Unbind(struct FOdyUIMaterialBinding& MaterialBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIMaterialBindingFunctionLibrary", "MaterialBinding_Unbind");

	Params::OdyUIMaterialBindingFunctionLibrary_MaterialBinding_Unbind Parms{};

	Parms.MaterialBinding = std::move(MaterialBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	MaterialBinding = std::move(Parms.MaterialBinding);
}


// Function OdyUI.OdyUINameBindingFunctionLibrary.NameBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUINameBinding                NameBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FName OldValue, class FName NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUINameBindingFunctionLibrary::NameBinding_AddDelegate(struct FOdyUINameBinding& NameBinding, TDelegate<void(class FName OldValue, class FName NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUINameBindingFunctionLibrary", "NameBinding_AddDelegate");

	Params::OdyUINameBindingFunctionLibrary_NameBinding_AddDelegate Parms{};

	Parms.NameBinding = std::move(NameBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	NameBinding = std::move(Parms.NameBinding);
}


// Function OdyUI.OdyUINameBindingFunctionLibrary.NameBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUINameBinding                NameBinding                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FName UOdyUINameBindingFunctionLibrary::NameBinding_GetValue(const struct FOdyUINameBinding& NameBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUINameBindingFunctionLibrary", "NameBinding_GetValue");

	Params::OdyUINameBindingFunctionLibrary_NameBinding_GetValue Parms{};

	Parms.NameBinding = std::move(NameBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUINameBindingFunctionLibrary.NameBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUINameBinding                NameBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FName OldValue, class FName NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUINameBindingFunctionLibrary::NameBinding_RemoveDelegate(struct FOdyUINameBinding& NameBinding, TDelegate<void(class FName OldValue, class FName NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUINameBindingFunctionLibrary", "NameBinding_RemoveDelegate");

	Params::OdyUINameBindingFunctionLibrary_NameBinding_RemoveDelegate Parms{};

	Parms.NameBinding = std::move(NameBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	NameBinding = std::move(Parms.NameBinding);
}


// Function OdyUI.OdyUINameBindingFunctionLibrary.NameBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUINameBinding                NameBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FName                             Name_0                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUINameBindingFunctionLibrary::NameBinding_SetValue(struct FOdyUINameBinding& NameBinding, class FName Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUINameBindingFunctionLibrary", "NameBinding_SetValue");

	Params::OdyUINameBindingFunctionLibrary_NameBinding_SetValue Parms{};

	Parms.NameBinding = std::move(NameBinding);
	Parms.Name_0 = Name_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	NameBinding = std::move(Parms.NameBinding);
}


// Function OdyUI.OdyUINameBindingFunctionLibrary.NameBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUINameBinding                NameBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUINameBindingFunctionLibrary::NameBinding_Unbind(struct FOdyUINameBinding& NameBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUINameBindingFunctionLibrary", "NameBinding_Unbind");

	Params::OdyUINameBindingFunctionLibrary_NameBinding_Unbind Parms{};

	Parms.NameBinding = std::move(NameBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	NameBinding = std::move(Parms.NameBinding);
}


// Function OdyUI.OdyUIObjectBindingFunctionLibrary.ObjectBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIObjectBinding              ObjectBinding                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* OldValue, class UObject* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIObjectBindingFunctionLibrary::ObjectBinding_AddDelegate(struct FOdyUIObjectBinding& ObjectBinding, TDelegate<void(class UObject* OldValue, class UObject* NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIObjectBindingFunctionLibrary", "ObjectBinding_AddDelegate");

	Params::OdyUIObjectBindingFunctionLibrary_ObjectBinding_AddDelegate Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectBinding = std::move(Parms.ObjectBinding);
}


// Function OdyUI.OdyUIObjectBindingFunctionLibrary.ObjectBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUIObjectBinding              ObjectBinding                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* UOdyUIObjectBindingFunctionLibrary::ObjectBinding_GetValue(const struct FOdyUIObjectBinding& ObjectBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIObjectBindingFunctionLibrary", "ObjectBinding_GetValue");

	Params::OdyUIObjectBindingFunctionLibrary_ObjectBinding_GetValue Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIObjectBindingFunctionLibrary.ObjectBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIObjectBinding              ObjectBinding                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UObject* OldValue, class UObject* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIObjectBindingFunctionLibrary::ObjectBinding_RemoveDelegate(struct FOdyUIObjectBinding& ObjectBinding, TDelegate<void(class UObject* OldValue, class UObject* NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIObjectBindingFunctionLibrary", "ObjectBinding_RemoveDelegate");

	Params::OdyUIObjectBindingFunctionLibrary_ObjectBinding_RemoveDelegate Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectBinding = std::move(Parms.ObjectBinding);
}


// Function OdyUI.OdyUIObjectBindingFunctionLibrary.ObjectBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIObjectBinding              ObjectBinding                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIObjectBindingFunctionLibrary::ObjectBinding_SetValue(struct FOdyUIObjectBinding& ObjectBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIObjectBindingFunctionLibrary", "ObjectBinding_SetValue");

	Params::OdyUIObjectBindingFunctionLibrary_ObjectBinding_SetValue Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectBinding = std::move(Parms.ObjectBinding);
}


// Function OdyUI.OdyUIObjectBindingFunctionLibrary.ObjectBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUIObjectBinding              ObjectBinding                                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIObjectBindingFunctionLibrary::ObjectBinding_Unbind(struct FOdyUIObjectBinding& ObjectBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIObjectBindingFunctionLibrary", "ObjectBinding_Unbind");

	Params::OdyUIObjectBindingFunctionLibrary_ObjectBinding_Unbind Parms{};

	Parms.ObjectBinding = std::move(ObjectBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	ObjectBinding = std::move(Parms.ObjectBinding);
}


// Function OdyUI.OdyUIRouter.GetPlatformUniversalAccept
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UOdyUIRouter::GetPlatformUniversalAccept()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIRouter", "GetPlatformUniversalAccept");

	Params::OdyUIRouter_GetPlatformUniversalAccept Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.GetPlatformUniversalBack
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// const struct FKey                       ReturnValue                                            (ConstParm, Parm, OutParm, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FKey UOdyUIRouter::GetPlatformUniversalBack()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIRouter", "GetPlatformUniversalBack");

	Params::OdyUIRouter_GetPlatformUniversalBack Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.GetUIRouter
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyUIRouter*                     ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyUIRouter* UOdyUIRouter::GetUIRouter(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIRouter", "GetUIRouter");

	Params::OdyUIRouter_GetUIRouter Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.CloseAllUserClosableMenus
// (Final, Native, Public, BlueprintCallable)

void UOdyUIRouter::CloseAllUserClosableMenus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "CloseAllUserClosableMenus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.CloseMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMenu*                         Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::CloseMenu(class UOdyMenu* Menu)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "CloseMenu");

	Params::OdyUIRouter_CloseMenu Parms{};

	Parms.Menu = Menu;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.CreateMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMenuData*                     MenuAsset                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIRouter::CreateMenu(class UOdyMenuData* MenuAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "CreateMenu");

	Params::OdyUIRouter_CreateMenu Parms{};

	Parms.MenuAsset = MenuAsset;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.NavigateToDefaultMenu
// (Native, Event, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TMap<class FString, class FString>      Args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Action                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::NavigateToDefaultMenu(const TMap<class FString, class FString>& Args, const class FString& Action)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "NavigateToDefaultMenu");

	Params::OdyUIRouter_NavigateToDefaultMenu Parms{};

	Parms.Args = std::move(Args);
	Parms.Action = std::move(Action);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.NavigateToMenu
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class UOdyMenu*                         Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<class FString, class FString>      Args                                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Action                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   NavigationOptions                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EMenuInputMode                          InputModeOverride                                      (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOdyModalPriority                       ModalPriorityOverride                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::NavigateToMenu(class UOdyMenu* Menu, const TMap<class FString, class FString>& Args, const class FString& Action, int32 NavigationOptions, EMenuInputMode InputModeOverride, EOdyModalPriority ModalPriorityOverride)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "NavigateToMenu");

	Params::OdyUIRouter_NavigateToMenu Parms{};

	Parms.Menu = Menu;
	Parms.Args = std::move(Args);
	Parms.Action = std::move(Action);
	Parms.NavigationOptions = NavigationOptions;
	Parms.InputModeOverride = InputModeOverride;
	Parms.ModalPriorityOverride = ModalPriorityOverride;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.NavigateToPath
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Path                                                   (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::NavigateToPath(const class FString& Path)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "NavigateToPath");

	Params::OdyUIRouter_NavigateToPath Parms{};

	Parms.Path = std::move(Path);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.OnGameStateReady
// (Event, Public, BlueprintEvent)
// Parameters:
// class AGameStateBase*                   GameState                                              (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::OnGameStateReady(class AGameStateBase* GameState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "OnGameStateReady");

	Params::OdyUIRouter_OnGameStateReady Parms{};

	Parms.GameState = GameState;

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyUIRouter.OnInputMethodChanged
// (Final, Native, Protected)
// Parameters:
// EInputMethod                            InputMethod                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::OnInputMethodChanged(EInputMethod InputMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "OnInputMethodChanged");

	Params::OdyUIRouter_OnInputMethodChanged Parms{};

	Parms.InputMethod = InputMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.OnMenuDisplayStateChanged
// (Final, Native, Protected)
// Parameters:
// class UOdyWidget*                       MenuWidget                                             (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOdyWidgetDisplayState                  OldState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOdyWidgetDisplayState                  NewState                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::OnMenuDisplayStateChanged(class UOdyWidget* MenuWidget, EOdyWidgetDisplayState OldState, EOdyWidgetDisplayState NewState)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "OnMenuDisplayStateChanged");

	Params::OdyUIRouter_OnMenuDisplayStateChanged Parms{};

	Parms.MenuWidget = MenuWidget;
	Parms.OldState = OldState;
	Parms.NewState = NewState;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.PopInputContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputComponent*                  Requester                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InputContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::PopInputContext(class UInputComponent* Requester, class UInputMappingContext* InputContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "PopInputContext");

	Params::OdyUIRouter_PopInputContext Parms{};

	Parms.Requester = Requester;
	Parms.InputContext = InputContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.PushInputContext
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UInputComponent*                  Requester                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UInputMappingContext*             InputContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EOdyInputContextPriority                InputContextPriority                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::PushInputContext(class UInputComponent* Requester, class UInputMappingContext* InputContext, EOdyInputContextPriority InputContextPriority)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "PushInputContext");

	Params::OdyUIRouter_PushInputContext Parms{};

	Parms.Requester = Requester;
	Parms.InputContext = InputContext;
	Parms.InputContextPriority = InputContextPriority;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.ReturnToDefaultMenu
// (Final, Native, Public, BlueprintCallable)

void UOdyUIRouter::ReturnToDefaultMenu()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "ReturnToDefaultMenu");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.SetMenuNeverWantsInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMenu*                         Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bNeverWantsInput                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::SetMenuNeverWantsInput(class UOdyMenu* Menu, bool bNeverWantsInput)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "SetMenuNeverWantsInput");

	Params::OdyUIRouter_SetMenuNeverWantsInput Parms{};

	Parms.Menu = Menu;
	Parms.bNeverWantsInput = bNeverWantsInput;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.SetViewTargetForMenu
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMenu*                         Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             CameraId                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bOnlyLatestOnStack                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::SetViewTargetForMenu(class UOdyMenu* Menu, class FName CameraId, bool bOnlyLatestOnStack)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "SetViewTargetForMenu");

	Params::OdyUIRouter_SetViewTargetForMenu Parms{};

	Parms.Menu = Menu;
	Parms.CameraId = CameraId;
	Parms.bOnlyLatestOnStack = bOnlyLatestOnStack;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.ShowConfirmationModal
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FText                             Title                                                  (Parm, NativeAccessSpecifierPublic)
// class FText                             Message                                                (Parm, NativeAccessSpecifierPublic)
// class FText                             ConfirmText                                            (Parm, NativeAccessSpecifierPublic)
// class FText                             CancelText                                             (Parm, NativeAccessSpecifierPublic)
// TDelegate<void(bool bConfirmed)>        OnDismissed                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenuData*                     CustomConfirmationMenuData                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIRouter::ShowConfirmationModal(const class FText& Title, const class FText& Message, const class FText& ConfirmText, const class FText& CancelText, const TDelegate<void(bool bConfirmed)>& OnDismissed, class UOdyMenuData* CustomConfirmationMenuData)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "ShowConfirmationModal");

	Params::OdyUIRouter_ShowConfirmationModal Parms{};

	Parms.Title = std::move(Title);
	Parms.Message = std::move(Message);
	Parms.ConfirmText = std::move(ConfirmText);
	Parms.CancelText = std::move(CancelText);
	Parms.OnDismissed = OnDismissed;
	Parms.CustomConfirmationMenuData = CustomConfirmationMenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.UpdateInputModeAndFocus
// (Final, Native, Public, BlueprintCallable)

void UOdyUIRouter::UpdateInputModeAndFocus()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "UpdateInputModeAndFocus");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.UpdateModalZOrders
// (Final, Native, Public, BlueprintCallable)

void UOdyUIRouter::UpdateModalZOrders()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "UpdateModalZOrders");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIRouter.FindAllMenus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     MenuId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bModal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UOdyMenu*>                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UOdyMenu*> UOdyUIRouter::FindAllMenus(const struct FGameplayTag& MenuId, bool bModal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "FindAllMenus");

	Params::OdyUIRouter_FindAllMenus Parms{};

	Parms.MenuId = std::move(MenuId);
	Parms.bModal = bModal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.FindAllMenusByData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOdyMenuData*                     MenuData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UOdyMenu*>                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UOdyMenu*> UOdyUIRouter::FindAllMenusByData(class UOdyMenuData* MenuData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "FindAllMenusByData");

	Params::OdyUIRouter_FindAllMenusByData Parms{};

	Parms.MenuData = MenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.FindMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     MenuId                                                 (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bModal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIRouter::FindMenu(const struct FGameplayTag& MenuId, bool bModal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "FindMenu");

	Params::OdyUIRouter_FindMenu Parms{};

	Parms.MenuId = std::move(MenuId);
	Parms.bModal = bModal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.FindMenuByData
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOdyMenuData*                     MenuData                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIRouter::FindMenuByData(class UOdyMenuData* MenuData) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "FindMenuByData");

	Params::OdyUIRouter_FindMenuByData Parms{};

	Parms.MenuData = MenuData;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.GetStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bModal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<class UOdyMenu*>                 ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, ContainsInstancedReference, NativeAccessSpecifierPublic)

TArray<class UOdyMenu*> UOdyUIRouter::GetStack(bool bModal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "GetStack");

	Params::OdyUIRouter_GetStack Parms{};

	Parms.bModal = bModal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.GetTopMenu
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   SearchOptions                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIRouter::GetTopMenu(int32 SearchOptions) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "GetTopMenu");

	Params::OdyUIRouter_GetTopMenu Parms{};

	Parms.SearchOptions = SearchOptions;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.GetTopOfStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    bModal                                                 (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIRouter::GetTopOfStack(bool bModal) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "GetTopOfStack");

	Params::OdyUIRouter_GetTopOfStack Parms{};

	Parms.bModal = bModal;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIRouter.IndexOfOnStack
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UOdyMenu*                         Menu                                                   (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bSearchFromEnd                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 UOdyUIRouter::IndexOfOnStack(class UOdyMenu* Menu, bool bSearchFromEnd) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUIRouter", "IndexOfOnStack");

	Params::OdyUIRouter_IndexOfOnStack Parms{};

	Parms.Menu = Menu;
	Parms.bSearchFromEnd = bSearchFromEnd;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.CenterCursor
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContext                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::CenterCursor(class UObject* WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "CenterCursor");

	Params::OdyUIStatics_CenterCursor Parms{};

	Parms.WorldContext = WorldContext;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.CreateUIData
// (Final, BlueprintCosmetic, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          Outer_0                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TSubclassOf<class UOdyUIData>           UIDataType                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FInstancedStruct                 InitParams                                             (Parm, NativeAccessSpecifierPublic)
// class UOdyUIData*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyUIData* UOdyUIStatics::CreateUIData(class UObject* Outer_0, TSubclassOf<class UOdyUIData> UIDataType, const struct FInstancedStruct& InitParams)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "CreateUIData");

	Params::OdyUIStatics_CreateUIData Parms{};

	Parms.Outer_0 = Outer_0;
	Parms.UIDataType = UIDataType;
	Parms.InitParams = std::move(InitParams);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.DateTime_ToFormattedString
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        DateTime                                               (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           String                                                 (Parm, OutParm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Format                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::DateTime_ToFormattedString(const struct FDateTime& DateTime, class FString* String, const class FString& Format)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "DateTime_ToFormattedString");

	Params::OdyUIStatics_DateTime_ToFormattedString Parms{};

	Parms.DateTime = std::move(DateTime);
	Parms.Format = std::move(Format);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (String != nullptr)
		*String = std::move(Parms.String);
}


// Function OdyUI.OdyUIStatics.FindOuterMenu
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyMenu*                         ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMenu* UOdyUIStatics::FindOuterMenu(const class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "FindOuterMenu");

	Params::OdyUIStatics_FindOuterMenu Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.GetCursorLocalPlayer
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UObject*                          WorldContextObject                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class ULocalPlayer*                     ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class ULocalPlayer* UOdyUIStatics::GetCursorLocalPlayer(class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "GetCursorLocalPlayer");

	Params::OdyUIStatics_GetCursorLocalPlayer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.GetEntryWidgetFromListViewItem
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UListView*                        ListView                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UObject*                          Item                                                   (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UUserWidget*                      ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UUserWidget* UOdyUIStatics::GetEntryWidgetFromListViewItem(class UListView* ListView, class UObject* Item)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "GetEntryWidgetFromListViewItem");

	Params::OdyUIStatics_GetEntryWidgetFromListViewItem Parms{};

	Parms.ListView = ListView;
	Parms.Item = Item;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.Integer_ToTextPadded
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// class FText                             OutText                                                (Parm, OutParm, NativeAccessSpecifierPublic)
// int32                                   Integer                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   Width                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Padding                                                (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::Integer_ToTextPadded(class FText* OutText, int32 Integer, int32 Width, const class FString& Padding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "Integer_ToTextPadded");

	Params::OdyUIStatics_Integer_ToTextPadded Parms{};

	Parms.Integer = Integer;
	Parms.Width = Width;
	Parms.Padding = std::move(Padding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutText != nullptr)
		*OutText = std::move(Parms.OutText);
}


// Function OdyUI.OdyUIStatics.IsConstructed
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyUIStatics::IsConstructed(class UWidget* Widget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "IsConstructed");

	Params::OdyUIStatics_IsConstructed Parms{};

	Parms.Widget = Widget;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.MakeTimespan
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FDateTime                        A                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FDateTime                        B                                                      (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan UOdyUIStatics::MakeTimespan(const struct FDateTime& A, const struct FDateTime& B)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "MakeTimespan");

	Params::OdyUIStatics_MakeTimespan Parms{};

	Parms.A = std::move(A);
	Parms.B = std::move(B);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUIStatics.SetCheckboxBorderBackgroundColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UCheckBox*                        CheckBox                                               (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetCheckboxBorderBackgroundColor(class UCheckBox* CheckBox, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetCheckboxBorderBackgroundColor");

	Params::OdyUIStatics_SetCheckboxBorderBackgroundColor Parms{};

	Parms.CheckBox = CheckBox;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetClearKeyboardFocusOnCommit
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UEditableTextBox*                 TextBox                                                (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bClearKeyboardFocusOnCommit                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetClearKeyboardFocusOnCommit(class UEditableTextBox* TextBox, bool bClearKeyboardFocusOnCommit)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetClearKeyboardFocusOnCommit");

	Params::OdyUIStatics_SetClearKeyboardFocusOnCommit Parms{};

	Parms.TextBox = TextBox;
	Parms.bClearKeyboardFocusOnCommit = bClearKeyboardFocusOnCommit;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetDefaultFontSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetDefaultFontSize(class URichTextBlock* RichTextBlock, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetDefaultFontSize");

	Params::OdyUIStatics_SetDefaultFontSize Parms{};

	Parms.RichTextBlock = RichTextBlock;
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetFlowDirectionPreference
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UWidget*                          Widget                                                 (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// EFlowDirectionPreference                FlowDirection                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetFlowDirectionPreference(class UWidget* Widget, EFlowDirectionPreference FlowDirection)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetFlowDirectionPreference");

	Params::OdyUIStatics_SetFlowDirectionPreference Parms{};

	Parms.Widget = Widget;
	Parms.FlowDirection = FlowDirection;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetFontOutlineColor
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FLinearColor                     Color                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetFontOutlineColor(class UTextBlock* TextBlock, const struct FLinearColor& Color)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetFontOutlineColor");

	Params::OdyUIStatics_SetFontOutlineColor Parms{};

	Parms.TextBlock = TextBlock;
	Parms.Color = std::move(Color);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetFontSize
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   FontSize                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetFontSize(class UTextBlock* TextBlock, int32 FontSize)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetFontSize");

	Params::OdyUIStatics_SetFontSize Parms{};

	Parms.TextBlock = TextBlock;
	Parms.FontSize = FontSize;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetImageCornerRadius
// (Final, Native, Static, Public, HasDefaults, BlueprintCallable)
// Parameters:
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector4                         CornerRadius                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetImageCornerRadius(class UImage* Image, const struct FVector4& CornerRadius)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetImageCornerRadius");

	Params::OdyUIStatics_SetImageCornerRadius Parms{};

	Parms.Image = Image;
	Parms.CornerRadius = std::move(CornerRadius);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetJustification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextJustify                            Justify                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetJustification(class UTextBlock* TextBlock, ETextJustify Justify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetJustification");

	Params::OdyUIStatics_SetJustification Parms{};

	Parms.TextBlock = TextBlock;
	Parms.Justify = Justify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.SetRichTextJustification
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ETextJustify                            Justify                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::SetRichTextJustification(class URichTextBlock* RichTextBlock, ETextJustify Justify)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "SetRichTextJustification");

	Params::OdyUIStatics_SetRichTextJustification Parms{};

	Parms.RichTextBlock = RichTextBlock;
	Parms.Justify = Justify;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUIStatics.UpdateOdyPlatformInputData
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// struct FGameplayTag                     ContextTag                                             (Parm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bInEnable                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUIStatics::UpdateOdyPlatformInputData(const struct FGameplayTag& ContextTag, bool bInEnable)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUIStatics", "UpdateOdyPlatformInputData");

	Params::OdyUIStatics_UpdateOdyPlatformInputData Parms{};

	Parms.ContextTag = std::move(ContextTag);
	Parms.bInEnable = bInEnable;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUISubsystemBase.GetUISubsystemBase
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UOdyUISubsystemBase*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyUISubsystemBase* UOdyUISubsystemBase::GetUISubsystemBase(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUISubsystemBase", "GetUISubsystemBase");

	Params::OdyUISubsystemBase_GetUISubsystemBase Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUISubsystemBase.SetAnalogCursorGamepadVirtualAccept
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bEnabled                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUISubsystemBase::SetAnalogCursorGamepadVirtualAccept(bool bEnabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUISubsystemBase", "SetAnalogCursorGamepadVirtualAccept");

	Params::OdyUISubsystemBase_SetAnalogCursorGamepadVirtualAccept Parms{};

	Parms.bEnabled = bEnabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyUISubsystemBase.GetCursorMode
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EOdyAnalogCursorMode                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EOdyAnalogCursorMode UOdyUISubsystemBase::GetCursorMode() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUISubsystemBase", "GetCursorMode");

	Params::OdyUISubsystemBase_GetCursorMode Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUISubsystemBase.GetInputDeviceTag
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FGameplayTag                     ReturnValue                                            (Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FGameplayTag UOdyUISubsystemBase::GetInputDeviceTag() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUISubsystemBase", "GetInputDeviceTag");

	Params::OdyUISubsystemBase_GetInputDeviceTag Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUISubsystemBase.GetInputMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// EInputMethod                            ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

EInputMethod UOdyUISubsystemBase::GetInputMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUISubsystemBase", "GetInputMethod");

	Params::OdyUISubsystemBase_GetInputMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUISubsystemBase.GetSubInputMethod
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESubInputMethod                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESubInputMethod UOdyUISubsystemBase::GetSubInputMethod() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyUISubsystemBase", "GetSubInputMethod");

	Params::OdyUISubsystemBase_GetSubInputMethod Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FText OldValue, class FText NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_AddDelegate(struct FOdyUITextBinding& TextBinding, TDelegate<void(class FText OldValue, class FText NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_AddDelegate");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_AddDelegate Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_BindRichTextBlockText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_BindRichTextBlockText(struct FOdyUITextBinding& TextBinding, class URichTextBlock* RichTextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_BindRichTextBlockText");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_BindRichTextBlockText Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.RichTextBlock = RichTextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_BindRichTextBlockTextToFormat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             FormatText                                             (Parm, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_BindRichTextBlockTextToFormat(struct FOdyUITextBinding& TextBinding, class URichTextBlock* RichTextBlock, const class FText& FormatText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_BindRichTextBlockTextToFormat");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_BindRichTextBlockTextToFormat Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.RichTextBlock = RichTextBlock;
	Parms.FormatText = std::move(FormatText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_BindTextBlockText
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_BindTextBlockText(struct FOdyUITextBinding& TextBinding, class UTextBlock* TextBlock)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_BindTextBlockText");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_BindTextBlockText Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.TextBlock = TextBlock;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_BindTextBlockTextToFormat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FText                             FormatText                                             (Parm, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_BindTextBlockTextToFormat(struct FOdyUITextBinding& TextBinding, class UTextBlock* TextBlock, const class FText& FormatText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_BindTextBlockTextToFormat");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_BindTextBlockTextToFormat Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.TextBlock = TextBlock;
	Parms.FormatText = std::move(FormatText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_GetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             ReturnValue                                            (Parm, OutParm, ReturnParm, NativeAccessSpecifierPublic)

class FText UOdyUITextBindingFunctionLibrary::TextBinding_GetValue(const struct FOdyUITextBinding& TextBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_GetValue");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_GetValue Parms{};

	Parms.TextBinding = std::move(TextBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class FText OldValue, class FText NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_RemoveDelegate(struct FOdyUITextBinding& TextBinding, TDelegate<void(class FText OldValue, class FText NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_RemoveDelegate");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_RemoveDelegate Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FText                             Text                                                   (Parm, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_SetValue(struct FOdyUITextBinding& TextBinding, const class FText& Text)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_SetValue");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_SetValue Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.Text = std::move(Text);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextBindingFunctionLibrary.TextBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextBinding                TextBinding                                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextBindingFunctionLibrary::TextBinding_Unbind(struct FOdyUITextBinding& TextBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextBindingFunctionLibrary", "TextBinding_Unbind");

	Params::OdyUITextBindingFunctionLibrary_TextBinding_Unbind Parms{};

	Parms.TextBinding = std::move(TextBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextBinding = std::move(Parms.TextBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_AddDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UTexture* OldValue, class UTexture* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_AddDelegate(struct FOdyUITextureBinding& TextureBinding, TDelegate<void(class UTexture* OldValue, class UTexture* NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_AddDelegate");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_AddDelegate Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_BindImage
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bBindVisibility                                        (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_BindImage(struct FOdyUITextureBinding& TextureBinding, class UImage* Image, bool bMatchSize, bool bBindVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_BindImage");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_BindImage Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Image = Image;
	Parms.bMatchSize = bMatchSize;
	Parms.bBindVisibility = bBindVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_BindImageMaterialTextureParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             BindAlphaParamName                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_BindImageMaterialTextureParam(struct FOdyUITextureBinding& TextureBinding, class UImage* Image, class FName ParamName, class FName BindAlphaParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_BindImageMaterialTextureParam");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_BindImageMaterialTextureParam Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Image = Image;
	Parms.ParamName = ParamName;
	Parms.BindAlphaParamName = BindAlphaParamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_BindImageWithFallback
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       FallbackTexture                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_BindImageWithFallback(struct FOdyUITextureBinding& TextureBinding, class UImage* Image, bool bMatchSize, class UTexture2D* FallbackTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_BindImageWithFallback");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_BindImageWithFallback Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Image = Image;
	Parms.bMatchSize = bMatchSize;
	Parms.FallbackTexture = FallbackTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_BindImageWithFallbackBrush
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UImage*                           Image                                                  (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bMatchSize                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FSlateBrush                      Brush                                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSlateBrush                      FallbackBrush                                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_BindImageWithFallbackBrush(struct FOdyUITextureBinding& TextureBinding, class UImage* Image, bool bMatchSize, const struct FSlateBrush& Brush, const struct FSlateBrush& FallbackBrush)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_BindImageWithFallbackBrush");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_BindImageWithFallbackBrush Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Image = Image;
	Parms.bMatchSize = bMatchSize;
	Parms.Brush = std::move(Brush);
	Parms.FallbackBrush = std::move(FallbackBrush);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_BindMaterialTextureParam
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UMaterialInstanceDynamic*         Mid                                                    (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ParamName                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_BindMaterialTextureParam(struct FOdyUITextureBinding& TextureBinding, class UMaterialInstanceDynamic* Mid, class FName ParamName)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_BindMaterialTextureParam");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_BindMaterialTextureParam Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Mid = Mid;
	Parms.ParamName = ParamName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_GetSoftValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture>          ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftObjectPtr<class UTexture> UOdyUITextureBindingFunctionLibrary::TextureBinding_GetSoftValue(struct FOdyUITextureBinding& TextureBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_GetSoftValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_GetSoftValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_GetTexture2DValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UOdyUITextureBindingFunctionLibrary::TextureBinding_GetTexture2DValue(struct FOdyUITextureBinding& TextureBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_GetTexture2DValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_GetTexture2DValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_GetTextureValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture*                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture* UOdyUITextureBindingFunctionLibrary::TextureBinding_GetTextureValue(const struct FOdyUITextureBinding& TextureBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_GetTextureValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_GetTextureValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_GetUrlValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString UOdyUITextureBindingFunctionLibrary::TextureBinding_GetUrlValue(struct FOdyUITextureBinding& TextureBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_GetUrlValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_GetUrlValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_HasTexture
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyUITextureBindingFunctionLibrary::TextureBinding_HasTexture(struct FOdyUITextureBinding& TextureBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_HasTexture");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_HasTexture Parms{};

	Parms.TextureBinding = std::move(TextureBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_RemoveDelegate
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(class UTexture* OldValue, class UTexture* NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_RemoveDelegate(struct FOdyUITextureBinding& TextureBinding, TDelegate<void(class UTexture* OldValue, class UTexture* NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_RemoveDelegate");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_RemoveDelegate Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_SetSoftValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TSoftObjectPtr<class UTexture>          SoftTexture                                            (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_SetSoftValue(struct FOdyUITextureBinding& TextureBinding, TSoftObjectPtr<class UTexture> SoftTexture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_SetSoftValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_SetSoftValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.SoftTexture = SoftTexture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_SetTexture2DValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture2D*                       Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_SetTexture2DValue(struct FOdyUITextureBinding& TextureBinding, class UTexture2D* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_SetTexture2DValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_SetTexture2DValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_SetTextureValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTexture*                         Texture                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_SetTextureValue(struct FOdyUITextureBinding& TextureBinding, class UTexture* Texture)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_SetTextureValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_SetTextureValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Texture = Texture;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_SetUrlValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_SetUrlValue(struct FOdyUITextureBinding& TextureBinding, const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_SetUrlValue");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_SetUrlValue Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITextureBindingFunctionLibrary.TextureBinding_Unbind
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITextureBinding             TextureBinding                                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITextureBindingFunctionLibrary::TextureBinding_Unbind(struct FOdyUITextureBinding& TextureBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITextureBindingFunctionLibrary", "TextureBinding_Unbind");

	Params::OdyUITextureBindingFunctionLibrary_TextureBinding_Unbind Parms{};

	Parms.TextureBinding = std::move(TextureBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TextureBinding = std::move(Parms.TextureBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_AddDelegate
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FTimespan& OldValue, const struct FTimespan& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    bExecuteNow                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_AddDelegate(struct FOdyUITimespanBinding& TimespanBinding, TDelegate<void(const struct FTimespan& OldValue, const struct FTimespan& NewValue)> Delegate, bool bExecuteNow)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_AddDelegate");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_AddDelegate Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.Delegate = Delegate;
	Parms.bExecuteNow = bExecuteNow;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_BindRichTextBlockText
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class URichTextBlock*                   RichTextBlock                                          (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<ETimespanBindingDisplayOption, class FText>TextFormats                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_BindRichTextBlockText(struct FOdyUITimespanBinding& TimespanBinding, class URichTextBlock* RichTextBlock, const TMap<ETimespanBindingDisplayOption, class FText>& TextFormats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_BindRichTextBlockText");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_BindRichTextBlockText Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.RichTextBlock = RichTextBlock;
	Parms.TextFormats = std::move(TextFormats);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_BindTextBlockText
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UTextBlock*                       TextBlock                                              (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TMap<ETimespanBindingDisplayOption, class FText>TextFormats                                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_BindTextBlockText(struct FOdyUITimespanBinding& TimespanBinding, class UTextBlock* TextBlock, const TMap<ETimespanBindingDisplayOption, class FText>& TextFormats)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_BindTextBlockText");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_BindTextBlockText Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.TextBlock = TextBlock;
	Parms.TextFormats = std::move(TextFormats);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_GetValue
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTimespan                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FTimespan UOdyUITimespanBindingFunctionLibrary::TimespanBinding_GetValue(const struct FOdyUITimespanBinding& TimespanBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_GetValue");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_GetValue Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_IsInitialized
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyUITimespanBindingFunctionLibrary::TimespanBinding_IsInitialized(struct FOdyUITimespanBinding& TimespanBinding)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_IsInitialized");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_IsInitialized Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);

	return Parms.ReturnValue;
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_RemoveDelegate
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// TDelegate<void(const struct FTimespan& OldValue, const struct FTimespan& NewValue)>Delegate                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_RemoveDelegate(struct FOdyUITimespanBinding& TimespanBinding, TDelegate<void(const struct FTimespan& OldValue, const struct FTimespan& NewValue)> Delegate)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_RemoveDelegate");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_RemoveDelegate Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.Delegate = Delegate;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_SetValue
// (Final, Native, Static, Private, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FTimespan                        Timespan                                               (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_SetValue(struct FOdyUITimespanBinding& TimespanBinding, const struct FTimespan& Timespan)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_SetValue");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_SetValue Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.Timespan = std::move(Timespan);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.OdyUITimespanBindingFunctionLibrary.TimespanBinding_Unbind
// (Final, Native, Static, Private, HasOutParams, BlueprintCallable)
// Parameters:
// struct FOdyUITimespanBinding            TimespanBinding                                        (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          Object                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyUITimespanBindingFunctionLibrary::TimespanBinding_Unbind(struct FOdyUITimespanBinding& TimespanBinding, class UObject* Object)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("OdyUITimespanBindingFunctionLibrary", "TimespanBinding_Unbind");

	Params::OdyUITimespanBindingFunctionLibrary_TimespanBinding_Unbind Parms{};

	Parms.TimespanBinding = std::move(TimespanBinding);
	Parms.Object = Object;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	TimespanBinding = std::move(Parms.TimespanBinding);
}


// Function OdyUI.UIWidget_SoftwareCursor.OnClicked
// (Event, Public, BlueprintEvent)

void UUIWidget_SoftwareCursor::OnClicked()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget_SoftwareCursor", "OnClicked");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OdyUI.UIWidget_SoftwareCursor.OnEnterInteractableWidget
// (Event, Protected, BlueprintEvent)

void UUIWidget_SoftwareCursor::OnEnterInteractableWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget_SoftwareCursor", "OnEnterInteractableWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OdyUI.UIWidget_SoftwareCursor.OnLeaveInteractableWidget
// (Event, Protected, BlueprintEvent)

void UUIWidget_SoftwareCursor::OnLeaveInteractableWidget()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("UIWidget_SoftwareCursor", "OnLeaveInteractableWidget");

	UObject::ProcessEvent(Func, nullptr);
}


// Function OdyUI.OdyInputKeySelector.Click
// (Final, Native, Public, BlueprintCallable)

void UOdyInputKeySelector::Click()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "Click");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// DelegateFunction OdyUI.OdyInputKeySelector.OnIsSelectingKeyChanged__DelegateSignature
// (MulticastDelegate, Public, Delegate)

void UOdyInputKeySelector::OnIsSelectingKeyChanged__DelegateSignature()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "OnIsSelectingKeyChanged__DelegateSignature");

	UObject::ProcessEvent(Func, nullptr);
}


// DelegateFunction OdyUI.OdyInputKeySelector.OnKeySelected__DelegateSignature
// (MulticastDelegate, Public, Delegate)
// Parameters:
// struct FInputChord                      SelectedKey_0                                          (Parm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::OnKeySelected__DelegateSignature(const struct FInputChord& SelectedKey_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "OnKeySelected__DelegateSignature");

	Params::OdyInputKeySelector_OnKeySelected__DelegateSignature Parms{};

	Parms.SelectedKey_0 = std::move(SelectedKey_0);

	UObject::ProcessEvent(Func, &Parms);
}


// Function OdyUI.OdyInputKeySelector.SetAllowGamepadKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowGamepadKeys                                    (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetAllowGamepadKeys(bool bInAllowGamepadKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetAllowGamepadKeys");

	Params::OdyInputKeySelector_SetAllowGamepadKeys Parms{};

	Parms.bInAllowGamepadKeys = bInAllowGamepadKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetAllowModifierKeys
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bInAllowModifierKeys                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetAllowModifierKeys(bool bInAllowModifierKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetAllowModifierKeys");

	Params::OdyInputKeySelector_SetAllowModifierKeys Parms{};

	Parms.bInAllowModifierKeys = bInAllowModifierKeys;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetClearSelectedKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FKey>                     InKeys                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetClearSelectedKeys(const TArray<struct FKey>& InKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetClearSelectedKeys");

	Params::OdyInputKeySelector_SetClearSelectedKeys Parms{};

	Parms.InKeys = std::move(InKeys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetEscapeKeys
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FKey>                     InKeys                                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetEscapeKeys(const TArray<struct FKey>& InKeys)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetEscapeKeys");

	Params::OdyInputKeySelector_SetEscapeKeys Parms{};

	Parms.InKeys = std::move(InKeys);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetKeySelectionText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InKeySelectionText                                     (Parm, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetKeySelectionText(const class FText& InKeySelectionText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetKeySelectionText");

	Params::OdyInputKeySelector_SetKeySelectionText Parms{};

	Parms.InKeySelectionText = std::move(InKeySelectionText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetNoKeySpecifiedText
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FText                             InNoKeySpecifiedText                                   (Parm, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetNoKeySpecifiedText(const class FText& InNoKeySpecifiedText)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetNoKeySpecifiedText");

	Params::OdyInputKeySelector_SetNoKeySpecifiedText Parms{};

	Parms.InNoKeySpecifiedText = std::move(InNoKeySpecifiedText);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetSelectedKey
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FInputChord                      InSelectedKey                                          (ConstParm, Parm, OutParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetSelectedKey(const struct FInputChord& InSelectedKey)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetSelectedKey");

	Params::OdyInputKeySelector_SetSelectedKey Parms{};

	Parms.InSelectedKey = std::move(InSelectedKey);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.SetTextBlockVisibility
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESlateVisibility                        InVisibility                                           (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyInputKeySelector::SetTextBlockVisibility(const ESlateVisibility InVisibility)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "SetTextBlockVisibility");

	Params::OdyInputKeySelector_SetTextBlockVisibility Parms{};

	Parms.InVisibility = InVisibility;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyUI.OdyInputKeySelector.GetIsSelectingKey
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyInputKeySelector::GetIsSelectingKey() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyInputKeySelector", "GetIsSelectingKey");

	Params::OdyInputKeySelector_GetIsSelectingKey Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

