#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: Lib_Audio

#include "Basic.hpp"

#include "Matcha_structs.hpp"
#include "AkAudio_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function Lib_Audio.Lib_Audio_C.AkEventComponentWithInstigator
// 0x0068 (0x0068 - 0x0000)
struct Lib_Audio_C_AkEventComponentWithInstigator final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UAkComponent*                           Ak_Component;                                      // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0024(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0025(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_26[0x2];                                       // 0x0026(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterRenderer*        K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer; // 0x0028(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue; // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallySpectated_ReturnValue;           // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_41[0x3];                                       // 0x0041(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0044(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	ESnapNetWorldType                             CallFunc_GetSnapNetWorldType_ReturnValue;          // 0x0054(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55[0x3];                                       // 0x0055(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0058(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x005C(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5D[0x3];                                       // 0x005D(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lib_Audio_C_AkEventComponentWithInstigator) == 0x000008, "Wrong alignment on Lib_Audio_C_AkEventComponentWithInstigator");
static_assert(sizeof(Lib_Audio_C_AkEventComponentWithInstigator) == 0x000068, "Wrong size on Lib_Audio_C_AkEventComponentWithInstigator");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, AkEvent) == 0x000000, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::AkEvent' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, Ak_Component) == 0x000008, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::Ak_Component' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, Instigator) == 0x000010, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::Instigator' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, __WorldContext) == 0x000018, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::__WorldContext' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, ReturnValue) == 0x000020, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_IsValid_ReturnValue) == 0x000024, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_IsValid_ReturnValue_1) == 0x000025, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer) == 0x000028, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, K2Node_DynamicCast_bSuccess) == 0x000030, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue) == 0x000031, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_IsLocallySpectated_ReturnValue) == 0x000032, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_IsLocallySpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000038, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_IsValid_ReturnValue_2) == 0x000040, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, Temp_delegate_Variable) == 0x000044, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_GetSnapNetWorldType_ReturnValue) == 0x000054, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_GetSnapNetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_PostAkEvent_ReturnValue) == 0x000058, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x00005C, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventComponentWithInstigator, CallFunc_SetRTPCValue_Value_ImplicitCast) == 0x000060, "Member 'Lib_Audio_C_AkEventComponentWithInstigator::CallFunc_SetRTPCValue_Value_ImplicitCast' has a wrong offset!");

// Function Lib_Audio.Lib_Audio_C.AkEventLocation
// 0x0088 (0x0088 - 0x0000)
struct Lib_Audio_C_AkEventLocation final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                Location;                                          // 0x0008(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Instigator;                                        // 0x0020(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0028(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           AkComponent;                                       // 0x0038(0x0008)(Edit, BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESnapNetWorldType                             CallFunc_GetSnapNetWorldType_ReturnValue;          // 0x0042(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0043(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterRenderer*        K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue; // 0x0051(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallySpectated_ReturnValue;           // 0x0052(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_53[0x5];                                       // 0x0053(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0060(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostAkEvent_ReturnValue;                  // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_74[0x4];                                       // 0x0074(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UAkComponent*                           CallFunc_SpawnAkComponentAtLocation_ReturnValue;   // 0x0078(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast;          // 0x0080(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lib_Audio_C_AkEventLocation) == 0x000008, "Wrong alignment on Lib_Audio_C_AkEventLocation");
static_assert(sizeof(Lib_Audio_C_AkEventLocation) == 0x000088, "Wrong size on Lib_Audio_C_AkEventLocation");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, AkEvent) == 0x000000, "Member 'Lib_Audio_C_AkEventLocation::AkEvent' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, Location) == 0x000008, "Member 'Lib_Audio_C_AkEventLocation::Location' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, Instigator) == 0x000020, "Member 'Lib_Audio_C_AkEventLocation::Instigator' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, __WorldContext) == 0x000028, "Member 'Lib_Audio_C_AkEventLocation::__WorldContext' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, ReturnValue) == 0x000030, "Member 'Lib_Audio_C_AkEventLocation::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, AkComponent) == 0x000038, "Member 'Lib_Audio_C_AkEventLocation::AkComponent' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_IsValid_ReturnValue) == 0x000040, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_IsValid_ReturnValue_1) == 0x000041, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_GetSnapNetWorldType_ReturnValue) == 0x000042, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_GetSnapNetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000043, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer) == 0x000048, "Member 'Lib_Audio_C_AkEventLocation::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'Lib_Audio_C_AkEventLocation::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue) == 0x000051, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_IsLocallySpectated_ReturnValue) == 0x000052, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_IsLocallySpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000058, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, Temp_delegate_Variable) == 0x000060, "Member 'Lib_Audio_C_AkEventLocation::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_PostAkEvent_ReturnValue) == 0x000070, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_PostAkEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_SpawnAkComponentAtLocation_ReturnValue) == 0x000078, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_SpawnAkComponentAtLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventLocation, CallFunc_SetRTPCValue_Value_ImplicitCast) == 0x000080, "Member 'Lib_Audio_C_AkEventLocation::CallFunc_SetRTPCValue_Value_ImplicitCast' has a wrong offset!");

// Function Lib_Audio.Lib_Audio_C.AkEventRenderer
// 0x0068 (0x0068 - 0x0000)
struct Lib_Audio_C_AkEventRenderer final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Renderer;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LocallyControlled;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESnapNetWorldType                             CallFunc_GetSnapNetWorldType_ReturnValue;          // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0029(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2A[0x6];                                       // 0x002A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAkRtpc*                          CallFunc_GetLocallySpectatedRTPC_ReturnValue;      // 0x0030(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0038(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0049(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterRenderer*        K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0058(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallySpectated_ReturnValue;           // 0x0059(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_5A[0x2];                                       // 0x005A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x005C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast;          // 0x0060(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lib_Audio_C_AkEventRenderer) == 0x000008, "Wrong alignment on Lib_Audio_C_AkEventRenderer");
static_assert(sizeof(Lib_Audio_C_AkEventRenderer) == 0x000068, "Wrong size on Lib_Audio_C_AkEventRenderer");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, AkEvent) == 0x000000, "Member 'Lib_Audio_C_AkEventRenderer::AkEvent' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, Renderer) == 0x000008, "Member 'Lib_Audio_C_AkEventRenderer::Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, __WorldContext) == 0x000010, "Member 'Lib_Audio_C_AkEventRenderer::__WorldContext' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, ReturnValue) == 0x000018, "Member 'Lib_Audio_C_AkEventRenderer::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, LocallyControlled) == 0x000020, "Member 'Lib_Audio_C_AkEventRenderer::LocallyControlled' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_GetSnapNetWorldType_ReturnValue) == 0x000028, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_GetSnapNetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000029, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_GetLocallySpectatedRTPC_ReturnValue) == 0x000030, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_GetLocallySpectatedRTPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, Temp_delegate_Variable) == 0x000038, "Member 'Lib_Audio_C_AkEventRenderer::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_IsValid_ReturnValue) == 0x000048, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_IsValid_ReturnValue_1) == 0x000049, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer) == 0x000050, "Member 'Lib_Audio_C_AkEventRenderer::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, K2Node_DynamicCast_bSuccess) == 0x000058, "Member 'Lib_Audio_C_AkEventRenderer::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_IsLocallySpectated_ReturnValue) == 0x000059, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_IsLocallySpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_PostEvent_ReturnValue) == 0x00005C, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRenderer, CallFunc_SetRTPCValue_Value_ImplicitCast) == 0x000060, "Member 'Lib_Audio_C_AkEventRenderer::CallFunc_SetRTPCValue_Value_ImplicitCast' has a wrong offset!");

// Function Lib_Audio.Lib_Audio_C.AkEventRendererWithInstigator
// 0x0080 (0x0080 - 0x0000)
struct Lib_Audio_C_AkEventRendererWithInstigator final
{
public:
	class UAkAudioEvent*                          AkEvent;                                           // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Renderer;                                          // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 Instigator;                                        // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UObject*                                __WorldContext;                                    // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         ReturnValue;                                       // 0x0020(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        LocallyControlled;                                 // 0x0028(0x0008)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESnapNetWorldType                             CallFunc_GetSnapNetWorldType_ReturnValue;          // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0031(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ByteByte_ReturnValue;          // 0x0032(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_33[0x5];                                       // 0x0033(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	const class UAkRtpc*                          CallFunc_GetLocallySpectatedRTPC_ReturnValue;      // 0x0038(0x0008)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0040(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0041(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_42[0x6];                                       // 0x0042(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterRenderer*        K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer; // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x3];                                       // 0x0051(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(EAkCallbackType CallbackType, class UAkCallbackInfo* CallbackInfo)> Temp_delegate_Variable;                            // 0x0054(0x0010)(ConstParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue; // 0x0064(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsLocallySpectated_ReturnValue;           // 0x0065(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_66[0x2];                                       // 0x0066(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_BoolToDouble_ReturnValue;            // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_PostEvent_ReturnValue;                    // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast;          // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast_1;        // 0x0078(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lib_Audio_C_AkEventRendererWithInstigator) == 0x000008, "Wrong alignment on Lib_Audio_C_AkEventRendererWithInstigator");
static_assert(sizeof(Lib_Audio_C_AkEventRendererWithInstigator) == 0x000080, "Wrong size on Lib_Audio_C_AkEventRendererWithInstigator");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, AkEvent) == 0x000000, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::AkEvent' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, Renderer) == 0x000008, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, Instigator) == 0x000010, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::Instigator' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, __WorldContext) == 0x000018, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::__WorldContext' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, ReturnValue) == 0x000020, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, LocallyControlled) == 0x000028, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::LocallyControlled' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_GetSnapNetWorldType_ReturnValue) == 0x000030, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_GetSnapNetWorldType_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_IsValid_ReturnValue) == 0x000031, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_EqualEqual_ByteByte_ReturnValue) == 0x000032, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_EqualEqual_ByteByte_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_GetLocallySpectatedRTPC_ReturnValue) == 0x000038, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_GetLocallySpectatedRTPC_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_IsValid_ReturnValue_1) == 0x000040, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_IsValid_ReturnValue_2) == 0x000041, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer) == 0x000048, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Renderer' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, K2Node_DynamicCast_bSuccess) == 0x000050, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, Temp_delegate_Variable) == 0x000054, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::Temp_delegate_Variable' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue) == 0x000064, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_IsTeamMateWithLocallySpectatedCharacter_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_IsLocallySpectated_ReturnValue) == 0x000065, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_IsLocallySpectated_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_Conv_BoolToDouble_ReturnValue) == 0x000068, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_Conv_BoolToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_PostEvent_ReturnValue) == 0x000070, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_PostEvent_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_SetRTPCValue_Value_ImplicitCast) == 0x000074, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_SetRTPCValue_Value_ImplicitCast' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkEventRendererWithInstigator, CallFunc_SetRTPCValue_Value_ImplicitCast_1) == 0x000078, "Member 'Lib_Audio_C_AkEventRendererWithInstigator::CallFunc_SetRTPCValue_Value_ImplicitCast_1' has a wrong offset!");

// Function Lib_Audio.Lib_Audio_C.AkVelocity
// 0x00C8 (0x00C8 - 0x0000)
struct Lib_Audio_C_AkVelocity final
{
public:
	class UAkComponent*                           Ak;                                                // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        VectorLengthMin;                                   // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VectorLengthMax;                                   // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        DT;                                                // 0x0018(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                GetPreviousLocation;                               // 0x0020(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         InterpTimeMs;                                      // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                __WorldContext;                                    // 0x0040(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector                                SetPreviousLocation;                               // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VectorLength;                                      // 0x0060(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        VectorLengthClamped;                               // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue;      // 0x0070(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_Distance_ReturnValue;              // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0098(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_MapRangeClamped_ReturnValue;              // 0x00A0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_K2_GetComponentLocation_ReturnValue_1;    // 0x00A8(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRTPCValue_Value_ImplicitCast;          // 0x00C0(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(Lib_Audio_C_AkVelocity) == 0x000008, "Wrong alignment on Lib_Audio_C_AkVelocity");
static_assert(sizeof(Lib_Audio_C_AkVelocity) == 0x0000C8, "Wrong size on Lib_Audio_C_AkVelocity");
static_assert(offsetof(Lib_Audio_C_AkVelocity, Ak) == 0x000000, "Member 'Lib_Audio_C_AkVelocity::Ak' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, VectorLengthMin) == 0x000008, "Member 'Lib_Audio_C_AkVelocity::VectorLengthMin' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, VectorLengthMax) == 0x000010, "Member 'Lib_Audio_C_AkVelocity::VectorLengthMax' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, DT) == 0x000018, "Member 'Lib_Audio_C_AkVelocity::DT' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, GetPreviousLocation) == 0x000020, "Member 'Lib_Audio_C_AkVelocity::GetPreviousLocation' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, InterpTimeMs) == 0x000038, "Member 'Lib_Audio_C_AkVelocity::InterpTimeMs' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, __WorldContext) == 0x000040, "Member 'Lib_Audio_C_AkVelocity::__WorldContext' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, SetPreviousLocation) == 0x000048, "Member 'Lib_Audio_C_AkVelocity::SetPreviousLocation' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, VectorLength) == 0x000060, "Member 'Lib_Audio_C_AkVelocity::VectorLength' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, VectorLengthClamped) == 0x000068, "Member 'Lib_Audio_C_AkVelocity::VectorLengthClamped' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_K2_GetComponentLocation_ReturnValue) == 0x000070, "Member 'Lib_Audio_C_AkVelocity::CallFunc_K2_GetComponentLocation_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_Vector_Distance_ReturnValue) == 0x000088, "Member 'Lib_Audio_C_AkVelocity::CallFunc_Vector_Distance_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_IsValid_ReturnValue) == 0x000090, "Member 'Lib_Audio_C_AkVelocity::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000098, "Member 'Lib_Audio_C_AkVelocity::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_MapRangeClamped_ReturnValue) == 0x0000A0, "Member 'Lib_Audio_C_AkVelocity::CallFunc_MapRangeClamped_ReturnValue' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_K2_GetComponentLocation_ReturnValue_1) == 0x0000A8, "Member 'Lib_Audio_C_AkVelocity::CallFunc_K2_GetComponentLocation_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(Lib_Audio_C_AkVelocity, CallFunc_SetRTPCValue_Value_ImplicitCast) == 0x0000C0, "Member 'Lib_Audio_C_AkVelocity::CallFunc_SetRTPCValue_Value_ImplicitCast' has a wrong offset!");

}

