#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OdyMinimap

#include "Basic.hpp"

#include "OdyMinimap_classes.hpp"
#include "OdyMinimap_parameters.hpp"


namespace SDK
{

// Function OdyMinimap.OdyCompassHorizontalWidget.AddIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          IndicatedObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyCompassHorizontalWidget::AddIndicator(class UObject* IndicatedObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "AddIndicator");

	Params::OdyCompassHorizontalWidget_AddIndicator Parms{};

	Parms.IndicatedObject = IndicatedObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.DestroyIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          IndicatedObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyCompassHorizontalWidget::DestroyIndicator(class UObject* IndicatedObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "DestroyIndicator");

	Params::OdyCompassHorizontalWidget_DestroyIndicator Parms{};

	Parms.IndicatedObject = IndicatedObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.OnActorDestroyed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyCompassHorizontalWidget::OnActorDestroyed(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "OnActorDestroyed");

	Params::OdyCompassHorizontalWidget_OnActorDestroyed Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.OnActorSpawned
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyCompassHorizontalWidget::OnActorSpawned(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "OnActorSpawned");

	Params::OdyCompassHorizontalWidget_OnActorSpawned Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.ConvertWorldPositionToCompassPosition
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdyCompassHorizontalWidget::ConvertWorldPositionToCompassPosition(const struct FVector& WorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "ConvertWorldPositionToCompassPosition");

	Params::OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.GetCompassWorldPosition
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UOdyCompassHorizontalWidget::GetCompassWorldPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "GetCompassWorldPosition");

	Params::OdyCompassHorizontalWidget_GetCompassWorldPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyCompassHorizontalWidget.GetHeadingYawInDegrees
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdyCompassHorizontalWidget::GetHeadingYawInDegrees() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassHorizontalWidget", "GetHeadingYawInDegrees");

	Params::OdyCompassHorizontalWidget_GetHeadingYawInDegrees Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyCompassIndicatorWidget.GetIndicatorVisibility
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UOdyCompassIndicatorWidget::GetIndicatorVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassIndicatorWidget", "GetIndicatorVisibility");

	Params::OdyCompassIndicatorWidget_GetIndicatorVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyCompassIndicatorWidget.GetIndicatorWorldPosition
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UOdyCompassIndicatorWidget::GetIndicatorWorldPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyCompassIndicatorWidget", "GetIndicatorWorldPosition");

	Params::OdyCompassIndicatorWidget_GetIndicatorWorldPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.CaptureMinimap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    bCheckout                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool AOdyMinimapActor::CaptureMinimap(bool bCheckout)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "CaptureMinimap");

	Params::OdyMinimapActor_CaptureMinimap Parms{};

	Parms.bCheckout = bCheckout;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.GetOutputTextureSlice
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   WorldHeight                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* AOdyMinimapActor::GetOutputTextureSlice(float WorldHeight)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "GetOutputTextureSlice");

	Params::OdyMinimapActor_GetOutputTextureSlice Parms{};

	Parms.WorldHeight = WorldHeight;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.SetupCameraInfo
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// int32                                   SliceIndex                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void AOdyMinimapActor::SetupCameraInfo(int32 SliceIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "SetupCameraInfo");

	Params::OdyMinimapActor_SetupCameraInfo Parms{};

	Parms.SliceIndex = SliceIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapActor.SortMapSlices
// (Final, Native, Public, BlueprintCallable)

void AOdyMinimapActor::SortMapSlices()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "SortMapSlices");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapActor.ConvertWorldExtentToMinimapExtent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldExtent                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AOdyMinimapActor::ConvertWorldExtentToMinimapExtent(const struct FVector& WorldExtent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "ConvertWorldExtentToMinimapExtent");

	Params::OdyMinimapActor_ConvertWorldExtentToMinimapExtent Parms{};

	Parms.WorldExtent = std::move(WorldExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.ConvertWorldPositionToMinimapPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AOdyMinimapActor::ConvertWorldPositionToMinimapPosition(const struct FVector& WorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "ConvertWorldPositionToMinimapPosition");

	Params::OdyMinimapActor_ConvertWorldPositionToMinimapPosition Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.EditorOnlySaveOutputTexture
// (Final, Native, Public, BlueprintCallable, Const)

void AOdyMinimapActor::EditorOnlySaveOutputTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "EditorOnlySaveOutputTexture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapActor.GetOutputTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* AOdyMinimapActor::GetOutputTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "GetOutputTexture");

	Params::OdyMinimapActor_GetOutputTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapActor.GetWorldToMinimapRatio
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D AOdyMinimapActor::GetWorldToMinimapRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapActor", "GetWorldToMinimapRatio");

	Params::OdyMinimapActor_GetWorldToMinimapRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.GetCompassIndicatorWidgetClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UOdyCompassIndicatorWidget>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UOdyCompassIndicatorWidget> IOdyMinimapIndicated::GetCompassIndicatorWidgetClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "GetCompassIndicatorWidgetClass");

	Params::OdyMinimapIndicated_GetCompassIndicatorWidgetClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWidgetClass
// (Native, Event, Public, BlueprintCallable, BlueprintEvent)
// Parameters:
// TSubclassOf<class UOdyMinimapIndicatorWidget>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class UOdyMinimapIndicatorWidget> IOdyMinimapIndicated::GetIndicatorWidgetClass()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "GetIndicatorWidgetClass");

	Params::OdyMinimapIndicated_GetIndicatorWidgetClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWorldExtent
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IOdyMinimapIndicated::GetIndicatorWorldExtent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "GetIndicatorWorldExtent");

	Params::OdyMinimapIndicated_GetIndicatorWorldExtent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWorldPosition
// (Native, Event, Public, HasDefaults, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector IOdyMinimapIndicated::GetIndicatorWorldPosition() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "GetIndicatorWorldPosition");

	Params::OdyMinimapIndicated_GetIndicatorWorldPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.SetupIndicatorInstance
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UOdyMinimapIndicatorWidget*       IndicatorInstance                                      (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOdyMinimapIndicated::SetupIndicatorInstance(class UOdyMinimapIndicatorWidget* IndicatorInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "SetupIndicatorInstance");

	Params::OdyMinimapIndicated_SetupIndicatorInstance Parms{};

	Parms.IndicatorInstance = IndicatorInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapIndicated.ShouldCompassIndicatorBeVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerController*                InPlayerController                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IOdyMinimapIndicated::ShouldCompassIndicatorBeVisible(class APlayerController* InPlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "ShouldCompassIndicatorBeVisible");

	Params::OdyMinimapIndicated_ShouldCompassIndicatorBeVisible Parms{};

	Parms.InPlayerController = InPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.ShouldIndicatorBeVisible
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, BlueprintPure, Const)
// Parameters:
// class APlayerController*                InPlayerController                                     (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool IOdyMinimapIndicated::ShouldIndicatorBeVisible(class APlayerController* InPlayerController) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "ShouldIndicatorBeVisible");

	Params::OdyMinimapIndicated_ShouldIndicatorBeVisible Parms{};

	Parms.InPlayerController = InPlayerController;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicated.TickIndicator
// (Native, Event, Public, BlueprintCallable, BlueprintEvent, Const)
// Parameters:
// class UOdyMinimapIndicatorWidget*       WidgetInstance                                         (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void IOdyMinimapIndicated::TickIndicator(class UOdyMinimapIndicatorWidget* WidgetInstance) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicated", "TickIndicator");

	Params::OdyMinimapIndicated_TickIndicator Parms{};

	Parms.WidgetInstance = WidgetInstance;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorCompassVisibility
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool UOdyMinimapIndicatorWidget::GetIndicatorCompassVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "GetIndicatorCompassVisibility");

	Params::OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorVisibility
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// ESlateVisibility                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESlateVisibility UOdyMinimapIndicatorWidget::GetIndicatorVisibility()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "GetIndicatorVisibility");

	Params::OdyMinimapIndicatorWidget_GetIndicatorVisibility Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorWorldExtent
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UOdyMinimapIndicatorWidget::GetIndicatorWorldExtent()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "GetIndicatorWorldExtent");

	Params::OdyMinimapIndicatorWidget_GetIndicatorWorldExtent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorWorldPosition
// (Native, Event, Public, HasDefaults, BlueprintEvent)
// Parameters:
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector UOdyMinimapIndicatorWidget::GetIndicatorWorldPosition()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "GetIndicatorWorldPosition");

	Params::OdyMinimapIndicatorWidget_GetIndicatorWorldPosition Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.GetOwningMinimap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMinimapWidget*                ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UOdyMinimapWidget* UOdyMinimapIndicatorWidget::GetOwningMinimap()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "GetOwningMinimap");

	Params::OdyMinimapIndicatorWidget_GetOwningMinimap Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapIndicatorWidget.SetOwningMinimap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UOdyMinimapWidget*                InOwningMinimap                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapIndicatorWidget::SetOwningMinimap(class UOdyMinimapWidget* InOwningMinimap)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapIndicatorWidget", "SetOwningMinimap");

	Params::OdyMinimapIndicatorWidget_SetOwningMinimap Parms{};

	Parms.InOwningMinimap = InOwningMinimap;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapSubsystem.ConvertWorldExtentToMinimapExtent
// (Final, Native, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldExtent                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UOdyMinimapSubsystem::ConvertWorldExtentToMinimapExtent(const struct FVector& WorldExtent) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "ConvertWorldExtentToMinimapExtent");

	Params::OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent Parms{};

	Parms.WorldExtent = std::move(WorldExtent);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.ConvertWorldPositionToMinimapPosition
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldPosition                                          (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UOdyMinimapSubsystem::ConvertWorldPositionToMinimapPosition(const struct FVector& WorldPosition) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "ConvertWorldPositionToMinimapPosition");

	Params::OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition Parms{};

	Parms.WorldPosition = std::move(WorldPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapActor
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class AOdyMinimapActor*                 ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AOdyMinimapActor* UOdyMinimapSubsystem::GetMinimapActor() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "GetMinimapActor");

	Params::OdyMinimapSubsystem_GetMinimapActor Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapBrightness
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdyMinimapSubsystem::GetMinimapBrightness() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "GetMinimapBrightness");

	Params::OdyMinimapSubsystem_GetMinimapBrightness Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapTexture
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UOdyMinimapSubsystem::GetMinimapTexture() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "GetMinimapTexture");

	Params::OdyMinimapSubsystem_GetMinimapTexture Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapTextureForLocation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector                          WorldLocation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UTexture2D*                       ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UTexture2D* UOdyMinimapSubsystem::GetMinimapTextureForLocation(const struct FVector& WorldLocation) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "GetMinimapTextureForLocation");

	Params::OdyMinimapSubsystem_GetMinimapTextureForLocation Parms{};

	Parms.WorldLocation = std::move(WorldLocation);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapSubsystem.GetWorldToMinimapRatio
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UOdyMinimapSubsystem::GetWorldToMinimapRatio() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapSubsystem", "GetWorldToMinimapRatio");

	Params::OdyMinimapSubsystem_GetWorldToMinimapRatio Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapWidget.AddIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          IndicatedObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::AddIndicator(class UObject* IndicatedObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "AddIndicator");

	Params::OdyMinimapWidget_AddIndicator Parms{};

	Parms.IndicatedObject = IndicatedObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.DestroyIndicator
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class UObject*                          IndicatedObject                                        (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::DestroyIndicator(class UObject* IndicatedObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "DestroyIndicator");

	Params::OdyMinimapWidget_DestroyIndicator Parms{};

	Parms.IndicatedObject = IndicatedObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.OnActorDestroyed
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::OnActorDestroyed(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "OnActorDestroyed");

	Params::OdyMinimapWidget_OnActorDestroyed Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.OnActorSpawned
// (Native, Event, Public, BlueprintEvent)
// Parameters:
// class AActor*                           InActor                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::OnActorSpawned(class AActor* InActor)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "OnActorSpawned");

	Params::OdyMinimapWidget_OnActorSpawned Parms{};

	Parms.InActor = InActor;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.SetZoomCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable)
// Parameters:
// struct FVector2D                        Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::SetZoomCenter(const struct FVector2D& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "SetZoomCenter");

	Params::OdyMinimapWidget_SetZoomCenter Parms{};

	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.SetZoomLevel
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Value                                                  (ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::SetZoomLevel(const float Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "SetZoomLevel");

	Params::OdyMinimapWidget_SetZoomLevel Parms{};

	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.SetZoomLevelFromWoldMeters
// (Final, Native, Protected, BlueprintCallable)
// Parameters:
// float                                   DesiredMeters                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void UOdyMinimapWidget::SetZoomLevelFromWoldMeters(float DesiredMeters)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "SetZoomLevelFromWoldMeters");

	Params::OdyMinimapWidget_SetZoomLevelFromWoldMeters Parms{};

	Parms.DesiredMeters = DesiredMeters;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function OdyMinimap.OdyMinimapWidget.GetZoomCenter
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// struct FVector2D                        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector2D UOdyMinimapWidget::GetZoomCenter() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "GetZoomCenter");

	Params::OdyMinimapWidget_GetZoomCenter Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function OdyMinimap.OdyMinimapWidget.GetZoomLevel
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float UOdyMinimapWidget::GetZoomLevel() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("OdyMinimapWidget", "GetZoomLevel");

	Params::OdyMinimapWidget_GetZoomLevel Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

