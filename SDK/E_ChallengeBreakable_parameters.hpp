#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_ChallengeBreakable

#include "Basic.hpp"


namespace SDK::Params
{

// Function E_ChallengeBreakable.E_ChallengeBreakable_C.ExecuteUbergraph_E_ChallengeBreakable
// 0x0008 (0x0008 - 0x0000)
struct E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOldEnabled;                          // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewEnabled;                          // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable) == 0x000004, "Wrong alignment on E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable");
static_assert(sizeof(E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable) == 0x000008, "Wrong size on E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable");
static_assert(offsetof(E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable, EntryPoint) == 0x000000, "Member 'E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable::EntryPoint' has a wrong offset!");
static_assert(offsetof(E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable, K2Node_Event_bOldEnabled) == 0x000004, "Member 'E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable::K2Node_Event_bOldEnabled' has a wrong offset!");
static_assert(offsetof(E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable, K2Node_Event_bNewEnabled) == 0x000005, "Member 'E_ChallengeBreakable_C_ExecuteUbergraph_E_ChallengeBreakable::K2Node_Event_bNewEnabled' has a wrong offset!");

// Function E_ChallengeBreakable.E_ChallengeBreakable_C.OnEnabledChanged
// 0x0002 (0x0002 - 0x0000)
struct E_ChallengeBreakable_C_OnEnabledChanged final
{
public:
	bool                                          bOldEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewEnabled;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_ChallengeBreakable_C_OnEnabledChanged) == 0x000001, "Wrong alignment on E_ChallengeBreakable_C_OnEnabledChanged");
static_assert(sizeof(E_ChallengeBreakable_C_OnEnabledChanged) == 0x000002, "Wrong size on E_ChallengeBreakable_C_OnEnabledChanged");
static_assert(offsetof(E_ChallengeBreakable_C_OnEnabledChanged, bOldEnabled) == 0x000000, "Member 'E_ChallengeBreakable_C_OnEnabledChanged::bOldEnabled' has a wrong offset!");
static_assert(offsetof(E_ChallengeBreakable_C_OnEnabledChanged, bNewEnabled) == 0x000001, "Member 'E_ChallengeBreakable_C_OnEnabledChanged::bNewEnabled' has a wrong offset!");

// Function E_ChallengeBreakable.E_ChallengeBreakable_C.UpdateCollision
// 0x0001 (0x0001 - 0x0000)
struct E_ChallengeBreakable_C_UpdateCollision final
{
public:
	bool                                          CallFunc_IsAlive_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_ChallengeBreakable_C_UpdateCollision) == 0x000001, "Wrong alignment on E_ChallengeBreakable_C_UpdateCollision");
static_assert(sizeof(E_ChallengeBreakable_C_UpdateCollision) == 0x000001, "Wrong size on E_ChallengeBreakable_C_UpdateCollision");
static_assert(offsetof(E_ChallengeBreakable_C_UpdateCollision, CallFunc_IsAlive_ReturnValue) == 0x000000, "Member 'E_ChallengeBreakable_C_UpdateCollision::CallFunc_IsAlive_ReturnValue' has a wrong offset!");

}

