#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_DV_GlitchBeam

#include "Basic.hpp"


namespace SDK::Params
{

// Function E_DV_GlitchBeam.E_DV_GlitchBeam_C.ExecuteUbergraph_E_DV_GlitchBeam
// 0x0030 (0x0030 - 0x0000)
struct E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetOwnerEntity_ReturnValue;               // 0x0008(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bOldEnabled;                          // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_Event_bNewEnabled;                          // 0x0011(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_12[0x2];                                       // 0x0012(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_GetCurrentTeamForActor_ReturnValue;       // 0x0014(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMatchaSnapNetCharacterEntity*          K2Node_Event_Character;                            // 0x0018(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         K2Node_Event_DeltaSeconds;                         // 0x0020(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_GetCurrentTeam_ReturnValue;               // 0x0024(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_NotEqual_IntInt_ReturnValue;              // 0x0028(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam) == 0x000008, "Wrong alignment on E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam");
static_assert(sizeof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam) == 0x000030, "Wrong size on E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, EntryPoint) == 0x000000, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::EntryPoint' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, CallFunc_GetOwnerEntity_ReturnValue) == 0x000008, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::CallFunc_GetOwnerEntity_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, K2Node_Event_bOldEnabled) == 0x000010, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::K2Node_Event_bOldEnabled' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, K2Node_Event_bNewEnabled) == 0x000011, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::K2Node_Event_bNewEnabled' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, CallFunc_GetCurrentTeamForActor_ReturnValue) == 0x000014, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::CallFunc_GetCurrentTeamForActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, K2Node_Event_Character) == 0x000018, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::K2Node_Event_Character' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, K2Node_Event_DeltaSeconds) == 0x000020, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::K2Node_Event_DeltaSeconds' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, CallFunc_GetCurrentTeam_ReturnValue) == 0x000024, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::CallFunc_GetCurrentTeam_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam, CallFunc_NotEqual_IntInt_ReturnValue) == 0x000028, "Member 'E_DV_GlitchBeam_C_ExecuteUbergraph_E_DV_GlitchBeam::CallFunc_NotEqual_IntInt_ReturnValue' has a wrong offset!");

// Function E_DV_GlitchBeam.E_DV_GlitchBeam_C.OnEnabledChanged
// 0x0002 (0x0002 - 0x0000)
struct E_DV_GlitchBeam_C_OnEnabledChanged final
{
public:
	bool                                          bOldEnabled;                                       // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bNewEnabled;                                       // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_DV_GlitchBeam_C_OnEnabledChanged) == 0x000001, "Wrong alignment on E_DV_GlitchBeam_C_OnEnabledChanged");
static_assert(sizeof(E_DV_GlitchBeam_C_OnEnabledChanged) == 0x000002, "Wrong size on E_DV_GlitchBeam_C_OnEnabledChanged");
static_assert(offsetof(E_DV_GlitchBeam_C_OnEnabledChanged, bOldEnabled) == 0x000000, "Member 'E_DV_GlitchBeam_C_OnEnabledChanged::bOldEnabled' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_OnEnabledChanged, bNewEnabled) == 0x000001, "Member 'E_DV_GlitchBeam_C_OnEnabledChanged::bNewEnabled' has a wrong offset!");

// Function E_DV_GlitchBeam.E_DV_GlitchBeam_C.OnOverlapCharacter
// 0x0010 (0x0010 - 0x0000)
struct E_DV_GlitchBeam_C_OnOverlapCharacter final
{
public:
	class AMatchaSnapNetCharacterEntity*          Character;                                         // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	float                                         DeltaSeconds;                                      // 0x0008(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_DV_GlitchBeam_C_OnOverlapCharacter) == 0x000008, "Wrong alignment on E_DV_GlitchBeam_C_OnOverlapCharacter");
static_assert(sizeof(E_DV_GlitchBeam_C_OnOverlapCharacter) == 0x000010, "Wrong size on E_DV_GlitchBeam_C_OnOverlapCharacter");
static_assert(offsetof(E_DV_GlitchBeam_C_OnOverlapCharacter, Character) == 0x000000, "Member 'E_DV_GlitchBeam_C_OnOverlapCharacter::Character' has a wrong offset!");
static_assert(offsetof(E_DV_GlitchBeam_C_OnOverlapCharacter, DeltaSeconds) == 0x000008, "Member 'E_DV_GlitchBeam_C_OnOverlapCharacter::DeltaSeconds' has a wrong offset!");

}

