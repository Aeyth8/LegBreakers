#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_TimedChest

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "Matcha_structs.hpp"
#include "Matcha_classes.hpp"
#include "SnapNet_structs.hpp"


namespace SDK
{

// BlueprintGeneratedClass E_TimedChest.E_TimedChest_C
// 0x00E0 (0x0590 - 0x04B0)
class AE_TimedChest_C : public AMatchaBreakableEntity
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x04B0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UBoxComponent*                          InteractablesCollider;                             // 0x04B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UMatchaLootComponent*                   MatchaLoot;                                        // 0x04C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FSnapNetPropertyInt32                  TotalUnlockDurationSeconds;                        // 0x04D0(0x0038)(Edit, BlueprintVisible, DisableEditOnInstance)
	ESpawnRegion                                  Region;                                            // 0x0508(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_509[0x7];                                      // 0x0509(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnapNetPropertyEnum                   ChestState;                                        // 0x0510(0x0048)(Edit, BlueprintVisible, DisableEditOnInstance)
	int32                                         TimeToUnlockAfterInteractSeconds;                  // 0x0558(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_55C[0x4];                                      // 0x055C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           UnlockTimerHandle;                                 // 0x0560(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FGameplayTag                           BroadcastChannel;                                  // 0x0568(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	struct FMatchaGameplayEvent                   UnlockStartedEvent;                                // 0x0570(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor)
	class FName                                   AudioOnBreakID;                                    // 0x0584(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EScheduledObjectiveType                       ScheduledObjectiveType;                            // 0x058C(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void AfterInteractionCancelledOrCompleted(class AActor* InteractingActor, bool bWasCancelled);
	void AfterInteractionStarted(class AActor* InteractingActor);
	void BeginScheduledObjective();
	void BndEvt__E_BreakableBase_EntityComponent_K2Node_ComponentBoundEvent_0_SnapNetPropertiesModifiedDynamicDelegate__DelegateSignature();
	void ExecuteUbergraph_E_TimedChest(int32 EntryPoint);
	void HandleReset();
	void InteractionCancelled(class AActor* InteractingActor);
	void InteractionCompleted(class AActor* InteractingActor);
	void InteractionProgressed(class AActor* InteractingActor, float InteractionProgressTimeSeconds);
	void OnBroken();
	void OnUnlockTimerFinished();
	void ReceiveBeginPlay();
	void ResetChest();
	void UpdateCollision();

	bool CanStartInteraction(class AActor* InteractingActor) const;
	int32 GetInteractionPriority(class AActor* InteractingActor) const;
	struct FMatchaInteractionRequirements GetInteractionRequirements() const;
	class FString GetScheduledObjectiveDisplayText() const;
	EScheduledObjectiveType GetScheduledObjectiveType() const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"E_TimedChest_C">();
	}
	static class AE_TimedChest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AE_TimedChest_C>();
	}
};
static_assert(alignof(AE_TimedChest_C) == 0x000008, "Wrong alignment on AE_TimedChest_C");
static_assert(sizeof(AE_TimedChest_C) == 0x000590, "Wrong size on AE_TimedChest_C");
static_assert(offsetof(AE_TimedChest_C, UberGraphFrame) == 0x0004B0, "Member 'AE_TimedChest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, InteractablesCollider) == 0x0004B8, "Member 'AE_TimedChest_C::InteractablesCollider' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, MatchaLoot) == 0x0004C0, "Member 'AE_TimedChest_C::MatchaLoot' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, StaticMesh) == 0x0004C8, "Member 'AE_TimedChest_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, TotalUnlockDurationSeconds) == 0x0004D0, "Member 'AE_TimedChest_C::TotalUnlockDurationSeconds' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, Region) == 0x000508, "Member 'AE_TimedChest_C::Region' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, ChestState) == 0x000510, "Member 'AE_TimedChest_C::ChestState' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, TimeToUnlockAfterInteractSeconds) == 0x000558, "Member 'AE_TimedChest_C::TimeToUnlockAfterInteractSeconds' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, UnlockTimerHandle) == 0x000560, "Member 'AE_TimedChest_C::UnlockTimerHandle' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, BroadcastChannel) == 0x000568, "Member 'AE_TimedChest_C::BroadcastChannel' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, UnlockStartedEvent) == 0x000570, "Member 'AE_TimedChest_C::UnlockStartedEvent' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, AudioOnBreakID) == 0x000584, "Member 'AE_TimedChest_C::AudioOnBreakID' has a wrong offset!");
static_assert(offsetof(AE_TimedChest_C, ScheduledObjectiveType) == 0x00058C, "Member 'AE_TimedChest_C::ScheduledObjectiveType' has a wrong offset!");

}

