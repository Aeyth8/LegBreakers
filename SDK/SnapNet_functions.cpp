#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnapNet

#include "Basic.hpp"

#include "SnapNet_classes.hpp"
#include "SnapNet_parameters.hpp"


namespace SDK
{

// Function SnapNet.SnapNetAnimationUtilities.GetComponentSpaceBoneTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimMontage*                     Montage                                                (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetAnimationUtilities::GetComponentSpaceBoneTransform(const class UAnimMontage* Montage, float Time, class FName SocketName, struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetAnimationUtilities", "GetComponentSpaceBoneTransform");

	Params::SnapNetAnimationUtilities_GetComponentSpaceBoneTransform Parms{};

	Parms.Montage = Montage;
	Parms.Time = Time;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetAnimationUtilities.GetComponentSpaceSocketTransform
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// class UAnimSequenceBase*                AnimationSequence                                      (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// double                                  Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             SocketName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FTransform                       OutTransform                                           (Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetAnimationUtilities::GetComponentSpaceSocketTransform(const class UAnimSequenceBase* AnimationSequence, double Time, class FName SocketName, struct FTransform* OutTransform)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetAnimationUtilities", "GetComponentSpaceSocketTransform");

	Params::SnapNetAnimationUtilities_GetComponentSpaceSocketTransform Parms{};

	Parms.AnimationSequence = AnimationSequence;
	Parms.Time = Time;
	Parms.SocketName = SocketName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (OutTransform != nullptr)
		*OutTransform = std::move(Parms.OutTransform);

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetAnimationUtilities.SyncMontageState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MontageGroupName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlayRate                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetMontageUpdateType               UpdateType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetAnimationUtilities::SyncMontageState(class UAnimInstance* AnimInstance, class FName MontageGroupName, class UAnimMontage* Montage, float PlaybackPosition, float PlayRate, ESnapNetMontageUpdateType UpdateType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetAnimationUtilities", "SyncMontageState");

	Params::SnapNetAnimationUtilities_SyncMontageState Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.MontageGroupName = MontageGroupName;
	Parms.Montage = Montage;
	Parms.PlaybackPosition = PlaybackPosition;
	Parms.PlayRate = PlayRate;
	Parms.UpdateType = UpdateType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetAnimationUtilities.UpdateMontageState
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class UAnimInstance*                    AnimInstance                                           (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             MontageGroupName                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class UAnimMontage*                     Montage                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   PlaybackPosition                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetMontageUpdateType               UpdateType                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetAnimationUtilities::UpdateMontageState(class UAnimInstance* AnimInstance, class FName MontageGroupName, class UAnimMontage* Montage, float PlaybackPosition, ESnapNetMontageUpdateType UpdateType)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetAnimationUtilities", "UpdateMontageState");

	Params::SnapNetAnimationUtilities_UpdateMontageState Parms{};

	Parms.AnimInstance = AnimInstance;
	Parms.MontageGroupName = MontageGroupName;
	Parms.Montage = Montage;
	Parms.PlaybackPosition = PlaybackPosition;
	Parms.UpdateType = UpdateType;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetCharacterEntity.CharacterMovementUpdated
// (Native, Protected, HasDefaults)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OldLocation                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// struct FVector                          OldVelocity                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void ASnapNetCharacterEntity::CharacterMovementUpdated(float DeltaSeconds, const struct FVector& OldLocation, const struct FVector& OldVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetCharacterEntity", "CharacterMovementUpdated");

	Params::SnapNetCharacterEntity_CharacterMovementUpdated Parms{};

	Parms.DeltaSeconds = DeltaSeconds;
	Parms.OldLocation = std::move(OldLocation);
	Parms.OldVelocity = std::move(OldVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetClient*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetClient* USnapNetClient::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetClient", "Get");

	Params::SnapNetClient_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.Disconnect
// (Final, Native, Public, BlueprintCallable)

void USnapNetClient::Disconnect()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "Disconnect");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.PlayReplayFile
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTime                                              (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndTime                                                (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::PlayReplayFile(const class FString& Filename, int32* StartTime, int32* EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "PlayReplayFile");

	Params::SnapNetClient_PlayReplayFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	if (StartTime != nullptr)
		*StartTime = Parms.StartTime;

	if (EndTime != nullptr)
		*EndTime = Parms.EndTime;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.SeekReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SeekReplay(int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SeekReplay");

	Params::SnapNetClient_SeekReplay Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SendReliableMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   LocalPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetReliableMessage*          Message                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SendReliableMessage(int32 LocalPlayerIndex, class USnapNetReliableMessage* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SendReliableMessage");

	Params::SnapNetClient_SendReliableMessage Parms{};

	Parms.LocalPlayerIndex = LocalPlayerIndex;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetAdditionalJitterBufferMilliseconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetAdditionalJitterBufferMilliseconds(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetAdditionalJitterBufferMilliseconds");

	Params::SnapNetClient_SetAdditionalJitterBufferMilliseconds Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetInputDelayBeforePredictionMaxMilliseconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetInputDelayBeforePredictionMaxMilliseconds(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetInputDelayBeforePredictionMaxMilliseconds");

	Params::SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetInputDelayBeforePredictionMinMilliseconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetInputDelayBeforePredictionMinMilliseconds(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetInputDelayBeforePredictionMinMilliseconds");

	Params::SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetPacketCodecClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetPacketCodec>  PacketCodecClass                                       (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetPacketCodecClass(TSubclassOf<class USnapNetPacketCodec> PacketCodecClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetPacketCodecClass");

	Params::SnapNetClient_SetPacketCodecClass Parms{};

	Parms.PacketCodecClass = PacketCodecClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetPacketSimulationJitter
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetPacketSimulationJitter(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetPacketSimulationJitter");

	Params::SnapNetClient_SetPacketSimulationJitter Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetPacketSimulationLatency
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetPacketSimulationLatency(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetPacketSimulationLatency");

	Params::SnapNetClient_SetPacketSimulationLatency Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetPacketSimulationLoss
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   Percentage                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetPacketSimulationLoss(float Percentage)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetPacketSimulationLoss");

	Params::SnapNetClient_SetPacketSimulationLoss Parms{};

	Parms.Percentage = Percentage;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetPredictedMaxMilliseconds
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Milliseconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetPredictedMaxMilliseconds(int32 Milliseconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetPredictedMaxMilliseconds");

	Params::SnapNetClient_SetPredictedMaxMilliseconds Parms{};

	Parms.Milliseconds = Milliseconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetRenderInterpolationMethod
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESnapNetRenderInterpolationMethod       RenderInterpolationMethod                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetRenderInterpolationMethod(ESnapNetRenderInterpolationMethod RenderInterpolationMethod)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetRenderInterpolationMethod");

	Params::SnapNetClient_SetRenderInterpolationMethod Parms{};

	Parms.RenderInterpolationMethod = RenderInterpolationMethod;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetSpectatedPlayerIndexForReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetSpectatedPlayerIndexForReplay(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetSpectatedPlayerIndexForReplay");

	Params::SnapNetClient_SetSpectatedPlayerIndexForReplay Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.SetTransportClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetTransport>    TransportClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetClient::SetTransportClass(TSubclassOf<class USnapNetTransport> TransportClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "SetTransportClass");

	Params::SnapNetClient_SetTransportClass Parms{};

	Parms.TransportClass = TransportClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetClient.GetAdditionalJitterBufferMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetAdditionalJitterBufferMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetAdditionalJitterBufferMilliseconds");

	Params::SnapNetClient_GetAdditionalJitterBufferMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetBufferedRemoteInputs
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetBufferedRemoteInputs() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetBufferedRemoteInputs");

	Params::SnapNetClient_GetBufferedRemoteInputs Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetConnectionStatus
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESnapNetClientConnectionStatus          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESnapNetClientConnectionStatus USnapNetClient::GetConnectionStatus() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetConnectionStatus");

	Params::SnapNetClient_GetConnectionStatus Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetInputDelayBeforePredictionMaxMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetInputDelayBeforePredictionMaxMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetInputDelayBeforePredictionMaxMilliseconds");

	Params::SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetInputDelayBeforePredictionMinMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetInputDelayBeforePredictionMinMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetInputDelayBeforePredictionMinMilliseconds");

	Params::SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetInputDelayFrames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetInputDelayFrames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetInputDelayFrames");

	Params::SnapNetClient_GetInputDelayFrames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetInstantReplayContextEntityIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetInstantReplayContextEntityIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetInstantReplayContextEntityIndex");

	Params::SnapNetClient_GetInstantReplayContextEntityIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetInstantReplaySlotIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetInstantReplaySlotIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetInstantReplaySlotIndex");

	Params::SnapNetClient_GetInstantReplaySlotIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetJitterBufferSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetJitterBufferSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetJitterBufferSeconds");

	Params::SnapNetClient_GetJitterBufferSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetKbpsReceived
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetKbpsReceived() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetKbpsReceived");

	Params::SnapNetClient_GetKbpsReceived Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetKbpsSent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetKbpsSent() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetKbpsSent");

	Params::SnapNetClient_GetKbpsSent Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetLocalPlayerIndexForLocalPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class ULocalPlayer*                     LocalPlayer                                            (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetLocalPlayerIndexForLocalPlayer(class ULocalPlayer* LocalPlayer) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetLocalPlayerIndexForLocalPlayer");

	Params::SnapNetClient_GetLocalPlayerIndexForLocalPlayer Parms{};

	Parms.LocalPlayer = LocalPlayer;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetLocalPlayerIndexForPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetLocalPlayerIndexForPlayerIndex(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetLocalPlayerIndexForPlayerIndex");

	Params::SnapNetClient_GetLocalPlayerIndexForPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPacketCodec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetPacketCodec*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetPacketCodec* USnapNetClient::GetPacketCodec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPacketCodec");

	Params::SnapNetClient_GetPacketCodec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPacketJitterSeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetPacketJitterSeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPacketJitterSeconds");

	Params::SnapNetClient_GetPacketJitterSeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPacketLatencySeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetPacketLatencySeconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPacketLatencySeconds");

	Params::SnapNetClient_GetPacketLatencySeconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPacketLossFraction
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetPacketLossFraction() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPacketLossFraction");

	Params::SnapNetClient_GetPacketLossFraction Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPlayerControllerForPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class APlayerController*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class APlayerController* USnapNetClient::GetPlayerControllerForPlayerIndex(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPlayerControllerForPlayerIndex");

	Params::SnapNetClient_GetPlayerControllerForPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LocalPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetPlayerIndex(int32 LocalPlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPlayerIndex");

	Params::SnapNetClient_GetPlayerIndex Parms{};

	Parms.LocalPlayerIndex = LocalPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPredictedFrames
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetPredictedFrames() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPredictedFrames");

	Params::SnapNetClient_GetPredictedFrames Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetPredictedMaxMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetPredictedMaxMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetPredictedMaxMilliseconds");

	Params::SnapNetClient_GetPredictedMaxMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetSimulation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetSimulation*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetSimulation* USnapNetClient::GetSimulation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetSimulation");

	Params::SnapNetClient_GetSimulation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetSimulationTimeScale
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetClient::GetSimulationTimeScale() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetSimulationTimeScale");

	Params::SnapNetClient_GetSimulationTimeScale Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetSpectatedPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   LocalPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetSpectatedPlayerIndex(int32 LocalPlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetSpectatedPlayerIndex");

	Params::SnapNetClient_GetSpectatedPlayerIndex Parms{};

	Parms.LocalPlayerIndex = LocalPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetSpectatedPlayerIndexForReplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetClient::GetSpectatedPlayerIndexForReplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetSpectatedPlayerIndexForReplay");

	Params::SnapNetClient_GetSpectatedPlayerIndexForReplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.GetTransport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetTransport*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetTransport* USnapNetClient::GetTransport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "GetTransport");

	Params::SnapNetClient_GetTransport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsConnectionInterrupted
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsConnectionInterrupted() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsConnectionInterrupted");

	Params::SnapNetClient_IsConnectionInterrupted Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsLoopback
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsLoopback() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsLoopback");

	Params::SnapNetClient_IsLoopback Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsNetworkSimulationEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsNetworkSimulationEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsNetworkSimulationEnabled");

	Params::SnapNetClient_IsNetworkSimulationEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsPlayerIndexLocal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsPlayerIndexLocal(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsPlayerIndexLocal");

	Params::SnapNetClient_IsPlayerIndexLocal Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsPlayerIndexSpectatedLocally
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsPlayerIndexSpectatedLocally(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsPlayerIndexSpectatedLocally");

	Params::SnapNetClient_IsPlayerIndexSpectatedLocally Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsPlayingInstantReplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsPlayingInstantReplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsPlayingInstantReplay");

	Params::SnapNetClient_IsPlayingInstantReplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClient.IsPlayingReplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetClient::IsPlayingReplay() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetClient", "IsPlayingReplay");

	Params::SnapNetClient_IsPlayingReplay Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetClientConnectAsyncAction.Connect
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USnapNetClient*                   Client                                                 (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetClientConnectAsyncAction* ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetClientConnectAsyncAction* USnapNetClientConnectAsyncAction::Connect(class USnapNetClient* Client)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetClientConnectAsyncAction", "Connect");

	Params::SnapNetClientConnectAsyncAction_Connect Parms{};

	Parms.Client = Client;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetCustomInput.BlueprintPopulate
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                LocalPlayerController                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetCustomInput::BlueprintPopulate(class APlayerController* LocalPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetCustomInput", "BlueprintPopulate");

	Params::SnapNetCustomInput_BlueprintPopulate Parms{};

	Parms.LocalPlayerController = LocalPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetTransport.SetTimeout
// (Native, Public, BlueprintCallable)
// Parameters:
// int32                                   TimeoutSeconds                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetTransport::SetTimeout(int32 TimeoutSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetTransport", "SetTimeout");

	Params::SnapNetTransport_SetTimeout Parms{};

	Parms.TimeoutSeconds = TimeoutSeconds;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetTransport.SetupClientByUrl
// (Native, Public, BlueprintCallable)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetTransport::SetupClientByUrl(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetTransport", "SetupClientByUrl");

	Params::SnapNetTransport_SetupClientByUrl Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetDTLSTransport.SetServerPort
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   Port                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetDTLSTransport::SetServerPort(int32 Port)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetDTLSTransport", "SetServerPort");

	Params::SnapNetDTLSTransport_SetServerPort Parms{};

	Parms.Port = Port;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetDTLSTransport.SetSessionId
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           SessionId                                              (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetDTLSTransport::SetSessionId(const class FString& SessionId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetDTLSTransport", "SetSessionId");

	Params::SnapNetDTLSTransport_SetSessionId Parms{};

	Parms.SessionId = std::move(SessionId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.MarkTeleported
// (Final, Native, Public, BlueprintCallable)

void USnapNetEntityComponent::MarkTeleported()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "MarkTeleported");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SendToAllPlayers
// (Final, Native, Public, BlueprintCallable)

void USnapNetEntityComponent::SendToAllPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SendToAllPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SendToNoPlayers
// (Final, Native, Public, BlueprintCallable)

void USnapNetEntityComponent::SendToNoPlayers()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SendToNoPlayers");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SendToPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Send                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityComponent::SendToPlayer(int32 PlayerIndex, bool Send)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SendToPlayer");

	Params::SnapNetEntityComponent_SendToPlayer Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.Send = Send;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SetInstantReplayBehavior
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// ESnapNetEntityInstantReplayBehavior     Behavior                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityComponent::SetInstantReplayBehavior(ESnapNetEntityInstantReplayBehavior Behavior)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SetInstantReplayBehavior");

	Params::SnapNetEntityComponent_SetInstantReplayBehavior Parms{};

	Parms.Behavior = Behavior;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SetOwnerPlayerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetEntityComponent::SetOwnerPlayerIndex(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SetOwnerPlayerIndex");

	Params::SnapNetEntityComponent_SetOwnerPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.SetPredictedForAllPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Predicted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityComponent::SetPredictedForAllPlayers(bool Predicted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SetPredictedForAllPlayers");

	Params::SnapNetEntityComponent_SetPredictedForAllPlayers Parms{};

	Parms.Predicted = Predicted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SetPredictedForPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Predicted                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityComponent::SetPredictedForPlayer(int32 PlayerIndex, bool Predicted)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SetPredictedForPlayer");

	Params::SnapNetEntityComponent_SetPredictedForPlayer Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.Predicted = Predicted;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.SetRequiresOwnerInput
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    RequiresOwnerInput_0                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityComponent::SetRequiresOwnerInput(bool RequiresOwnerInput_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "SetRequiresOwnerInput");

	Params::SnapNetEntityComponent_SetRequiresOwnerInput Parms{};

	Parms.RequiresOwnerInput_0 = RequiresOwnerInput_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityComponent.GeneratePerFrameSeed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   FixedSeed                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetEntityComponent::GeneratePerFrameSeed(int32 FixedSeed) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "GeneratePerFrameSeed");

	Params::SnapNetEntityComponent_GeneratePerFrameSeed Parms{};

	Parms.FixedSeed = FixedSeed;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.GetEntityRendererClass
// (Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSoftClassPtr<class UClass>             ReturnValue                                            (Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSoftClassPtr<class UClass> USnapNetEntityComponent::GetEntityRendererClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "GetEntityRendererClass");

	Params::SnapNetEntityComponent_GetEntityRendererClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.GetOwnerPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetEntityComponent::GetOwnerPlayerIndex() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "GetOwnerPlayerIndex");

	Params::SnapNetEntityComponent_GetOwnerPlayerIndex Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.GetTimeMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetEntityComponent::GetTimeMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "GetTimeMilliseconds");

	Params::SnapNetEntityComponent_GetTimeMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.HasSimulatedState
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetEntityComponent::HasSimulatedState() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "HasSimulatedState");

	Params::SnapNetEntityComponent_HasSimulatedState Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.IsOwnerPlayerLocal
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetEntityComponent::IsOwnerPlayerLocal() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "IsOwnerPlayerLocal");

	Params::SnapNetEntityComponent_IsOwnerPlayerLocal Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityComponent.IsSimulated
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetEntityComponent::IsSimulated() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityComponent", "IsSimulated");

	Params::SnapNetEntityComponent_IsSimulated Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetRewindAsyncAction.RewindSimulation
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USnapNetEntityComponent*          EntityComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetRewindAsyncAction*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetRewindAsyncAction* USnapNetRewindAsyncAction::RewindSimulation(class USnapNetEntityComponent* EntityComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetRewindAsyncAction", "RewindSimulation");

	Params::SnapNetRewindAsyncAction_RewindSimulation Parms{};

	Parms.EntityComponent = EntityComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetRewindAsyncAction.RewindSimulationSubset
// (Final, Native, Static, Public, BlueprintCallable)
// Parameters:
// class USnapNetEntityComponent*          EntityComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// TArray<int32>                           EntityIndicesToRewind                                  (Parm, ZeroConstructor, NativeAccessSpecifierPublic)
// class USnapNetRewindAsyncAction*        ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetRewindAsyncAction* USnapNetRewindAsyncAction::RewindSimulationSubset(class USnapNetEntityComponent* EntityComponent, const TArray<int32>& EntityIndicesToRewind)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetRewindAsyncAction", "RewindSimulationSubset");

	Params::SnapNetRewindAsyncAction_RewindSimulationSubset Parms{};

	Parms.EntityComponent = EntityComponent;
	Parms.EntityIndicesToRewind = std::move(EntityIndicesToRewind);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityRendererComponent.SetPredictionErrorReductionRate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PredictionErrorReductionRate_0                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityRendererComponent::SetPredictionErrorReductionRate(float PredictionErrorReductionRate_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityRendererComponent", "SetPredictionErrorReductionRate");

	Params::SnapNetEntityRendererComponent_SetPredictionErrorReductionRate Parms{};

	Parms.PredictionErrorReductionRate_0 = PredictionErrorReductionRate_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityRendererComponent.SetPredictionErrorThreshold
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// float                                   PredictionErrorThreshold_0                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetEntityRendererComponent::SetPredictionErrorThreshold(float PredictionErrorThreshold_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityRendererComponent", "SetPredictionErrorThreshold");

	Params::SnapNetEntityRendererComponent_SetPredictionErrorThreshold Parms{};

	Parms.PredictionErrorThreshold_0 = PredictionErrorThreshold_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetEntityRendererComponent.GetPositionSmoothingRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetEntityRendererComponent::GetPositionSmoothingRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityRendererComponent", "GetPositionSmoothingRate");

	Params::SnapNetEntityRendererComponent_GetPositionSmoothingRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEntityRendererComponent.GetRotationSmoothingRate
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetEntityRendererComponent::GetRotationSmoothingRate() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEntityRendererComponent", "GetRotationSmoothingRate");

	Params::SnapNetEntityRendererComponent_GetRotationSmoothingRate Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetEvent.BlueprintOnCanceled
// (Event, Protected, BlueprintEvent)

void USnapNetEvent::BlueprintOnCanceled()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEvent", "BlueprintOnCanceled");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnapNet.SnapNetEvent.BlueprintOnConfirmed
// (Event, Protected, BlueprintEvent)

void USnapNetEvent::BlueprintOnConfirmed()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEvent", "BlueprintOnConfirmed");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnapNet.SnapNetEvent.BlueprintOnFirstTriggered
// (Event, Protected, BlueprintEvent)

void USnapNetEvent::BlueprintOnFirstTriggered()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEvent", "BlueprintOnFirstTriggered");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnapNet.SnapNetEvent.BlueprintOnPredicted
// (Event, Protected, BlueprintEvent)

void USnapNetEvent::BlueprintOnPredicted()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetEvent", "BlueprintOnPredicted");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnapNet.SnapNetGameInstance.AdvanceSingleSnapNetFrame
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::AdvanceSingleSnapNetFrame(int32 Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "AdvanceSingleSnapNetFrame");

	Params::SnapNetGameInstance_AdvanceSingleSnapNetFrame Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.ConnectSnapNetClient
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           URL                                                    (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::ConnectSnapNetClient(const class FString& URL)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "ConnectSnapNetClient");

	Params::SnapNetGameInstance_ConnectSnapNetClient Parms{};

	Parms.URL = std::move(URL);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.PlaySnapNetReplay
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::PlaySnapNetReplay(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "PlaySnapNetReplay");

	Params::SnapNetGameInstance_PlaySnapNetReplay Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.SaveSnapNetReplay
// (Final, Exec, Native, Public)
// Parameters:
// class FString                           Name_0                                                 (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::SaveSnapNetReplay(const class FString& Name_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "SaveSnapNetReplay");

	Params::SnapNetGameInstance_SaveSnapNetReplay Parms{};

	Parms.Name_0 = std::move(Name_0);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.SeekSnapNetReplay
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   Time                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::SeekSnapNetReplay(int32 Time)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "SeekSnapNetReplay");

	Params::SnapNetGameInstance_SeekSnapNetReplay Parms{};

	Parms.Time = Time;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.SpectateSnapNetReplay
// (Final, Exec, Native, Public)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetGameInstance::SpectateSnapNetReplay(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "SpectateSnapNetReplay");

	Params::SnapNetGameInstance_SpectateSnapNetReplay Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.StartSnapNetPacketCapture
// (Final, Exec, Native, Public)

void USnapNetGameInstance::StartSnapNetPacketCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "StartSnapNetPacketCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.StartSnapNetReplayRecording
// (Final, Exec, Native, Public)

void USnapNetGameInstance::StartSnapNetReplayRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "StartSnapNetReplayRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.StopSnapNetPacketCapture
// (Final, Exec, Native, Public)

void USnapNetGameInstance::StopSnapNetPacketCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "StopSnapNetPacketCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetGameInstance.StopSnapNetReplayRecording
// (Final, Exec, Native, Public)

void USnapNetGameInstance::StopSnapNetReplayRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetGameInstance", "StopSnapNetReplayRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetPlayerJoinRequest.BlueprintPopulate
// (Event, Protected, BlueprintEvent)
// Parameters:
// class APlayerController*                LocalPlayerController                                  (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPlayerJoinRequest::BlueprintPopulate(class APlayerController* LocalPlayerController)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetPlayerJoinRequest", "BlueprintPopulate");

	Params::SnapNetPlayerJoinRequest_BlueprintPopulate Parms{};

	Parms.LocalPlayerController = LocalPlayerController;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetPlayerJoinRequest.CompletePlayerJoin
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ErrorCode                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPlayerJoinRequest::CompletePlayerJoin(int32 ErrorCode)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetPlayerJoinRequest", "CompletePlayerJoin");

	Params::SnapNetPlayerJoinRequest_CompletePlayerJoin Parms{};

	Parms.ErrorCode = ErrorCode;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetPropertyBooleanFunctionLibrary.Conv_SnapNetPropertyBooleanToBool
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyBoolean          SnapNetPropertyBoolean                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetPropertyBooleanFunctionLibrary::Conv_SnapNetPropertyBooleanToBool(const struct FSnapNetPropertyBoolean& SnapNetPropertyBoolean)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyBooleanFunctionLibrary", "Conv_SnapNetPropertyBooleanToBool");

	Params::SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool Parms{};

	Parms.SnapNetPropertyBoolean = std::move(SnapNetPropertyBoolean);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyBooleanFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyBoolean          SnapNetPropertyBoolean                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// bool                                    Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyBooleanFunctionLibrary::SetValue(struct FSnapNetPropertyBoolean& SnapNetPropertyBoolean, bool Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyBooleanFunctionLibrary", "SetValue");

	Params::SnapNetPropertyBooleanFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyBoolean = std::move(SnapNetPropertyBoolean);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyBoolean = std::move(Parms.SnapNetPropertyBoolean);
}


// Function SnapNet.SnapNetPropertyClientIndexFunctionLibrary.Conv_SnapNetPropertyClientIndexToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyClientIndex      SnapNetPropertyClientIndex                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetPropertyClientIndexFunctionLibrary::Conv_SnapNetPropertyClientIndexToInt(const struct FSnapNetPropertyClientIndex& SnapNetPropertyClientIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyClientIndexFunctionLibrary", "Conv_SnapNetPropertyClientIndexToInt");

	Params::SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt Parms{};

	Parms.SnapNetPropertyClientIndex = std::move(SnapNetPropertyClientIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyClientIndexFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyClientIndex      SnapNetPropertyClientIndex                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyClientIndexFunctionLibrary::SetValue(struct FSnapNetPropertyClientIndex& SnapNetPropertyClientIndex, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyClientIndexFunctionLibrary", "SetValue");

	Params::SnapNetPropertyClientIndexFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyClientIndex = std::move(SnapNetPropertyClientIndex);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyClientIndex = std::move(Parms.SnapNetPropertyClientIndex);
}


// Function SnapNet.SnapNetPropertyDoubleFunctionLibrary.Conv_SnapNetPropertyDoubleToDouble
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyDouble           SnapNetPropertyDouble                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double                                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

double USnapNetPropertyDoubleFunctionLibrary::Conv_SnapNetPropertyDoubleToDouble(const struct FSnapNetPropertyDouble& SnapNetPropertyDouble)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyDoubleFunctionLibrary", "Conv_SnapNetPropertyDoubleToDouble");

	Params::SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble Parms{};

	Parms.SnapNetPropertyDouble = std::move(SnapNetPropertyDouble);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyDoubleFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyDouble           SnapNetPropertyDouble                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// double                                  Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyDoubleFunctionLibrary::SetValue(struct FSnapNetPropertyDouble& SnapNetPropertyDouble, double Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyDoubleFunctionLibrary", "SetValue");

	Params::SnapNetPropertyDoubleFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyDouble = std::move(SnapNetPropertyDouble);
	Parms.Value = Value;
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyDouble = std::move(Parms.SnapNetPropertyDouble);
}


// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.Conv_SnapNetPropertyEntityIndexToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyEntityIndex      SnapNetPropertyEntityIndex                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetPropertyEntityIndexFunctionLibrary::Conv_SnapNetPropertyEntityIndexToInt(const struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEntityIndexFunctionLibrary", "Conv_SnapNetPropertyEntityIndexToInt");

	Params::SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt Parms{};

	Parms.SnapNetPropertyEntityIndex = std::move(SnapNetPropertyEntityIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.GetEntityComponent
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyEntityIndex      SnapNetPropertyEntityIndex                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USnapNetSimulation*               Simulation                                             (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEntityComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetEntityComponent* USnapNetPropertyEntityIndexFunctionLibrary::GetEntityComponent(const struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, class USnapNetSimulation* Simulation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEntityIndexFunctionLibrary", "GetEntityComponent");

	Params::SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent Parms{};

	Parms.SnapNetPropertyEntityIndex = std::move(SnapNetPropertyEntityIndex);
	Parms.Simulation = Simulation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyEntityIndex      SnapNetPropertyEntityIndex                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyEntityIndexFunctionLibrary::SetValue(struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEntityIndexFunctionLibrary", "SetValue");

	Params::SnapNetPropertyEntityIndexFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyEntityIndex = std::move(SnapNetPropertyEntityIndex);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyEntityIndex = std::move(Parms.SnapNetPropertyEntityIndex);
}


// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.SetValueByEntityReference
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyEntityIndex      SnapNetPropertyEntityIndex                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class USnapNetEntityComponent*          EntityComponent                                        (Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyEntityIndexFunctionLibrary::SetValueByEntityReference(struct FSnapNetPropertyEntityIndex& SnapNetPropertyEntityIndex, class USnapNetEntityComponent* EntityComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEntityIndexFunctionLibrary", "SetValueByEntityReference");

	Params::SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference Parms{};

	Parms.SnapNetPropertyEntityIndex = std::move(SnapNetPropertyEntityIndex);
	Parms.EntityComponent = EntityComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyEntityIndex = std::move(Parms.SnapNetPropertyEntityIndex);
}


// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.Conv_SnapNetPropertyEnumToByte
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyEnum             SnapNetPropertyEnum                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

uint8 USnapNetPropertyEnumFunctionLibrary::Conv_SnapNetPropertyEnumToByte(const struct FSnapNetPropertyEnum& SnapNetPropertyEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEnumFunctionLibrary", "Conv_SnapNetPropertyEnumToByte");

	Params::SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte Parms{};

	Parms.SnapNetPropertyEnum = std::move(SnapNetPropertyEnum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.Conv_SnapNetPropertyEnumToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyEnum             SnapNetPropertyEnum                                    (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetPropertyEnumFunctionLibrary::Conv_SnapNetPropertyEnumToInt(const struct FSnapNetPropertyEnum& SnapNetPropertyEnum)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEnumFunctionLibrary", "Conv_SnapNetPropertyEnumToInt");

	Params::SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt Parms{};

	Parms.SnapNetPropertyEnum = std::move(SnapNetPropertyEnum);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.SetValueByte
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyEnum             SnapNetPropertyEnum                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// uint8                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyEnumFunctionLibrary::SetValueByte(struct FSnapNetPropertyEnum& SnapNetPropertyEnum, uint8 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEnumFunctionLibrary", "SetValueByte");

	Params::SnapNetPropertyEnumFunctionLibrary_SetValueByte Parms{};

	Parms.SnapNetPropertyEnum = std::move(SnapNetPropertyEnum);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyEnum = std::move(Parms.SnapNetPropertyEnum);
}


// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.SetValueInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyEnum             SnapNetPropertyEnum                                    (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyEnumFunctionLibrary::SetValueInt(struct FSnapNetPropertyEnum& SnapNetPropertyEnum, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyEnumFunctionLibrary", "SetValueInt");

	Params::SnapNetPropertyEnumFunctionLibrary_SetValueInt Parms{};

	Parms.SnapNetPropertyEnum = std::move(SnapNetPropertyEnum);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyEnum = std::move(Parms.SnapNetPropertyEnum);
}


// Function SnapNet.SnapNetPropertyFloatFunctionLibrary.Conv_SnapNetPropertyFloatToFloat
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyFloat            SnapNetPropertyFloat                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetPropertyFloatFunctionLibrary::Conv_SnapNetPropertyFloatToFloat(const struct FSnapNetPropertyFloat& SnapNetPropertyFloat)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyFloatFunctionLibrary", "Conv_SnapNetPropertyFloatToFloat");

	Params::SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat Parms{};

	Parms.SnapNetPropertyFloat = std::move(SnapNetPropertyFloat);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyFloatFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyFloat            SnapNetPropertyFloat                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// float                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyFloatFunctionLibrary::SetValue(struct FSnapNetPropertyFloat& SnapNetPropertyFloat, float Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyFloatFunctionLibrary", "SetValue");

	Params::SnapNetPropertyFloatFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyFloat = std::move(SnapNetPropertyFloat);
	Parms.Value = Value;
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyFloat = std::move(Parms.SnapNetPropertyFloat);
}


// Function SnapNet.SnapNetPropertyInt32FunctionLibrary.Conv_SnapNetPropertyInt32ToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyInt32            SnapNetPropertyInt32                                   (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetPropertyInt32FunctionLibrary::Conv_SnapNetPropertyInt32ToInt(const struct FSnapNetPropertyInt32& SnapNetPropertyInt32)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyInt32FunctionLibrary", "Conv_SnapNetPropertyInt32ToInt");

	Params::SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt Parms{};

	Parms.SnapNetPropertyInt32 = std::move(SnapNetPropertyInt32);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyInt32FunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyInt32            SnapNetPropertyInt32                                   (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyInt32FunctionLibrary::SetValue(struct FSnapNetPropertyInt32& SnapNetPropertyInt32, int32 Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyInt32FunctionLibrary", "SetValue");

	Params::SnapNetPropertyInt32FunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyInt32 = std::move(SnapNetPropertyInt32);
	Parms.Value = Value;
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyInt32 = std::move(Parms.SnapNetPropertyInt32);
}


// Function SnapNet.SnapNetPropertyPlayerIndexFunctionLibrary.Conv_SnapNetPropertyPlayerIndexToInt
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyPlayerIndex      SnapNetPropertyPlayerIndex                             (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetPropertyPlayerIndexFunctionLibrary::Conv_SnapNetPropertyPlayerIndexToInt(const struct FSnapNetPropertyPlayerIndex& SnapNetPropertyPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyPlayerIndexFunctionLibrary", "Conv_SnapNetPropertyPlayerIndexToInt");

	Params::SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt Parms{};

	Parms.SnapNetPropertyPlayerIndex = std::move(SnapNetPropertyPlayerIndex);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyPlayerIndexFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyPlayerIndex      SnapNetPropertyPlayerIndex                             (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// int32                                   Value                                                  (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyPlayerIndexFunctionLibrary::SetValue(struct FSnapNetPropertyPlayerIndex& SnapNetPropertyPlayerIndex, int32 Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyPlayerIndexFunctionLibrary", "SetValue");

	Params::SnapNetPropertyPlayerIndexFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyPlayerIndex = std::move(SnapNetPropertyPlayerIndex);
	Parms.Value = Value;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyPlayerIndex = std::move(Parms.SnapNetPropertyPlayerIndex);
}


// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.GetObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyPrimaryAsset     SnapNetPropertyPrimaryAsset                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USnapNetPropertyPrimaryAssetFunctionLibrary::GetObject(const struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyPrimaryAssetFunctionLibrary", "GetObject");

	Params::SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject Parms{};

	Parms.SnapNetPropertyPrimaryAsset = std::move(SnapNetPropertyPrimaryAsset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.GetValue_GetPrimaryAssetId
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyPrimaryAsset     SnapNetPropertyPrimaryAsset                            (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FPrimaryAssetId USnapNetPropertyPrimaryAssetFunctionLibrary::GetValue_GetPrimaryAssetId(const struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyPrimaryAssetFunctionLibrary", "GetValue_GetPrimaryAssetId");

	Params::SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId Parms{};

	Parms.SnapNetPropertyPrimaryAsset = std::move(SnapNetPropertyPrimaryAsset);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.SetPrimaryAssetId
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyPrimaryAsset     SnapNetPropertyPrimaryAsset                            (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FPrimaryAssetId                  PrimaryAssetId                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyPrimaryAssetFunctionLibrary::SetPrimaryAssetId(struct FSnapNetPropertyPrimaryAsset& SnapNetPropertyPrimaryAsset, const struct FPrimaryAssetId& PrimaryAssetId)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyPrimaryAssetFunctionLibrary", "SetPrimaryAssetId");

	Params::SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId Parms{};

	Parms.SnapNetPropertyPrimaryAsset = std::move(SnapNetPropertyPrimaryAsset);
	Parms.PrimaryAssetId = std::move(PrimaryAssetId);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyPrimaryAsset = std::move(Parms.SnapNetPropertyPrimaryAsset);
}


// Function SnapNet.SnapNetPropertyQuaternionFunctionLibrary.Conv_SnapNetPropertyQuaternionToQuat
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyQuaternion       SnapNetPropertyQuaternion                              (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FQuat                            ReturnValue                                            (Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FQuat USnapNetPropertyQuaternionFunctionLibrary::Conv_SnapNetPropertyQuaternionToQuat(const struct FSnapNetPropertyQuaternion& SnapNetPropertyQuaternion)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyQuaternionFunctionLibrary", "Conv_SnapNetPropertyQuaternionToQuat");

	Params::SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat Parms{};

	Parms.SnapNetPropertyQuaternion = std::move(SnapNetPropertyQuaternion);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyQuaternionFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyQuaternion       SnapNetPropertyQuaternion                              (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FQuat                            Value                                                  (ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyQuaternionFunctionLibrary::SetValue(struct FSnapNetPropertyQuaternion& SnapNetPropertyQuaternion, const struct FQuat& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyQuaternionFunctionLibrary", "SetValue");

	Params::SnapNetPropertyQuaternionFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyQuaternion = std::move(SnapNetPropertyQuaternion);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyQuaternion = std::move(Parms.SnapNetPropertyQuaternion);
}


// Function SnapNet.SnapNetPropertyRotatorFunctionLibrary.Conv_SnapNetPropertyRotatorToRotator
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyRotator          SnapNetPropertyRotator                                 (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRotator                         ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

struct FRotator USnapNetPropertyRotatorFunctionLibrary::Conv_SnapNetPropertyRotatorToRotator(const struct FSnapNetPropertyRotator& SnapNetPropertyRotator)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyRotatorFunctionLibrary", "Conv_SnapNetPropertyRotatorToRotator");

	Params::SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator Parms{};

	Parms.SnapNetPropertyRotator = std::move(SnapNetPropertyRotator);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyRotatorFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyRotator          SnapNetPropertyRotator                                 (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FRotator                         Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyRotatorFunctionLibrary::SetValue(struct FSnapNetPropertyRotator& SnapNetPropertyRotator, const struct FRotator& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyRotatorFunctionLibrary", "SetValue");

	Params::SnapNetPropertyRotatorFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyRotator = std::move(SnapNetPropertyRotator);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyRotator = std::move(Parms.SnapNetPropertyRotator);
}


// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.Conv_SnapNetPropertySoftObjectPathToSoftObjectPath
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertySoftObjectPath   SnapNetPropertySoftObjectPath                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// const struct FSoftObjectPath            ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const struct FSoftObjectPath USnapNetPropertySoftObjectPathFunctionLibrary::Conv_SnapNetPropertySoftObjectPathToSoftObjectPath(const struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertySoftObjectPathFunctionLibrary", "Conv_SnapNetPropertySoftObjectPathToSoftObjectPath");

	Params::SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath Parms{};

	Parms.SnapNetPropertySoftObjectPath = std::move(SnapNetPropertySoftObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.ResolveObject
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertySoftObjectPath   SnapNetPropertySoftObjectPath                          (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class UObject*                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class UObject* USnapNetPropertySoftObjectPathFunctionLibrary::ResolveObject(const struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertySoftObjectPathFunctionLibrary", "ResolveObject");

	Params::SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject Parms{};

	Parms.SnapNetPropertySoftObjectPath = std::move(SnapNetPropertySoftObjectPath);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertySoftObjectPath   SnapNetPropertySoftObjectPath                          (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FSoftObjectPath                  Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertySoftObjectPathFunctionLibrary::SetValue(struct FSnapNetPropertySoftObjectPath& SnapNetPropertySoftObjectPath, const struct FSoftObjectPath& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertySoftObjectPathFunctionLibrary", "SetValue");

	Params::SnapNetPropertySoftObjectPathFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertySoftObjectPath = std::move(SnapNetPropertySoftObjectPath);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertySoftObjectPath = std::move(Parms.SnapNetPropertySoftObjectPath);
}


// Function SnapNet.SnapNetPropertyStringFunctionLibrary.Conv_SnapNetPropertyStringToString
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyString           SnapNetPropertyString                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USnapNetPropertyStringFunctionLibrary::Conv_SnapNetPropertyStringToString(const struct FSnapNetPropertyString& SnapNetPropertyString)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyStringFunctionLibrary", "Conv_SnapNetPropertyStringToString");

	Params::SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString Parms{};

	Parms.SnapNetPropertyString = std::move(SnapNetPropertyString);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyStringFunctionLibrary.SetValue
// (Final, Native, Static, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyString           SnapNetPropertyString                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyStringFunctionLibrary::SetValue(struct FSnapNetPropertyString& SnapNetPropertyString, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyStringFunctionLibrary", "SetValue");

	Params::SnapNetPropertyStringFunctionLibrary_SetValue Parms{};

	Parms.SnapNetPropertyString = std::move(SnapNetPropertyString);
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyString = std::move(Parms.SnapNetPropertyString);
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyAngularVelocityToVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyAngularVelocity  SnapNetPropertyAngularVelocity                         (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USnapNetPropertyVectorFunctionLibrary::Conv_SnapNetPropertyAngularVelocityToVector(const struct FSnapNetPropertyAngularVelocity& SnapNetPropertyAngularVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "Conv_SnapNetPropertyAngularVelocityToVector");

	Params::SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector Parms{};

	Parms.SnapNetPropertyAngularVelocity = std::move(SnapNetPropertyAngularVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyPositionToVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyPosition         SnapNetPropertyPosition                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USnapNetPropertyVectorFunctionLibrary::Conv_SnapNetPropertyPositionToVector(const struct FSnapNetPropertyPosition& SnapNetPropertyPosition)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "Conv_SnapNetPropertyPositionToVector");

	Params::SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector Parms{};

	Parms.SnapNetPropertyPosition = std::move(SnapNetPropertyPosition);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyVectorToVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyVector           SnapNetPropertyVector                                  (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USnapNetPropertyVectorFunctionLibrary::Conv_SnapNetPropertyVectorToVector(const struct FSnapNetPropertyVector& SnapNetPropertyVector)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "Conv_SnapNetPropertyVectorToVector");

	Params::SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector Parms{};

	Parms.SnapNetPropertyVector = std::move(SnapNetPropertyVector);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyVelocityToVector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintPure)
// Parameters:
// struct FSnapNetPropertyVelocity         SnapNetPropertyVelocity                                (ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

struct FVector USnapNetPropertyVectorFunctionLibrary::Conv_SnapNetPropertyVelocityToVector(const struct FSnapNetPropertyVelocity& SnapNetPropertyVelocity)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "Conv_SnapNetPropertyVelocityToVector");

	Params::SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector Parms{};

	Parms.SnapNetPropertyVelocity = std::move(SnapNetPropertyVelocity);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_AngularVelocity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyAngularVelocity  SnapNetPropertyAngularVelocity                         (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyVectorFunctionLibrary::SetValue_AngularVelocity(struct FSnapNetPropertyAngularVelocity& SnapNetPropertyAngularVelocity, const struct FVector& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "SetValue_AngularVelocity");

	Params::SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity Parms{};

	Parms.SnapNetPropertyAngularVelocity = std::move(SnapNetPropertyAngularVelocity);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyAngularVelocity = std::move(Parms.SnapNetPropertyAngularVelocity);
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Position
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyPosition         SnapNetPropertyPosition                                (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyVectorFunctionLibrary::SetValue_Position(struct FSnapNetPropertyPosition& SnapNetPropertyPosition, const struct FVector& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "SetValue_Position");

	Params::SnapNetPropertyVectorFunctionLibrary_SetValue_Position Parms{};

	Parms.SnapNetPropertyPosition = std::move(SnapNetPropertyPosition);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyPosition = std::move(Parms.SnapNetPropertyPosition);
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Vector
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyVector           SnapNetPropertyVector                                  (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyVectorFunctionLibrary::SetValue_Vector(struct FSnapNetPropertyVector& SnapNetPropertyVector, const struct FVector& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "SetValue_Vector");

	Params::SnapNetPropertyVectorFunctionLibrary_SetValue_Vector Parms{};

	Parms.SnapNetPropertyVector = std::move(SnapNetPropertyVector);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyVector = std::move(Parms.SnapNetPropertyVector);
}


// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Velocity
// (Final, Native, Static, Public, HasOutParams, HasDefaults, BlueprintCallable)
// Parameters:
// struct FSnapNetPropertyVelocity         SnapNetPropertyVelocity                                (Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
// struct FVector                          Value                                                  (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// ESnapNetInterpolation                   Interpolation                                          (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetPropertyVectorFunctionLibrary::SetValue_Velocity(struct FSnapNetPropertyVelocity& SnapNetPropertyVelocity, const struct FVector& Value, ESnapNetInterpolation Interpolation)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetPropertyVectorFunctionLibrary", "SetValue_Velocity");

	Params::SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity Parms{};

	Parms.SnapNetPropertyVelocity = std::move(SnapNetPropertyVelocity);
	Parms.Value = std::move(Value);
	Parms.Interpolation = Interpolation;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	SnapNetPropertyVelocity = std::move(Parms.SnapNetPropertyVelocity);
}


// Function SnapNet.SnapNetReliableMessage.BlueprintOnReceivedFromClient
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetReliableMessage::BlueprintOnReceivedFromClient(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetReliableMessage", "BlueprintOnReceivedFromClient");

	Params::SnapNetReliableMessage_BlueprintOnReceivedFromClient Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetReliableMessage.BlueprintOnReceivedFromServer
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   LocalPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetReliableMessage::BlueprintOnReceivedFromServer(int32 LocalPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetReliableMessage", "BlueprintOnReceivedFromServer");

	Params::SnapNetReliableMessage_BlueprintOnReceivedFromServer Parms{};

	Parms.LocalPlayerIndex = LocalPlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetServer.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetServer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetServer* USnapNetServer::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetServer", "Get");

	Params::SnapNetServer_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.ForceNewBaseline
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::ForceNewBaseline()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "ForceNewBaseline");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.RegisterString
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FName                             StringPoolName                                         (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::RegisterString(class FName StringPoolName, const class FString& Value)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "RegisterString");

	Params::SnapNetServer_RegisterString Parms{};

	Parms.StringPoolName = StringPoolName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.RemovePlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::RemovePlayer(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "RemovePlayer");

	Params::SnapNetServer_RemovePlayer Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SaveInstantReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SaveInstantReplay(int32 SlotIndex, int32 StartTime, int32 EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SaveInstantReplay");

	Params::SnapNetServer_SaveInstantReplay Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SaveReplayFile
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// class FString                           Filename                                               (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SaveReplayFile(const class FString& Filename)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SaveReplayFile");

	Params::SnapNetServer_SaveReplayFile Parms{};

	Parms.Filename = std::move(Filename);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SendEntityToAllPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SendEntityToAllPlayers(int32 EntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SendEntityToAllPlayers");

	Params::SnapNetServer_SendEntityToAllPlayers Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SendEntityToNoPlayers
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SendEntityToNoPlayers(int32 EntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SendEntityToNoPlayers");

	Params::SnapNetServer_SendEntityToNoPlayers Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SendEntityToPlayer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    Send                                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SendEntityToPlayer(int32 EntityIndex, int32 PlayerIndex, bool Send)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SendEntityToPlayer");

	Params::SnapNetServer_SendEntityToPlayer Parms{};

	Parms.EntityIndex = EntityIndex;
	Parms.PlayerIndex = PlayerIndex;
	Parms.Send = Send;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SendReliableMessage
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetReliableMessage*          Message                                                (Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SendReliableMessage(int32 PlayerIndex, class USnapNetReliableMessage* Message)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SendReliableMessage");

	Params::SnapNetServer_SendReliableMessage Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.Message = Message;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SetPacketCodecClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetPacketCodec>  PacketCodecClass                                       (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SetPacketCodecClass(TSubclassOf<class USnapNetPacketCodec> PacketCodecClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SetPacketCodecClass");

	Params::SnapNetServer_SetPacketCodecClass Parms{};

	Parms.PacketCodecClass = PacketCodecClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SetSpectatedPlayerIndex
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpectatedPlayerIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SetSpectatedPlayerIndex(int32 PlayerIndex, int32 SpectatedPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SetSpectatedPlayerIndex");

	Params::SnapNetServer_SetSpectatedPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.SpectatedPlayerIndex = SpectatedPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.SetTransportClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetTransport>    TransportClass                                         (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::SetTransportClass(TSubclassOf<class USnapNetTransport> TransportClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "SetTransportClass");

	Params::SnapNetServer_SetTransportClass Parms{};

	Parms.TransportClass = TransportClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StartInstantReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpectatedPlayerIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ContextEntityIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StartTime                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   EndTime                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::StartInstantReplay(int32 ClientIndex, int32 SpectatedPlayerIndex, int32 ContextEntityIndex, int32 StartTime, int32 EndTime)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StartInstantReplay");

	Params::SnapNetServer_StartInstantReplay Parms{};

	Parms.ClientIndex = ClientIndex;
	Parms.SpectatedPlayerIndex = SpectatedPlayerIndex;
	Parms.ContextEntityIndex = ContextEntityIndex;
	Parms.StartTime = StartTime;
	Parms.EndTime = EndTime;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StartPacketCapture
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::StartPacketCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StartPacketCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StartReplayRecording
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::StartReplayRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StartReplayRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StartSavedInstantReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   SlotIndex                                              (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   SpectatedPlayerIndex                                   (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ContextEntityIndex                                     (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::StartSavedInstantReplay(int32 SlotIndex, int32 ClientIndex, int32 SpectatedPlayerIndex, int32 ContextEntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StartSavedInstantReplay");

	Params::SnapNetServer_StartSavedInstantReplay Parms{};

	Parms.SlotIndex = SlotIndex;
	Parms.ClientIndex = ClientIndex;
	Parms.SpectatedPlayerIndex = SpectatedPlayerIndex;
	Parms.ContextEntityIndex = ContextEntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StartServer
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetServerScript> ServerScriptClass                                      (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::StartServer(TSubclassOf<class USnapNetServerScript> ServerScriptClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StartServer");

	Params::SnapNetServer_StartServer Parms{};

	Parms.ServerScriptClass = ServerScriptClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StopInstantReplay
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServer::StopInstantReplay(int32 ClientIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StopInstantReplay");

	Params::SnapNetServer_StopInstantReplay Parms{};

	Parms.ClientIndex = ClientIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StopPacketCapture
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::StopPacketCapture()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StopPacketCapture");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StopReplayRecording
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::StopReplayRecording()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StopReplayRecording");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.StopServer
// (Final, Native, Public, BlueprintCallable)

void USnapNetServer::StopServer()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "StopServer");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetServer.DoesEntityRequireOwnerInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::DoesEntityRequireOwnerInput(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "DoesEntityRequireOwnerInput");

	Params::SnapNetServer_DoesEntityRequireOwnerInput Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetClientIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::GetClientIndex(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetClientIndex");

	Params::SnapNetServer_GetClientIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetPacketCodec
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetPacketCodec*              ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetPacketCodec* USnapNetServer::GetPacketCodec() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetPacketCodec");

	Params::SnapNetServer_GetPacketCodec Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetPacketLatencySeconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetServer::GetPacketLatencySeconds(int32 ClientIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetPacketLatencySeconds");

	Params::SnapNetServer_GetPacketLatencySeconds Parms{};

	Parms.ClientIndex = ClientIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   LocalPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::GetPlayerIndex(int32 ClientIndex, int32 LocalPlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetPlayerIndex");

	Params::SnapNetServer_GetPlayerIndex Parms{};

	Parms.ClientIndex = ClientIndex;
	Parms.LocalPlayerIndex = LocalPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetPlayerInterpolationTimeMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::GetPlayerInterpolationTimeMilliseconds(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetPlayerInterpolationTimeMilliseconds");

	Params::SnapNetServer_GetPlayerInterpolationTimeMilliseconds Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetServerScript
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetServerScript*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetServerScript* USnapNetServer::GetServerScript() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetServerScript");

	Params::SnapNetServer_GetServerScript Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetSimulation
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetSimulation*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetSimulation* USnapNetServer::GetSimulation() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetSimulation");

	Params::SnapNetServer_GetSimulation Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetSpectatedPlayerIndex
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::GetSpectatedPlayerIndex(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetSpectatedPlayerIndex");

	Params::SnapNetServer_GetSpectatedPlayerIndex Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetTimeMilliseconds
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetServer::GetTimeMilliseconds() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetTimeMilliseconds");

	Params::SnapNetServer_GetTimeMilliseconds Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.GetTransport
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetTransport*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetTransport* USnapNetServer::GetTransport() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "GetTransport");

	Params::SnapNetServer_GetTransport Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsBot
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsBot(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsBot");

	Params::SnapNetServer_IsBot Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsClientConnected
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsClientConnected(int32 ClientIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsClientConnected");

	Params::SnapNetServer_IsClientConnected Parms{};

	Parms.ClientIndex = ClientIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsEntityPredictedForPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsEntityPredictedForPlayer(int32 EntityIndex, int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsEntityPredictedForPlayer");

	Params::SnapNetServer_IsEntityPredictedForPlayer Parms{};

	Parms.EntityIndex = EntityIndex;
	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsEntitySentToPlayer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsEntitySentToPlayer(int32 EntityIndex, int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsEntitySentToPlayer");

	Params::SnapNetServer_IsEntitySentToPlayer Parms{};

	Parms.EntityIndex = EntityIndex;
	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsPlayingInstantReplay
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsPlayingInstantReplay(int32 ClientIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsPlayingInstantReplay");

	Params::SnapNetServer_IsPlayingInstantReplay Parms{};

	Parms.ClientIndex = ClientIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsRewinding
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsRewinding() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsRewinding");

	Params::SnapNetServer_IsRewinding Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServer.IsRunning
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetServer::IsRunning() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServer", "IsRunning");

	Params::SnapNetServer_IsRunning Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServerScript.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetServerScript*             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetServerScript* USnapNetServerScript::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetServerScript", "Get");

	Params::SnapNetServerScript_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetServerScript.BlueprintClientConnected
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServerScript::BlueprintClientConnected(int32 ClientIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintClientConnected");

	Params::SnapNetServerScript_BlueprintClientConnected Parms{};

	Parms.ClientIndex = ClientIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetServerScript.BlueprintClientDisconnected
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   ClientIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServerScript::BlueprintClientDisconnected(int32 ClientIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintClientDisconnected");

	Params::SnapNetServerScript_BlueprintClientDisconnected Parms{};

	Parms.ClientIndex = ClientIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetServerScript.BlueprintPlayerJoined
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServerScript::BlueprintPlayerJoined(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintPlayerJoined");

	Params::SnapNetServerScript_BlueprintPlayerJoined Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetServerScript.BlueprintPlayerRemoved
// (Event, Protected, BlueprintEvent)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServerScript::BlueprintPlayerRemoved(int32 PlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintPlayerRemoved");

	Params::SnapNetServerScript_BlueprintPlayerRemoved Parms{};

	Parms.PlayerIndex = PlayerIndex;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetServerScript.BlueprintStart
// (Event, Protected, BlueprintEvent)

void USnapNetServerScript::BlueprintStart()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintStart");

	UObject::ProcessEvent(Func, nullptr);
}


// Function SnapNet.SnapNetServerScript.BlueprintTick
// (Event, Protected, BlueprintEvent)
// Parameters:
// float                                   DeltaSeconds                                           (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetServerScript::BlueprintTick(float DeltaSeconds)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetServerScript", "BlueprintTick");

	Params::SnapNetServerScript_BlueprintTick Parms{};

	Parms.DeltaSeconds = DeltaSeconds;

	UObject::ProcessEvent(Func, &Parms);
}


// Function SnapNet.SnapNetSimulation.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetSimulation*               ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetSimulation* USnapNetSimulation::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetSimulation", "Get");

	Params::SnapNetSimulation_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.DestroyEntity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSimulation::DestroyEntity(int32 EntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "DestroyEntity");

	Params::SnapNetSimulation_DestroyEntity Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSimulation.RequestEntityRendererUpdate
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSimulation::RequestEntityRendererUpdate(int32 EntityIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "RequestEntityRendererUpdate");

	Params::SnapNetSimulation_RequestEntityRendererUpdate Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSimulation.SpawnEntity
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               EntityClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   OwnerPlayerIndex                                       (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USnapNetSimulation::SpawnEntity(TSubclassOf<class AActor> EntityClass, int32 OwnerPlayerIndex)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "SpawnEntity");

	Params::SnapNetSimulation_SpawnEntity Parms{};

	Parms.EntityClass = EntityClass;
	Parms.OwnerPlayerIndex = OwnerPlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.SpawnEvent
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetEvent>        EventClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEntityComponent*          EntityComponent                                        (ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEvent*                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetEvent* USnapNetSimulation::SpawnEvent(TSubclassOf<class USnapNetEvent> EventClass, const class USnapNetEntityComponent* EntityComponent)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "SpawnEvent");

	Params::SnapNetSimulation_SpawnEvent Parms{};

	Parms.EventClass = EventClass;
	Parms.EntityComponent = EntityComponent;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.FindString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StringPoolName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           Value                                                  (Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetSimulation::FindString(const class FName& StringPoolName, const class FString& Value) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "FindString");

	Params::SnapNetSimulation_FindString Parms{};

	Parms.StringPoolName = StringPoolName;
	Parms.Value = std::move(Value);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetClient*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetClient* USnapNetSimulation::GetClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetClient");

	Params::SnapNetSimulation_GetClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetControlRotation
// (Final, Native, Public, HasDefaults, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const struct FRotator                   ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)

const struct FRotator USnapNetSimulation::GetControlRotation(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetControlRotation");

	Params::SnapNetSimulation_GetControlRotation Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetCustomInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USnapNetCustomInput*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USnapNetCustomInput* USnapNetSimulation::GetCustomInput(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetCustomInput");

	Params::SnapNetSimulation_GetCustomInput Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetEntity
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USnapNetSimulation::GetEntity(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetEntity");

	Params::SnapNetSimulation_GetEntity Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetEntityComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEntityComponent*          ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetEntityComponent* USnapNetSimulation::GetEntityComponent(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetEntityComponent");

	Params::SnapNetSimulation_GetEntityComponent Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetEntityRenderer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEntityRendererComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetEntityRendererComponent* USnapNetSimulation::GetEntityRenderer(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetEntityRenderer");

	Params::SnapNetSimulation_GetEntityRenderer Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetFrameType
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// ESnapNetSimulationFrameType             ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

ESnapNetSimulationFrameType USnapNetSimulation::GetFrameType() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetFrameType");

	Params::SnapNetSimulation_GetFrameType Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetInputAge
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetSimulation::GetInputAge(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetInputAge");

	Params::SnapNetSimulation_GetInputAge Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetInputAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AxisName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetSimulation::GetInputAxis(int32 PlayerIndex, class FName AxisName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetInputAxis");

	Params::SnapNetSimulation_GetInputAxis Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.AxisName = AxisName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetPreviousCustomInput
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// const class USnapNetCustomInput*        ReturnValue                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

const class USnapNetCustomInput* USnapNetSimulation::GetPreviousCustomInput(int32 PlayerIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetPreviousCustomInput");

	Params::SnapNetSimulation_GetPreviousCustomInput Parms{};

	Parms.PlayerIndex = PlayerIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetPreviousInputAxis
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             AxisName                                               (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// float                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

float USnapNetSimulation::GetPreviousInputAxis(int32 PlayerIndex, class FName AxisName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetPreviousInputAxis");

	Params::SnapNetSimulation_GetPreviousInputAxis Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.AxisName = AxisName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetServer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetServer* USnapNetSimulation::GetServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetServer");

	Params::SnapNetSimulation_GetServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetString
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StringPoolName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   StringIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FString                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class FString USnapNetSimulation::GetString(const class FName& StringPoolName, int32 StringIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetString");

	Params::SnapNetSimulation_GetString Parms{};

	Parms.StringPoolName = StringPoolName;
	Parms.StringIndex = StringIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetStringCount
// (Final, Native, Public, HasOutParams, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class FName                             StringPoolName                                         (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// int32                                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

int32 USnapNetSimulation::GetStringCount(const class FName& StringPoolName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetStringCount");

	Params::SnapNetSimulation_GetStringCount Parms{};

	Parms.StringPoolName = StringPoolName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.GetSubsystem
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetSubsystem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetSubsystem* USnapNetSimulation::GetSubsystem() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "GetSubsystem");

	Params::SnapNetSimulation_GetSubsystem Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.IsClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSimulation::IsClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "IsClient");

	Params::SnapNetSimulation_IsClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.IsInputActionDown
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSimulation::IsInputActionDown(int32 PlayerIndex, class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "IsInputActionDown");

	Params::SnapNetSimulation_IsInputActionDown Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.IsServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSimulation::IsServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "IsServer");

	Params::SnapNetSimulation_IsServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.WasInputActionPressed
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSimulation::WasInputActionPressed(int32 PlayerIndex, class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "WasInputActionPressed");

	Params::SnapNetSimulation_WasInputActionPressed Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSimulation.WasInputActionReleased
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   PlayerIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class FName                             ActionName                                             (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSimulation::WasInputActionReleased(int32 PlayerIndex, class FName ActionName) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSimulation", "WasInputActionReleased");

	Params::SnapNetSimulation_WasInputActionReleased Parms{};

	Parms.PlayerIndex = PlayerIndex;
	Parms.ActionName = ActionName;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.Get
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetSubsystem*                ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetSubsystem* USnapNetSubsystem::Get(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetSubsystem", "Get");

	Params::SnapNetSubsystem_Get Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.IsSnapNetClient
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSubsystem::IsSnapNetClient(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetSubsystem", "IsSnapNetClient");

	Params::SnapNetSubsystem_IsSnapNetClient Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.IsSnapNetServer
// (Final, Native, Static, Public, BlueprintCallable, BlueprintPure)
// Parameters:
// class UObject*                          WorldContextObject                                     (ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSubsystem::IsSnapNetServer(const class UObject* WorldContextObject)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("SnapNetSubsystem", "IsSnapNetServer");

	Params::SnapNetSubsystem_IsSnapNetServer Parms{};

	Parms.WorldContextObject = WorldContextObject;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.RegisterClassesFromSettings
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::RegisterClassesFromSettings()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterClassesFromSettings");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterEntityClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class AActor>               EntityClass                                            (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterEntityClass(TSubclassOf<class AActor> EntityClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterEntityClass");

	Params::SnapNetSubsystem_RegisterEntityClass Parms{};

	Parms.EntityClass = EntityClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterEntityClasses
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class AActor>>       EntityClasses                                          (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterEntityClasses(const TArray<TSubclassOf<class AActor>>& EntityClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterEntityClasses");

	Params::SnapNetSubsystem_RegisterEntityClasses Parms{};

	Parms.EntityClasses = std::move(EntityClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterEventClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetEvent>        EventClass                                             (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterEventClass(TSubclassOf<class USnapNetEvent> EventClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterEventClass");

	Params::SnapNetSubsystem_RegisterEventClass Parms{};

	Parms.EventClass = EventClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterEventClasses
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class USnapNetEvent>>EventClasses                                           (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterEventClasses(const TArray<TSubclassOf<class USnapNetEvent>>& EventClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterEventClasses");

	Params::SnapNetSubsystem_RegisterEventClasses Parms{};

	Parms.EventClasses = std::move(EventClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterMap
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSoftObjectPtr<class UWorld>            Map                                                    (Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterMap(TSoftObjectPtr<class UWorld> Map)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterMap");

	Params::SnapNetSubsystem_RegisterMap Parms{};

	Parms.Map = Map;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterMaps
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TArray<TSoftObjectPtr<class UWorld>>    Maps                                                   (Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterMaps(const TArray<TSoftObjectPtr<class UWorld>>& Maps)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterMaps");

	Params::SnapNetSubsystem_RegisterMaps Parms{};

	Parms.Maps = std::move(Maps);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterReliableMessageClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetReliableMessage>ReliableMessageClass                                   (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterReliableMessageClass(TSubclassOf<class USnapNetReliableMessage> ReliableMessageClass)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterReliableMessageClass");

	Params::SnapNetSubsystem_RegisterReliableMessageClass Parms{};

	Parms.ReliableMessageClass = ReliableMessageClass;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterReliableMessageClasses
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<TSubclassOf<class USnapNetReliableMessage>>ReliableMessageClasses                                 (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterReliableMessageClasses(const TArray<TSubclassOf<class USnapNetReliableMessage>>& ReliableMessageClasses)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterReliableMessageClasses");

	Params::SnapNetSubsystem_RegisterReliableMessageClasses Parms{};

	Parms.ReliableMessageClasses = std::move(ReliableMessageClasses);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterStringPool
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// struct FSnapNetStringPool               StringPool                                             (ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterStringPool(const struct FSnapNetStringPool& StringPool)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterStringPool");

	Params::SnapNetSubsystem_RegisterStringPool Parms{};

	Parms.StringPool = std::move(StringPool);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RegisterStringPools
// (Final, Native, Public, HasOutParams, BlueprintCallable)
// Parameters:
// TArray<struct FSnapNetStringPool>       StringPools                                            (ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)

void USnapNetSubsystem::RegisterStringPools(const TArray<struct FSnapNetStringPool>& StringPools)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RegisterStringPools");

	Params::SnapNetSubsystem_RegisterStringPools Parms{};

	Parms.StringPools = std::move(StringPools);

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.RequestFrameAdvance
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::RequestFrameAdvance()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "RequestFrameAdvance");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.SetPlayerJoinRequestClass
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// TSubclassOf<class USnapNetPlayerJoinRequest>PlayerJoinRequestClass_0                               (Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::SetPlayerJoinRequestClass(TSubclassOf<class USnapNetPlayerJoinRequest> PlayerJoinRequestClass_0)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "SetPlayerJoinRequestClass");

	Params::SnapNetSubsystem_SetPlayerJoinRequestClass Parms{};

	Parms.PlayerJoinRequestClass_0 = PlayerJoinRequestClass_0;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.SetSingleFrameAdvanceEnabled
// (Final, Native, Public, BlueprintCallable)
// Parameters:
// bool                                    Enabled                                                (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

void USnapNetSubsystem::SetSingleFrameAdvanceEnabled(bool Enabled)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "SetSingleFrameAdvanceEnabled");

	Params::SnapNetSubsystem_SetSingleFrameAdvanceEnabled Parms{};

	Parms.Enabled = Enabled;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.UnregisterAllEntityClasses
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::UnregisterAllEntityClasses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "UnregisterAllEntityClasses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.UnregisterAllEventClasses
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::UnregisterAllEventClasses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "UnregisterAllEventClasses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.UnregisterAllMaps
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::UnregisterAllMaps()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "UnregisterAllMaps");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.UnregisterAllReliableMessageClasses
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::UnregisterAllReliableMessageClasses()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "UnregisterAllReliableMessageClasses");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.UnregisterAllStringPools
// (Final, Native, Public, BlueprintCallable)

void USnapNetSubsystem::UnregisterAllStringPools()
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "UnregisterAllStringPools");

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, nullptr);

	Func->FunctionFlags = Flgs;
}


// Function SnapNet.SnapNetSubsystem.GetClient
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetClient*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetClient* USnapNetSubsystem::GetClient() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "GetClient");

	Params::SnapNetSubsystem_GetClient Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.GetEntityRenderer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class AActor*                           ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class AActor* USnapNetSubsystem::GetEntityRenderer(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "GetEntityRenderer");

	Params::SnapNetSubsystem_GetEntityRenderer Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.GetEntityRendererComponent
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// int32                                   EntityIndex                                            (Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
// class USnapNetEntityRendererComponent*  ReturnValue                                            (ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetEntityRendererComponent* USnapNetSubsystem::GetEntityRendererComponent(int32 EntityIndex) const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "GetEntityRendererComponent");

	Params::SnapNetSubsystem_GetEntityRendererComponent Parms{};

	Parms.EntityIndex = EntityIndex;

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.GetPlayerJoinRequestClass
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// TSubclassOf<class USnapNetPlayerJoinRequest>ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)

TSubclassOf<class USnapNetPlayerJoinRequest> USnapNetSubsystem::GetPlayerJoinRequestClass() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "GetPlayerJoinRequestClass");

	Params::SnapNetSubsystem_GetPlayerJoinRequestClass Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.GetServer
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// class USnapNetServer*                   ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

class USnapNetServer* USnapNetSubsystem::GetServer() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "GetServer");

	Params::SnapNetSubsystem_GetServer Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}


// Function SnapNet.SnapNetSubsystem.IsSingleFrameAdvanceEnabled
// (Final, Native, Public, BlueprintCallable, BlueprintPure, Const)
// Parameters:
// bool                                    ReturnValue                                            (Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

bool USnapNetSubsystem::IsSingleFrameAdvanceEnabled() const
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = Class->GetFunction("SnapNetSubsystem", "IsSingleFrameAdvanceEnabled");

	Params::SnapNetSubsystem_IsSingleFrameAdvanceEnabled Parms{};

	auto Flgs = Func->FunctionFlags;
	Func->FunctionFlags |= 0x400;

	UObject::ProcessEvent(Func, &Parms);

	Func->FunctionFlags = Flgs;

	return Parms.ReturnValue;
}

}

