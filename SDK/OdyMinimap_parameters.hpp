#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OdyMinimap

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function OdyMinimap.OdyCompassHorizontalWidget.AddIndicator
// 0x0008 (0x0008 - 0x0000)
struct OdyCompassHorizontalWidget_AddIndicator final
{
public:
	class UObject*                                IndicatedObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_AddIndicator) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_AddIndicator");
static_assert(sizeof(OdyCompassHorizontalWidget_AddIndicator) == 0x000008, "Wrong size on OdyCompassHorizontalWidget_AddIndicator");
static_assert(offsetof(OdyCompassHorizontalWidget_AddIndicator, IndicatedObject) == 0x000000, "Member 'OdyCompassHorizontalWidget_AddIndicator::IndicatedObject' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.DestroyIndicator
// 0x0008 (0x0008 - 0x0000)
struct OdyCompassHorizontalWidget_DestroyIndicator final
{
public:
	class UObject*                                IndicatedObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_DestroyIndicator) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_DestroyIndicator");
static_assert(sizeof(OdyCompassHorizontalWidget_DestroyIndicator) == 0x000008, "Wrong size on OdyCompassHorizontalWidget_DestroyIndicator");
static_assert(offsetof(OdyCompassHorizontalWidget_DestroyIndicator, IndicatedObject) == 0x000000, "Member 'OdyCompassHorizontalWidget_DestroyIndicator::IndicatedObject' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct OdyCompassHorizontalWidget_OnActorDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_OnActorDestroyed) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_OnActorDestroyed");
static_assert(sizeof(OdyCompassHorizontalWidget_OnActorDestroyed) == 0x000008, "Wrong size on OdyCompassHorizontalWidget_OnActorDestroyed");
static_assert(offsetof(OdyCompassHorizontalWidget_OnActorDestroyed, InActor) == 0x000000, "Member 'OdyCompassHorizontalWidget_OnActorDestroyed::InActor' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.OnActorSpawned
// 0x0008 (0x0008 - 0x0000)
struct OdyCompassHorizontalWidget_OnActorSpawned final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_OnActorSpawned) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_OnActorSpawned");
static_assert(sizeof(OdyCompassHorizontalWidget_OnActorSpawned) == 0x000008, "Wrong size on OdyCompassHorizontalWidget_OnActorSpawned");
static_assert(offsetof(OdyCompassHorizontalWidget_OnActorSpawned, InActor) == 0x000000, "Member 'OdyCompassHorizontalWidget_OnActorSpawned::InActor' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.ConvertWorldPositionToCompassPosition
// 0x0020 (0x0020 - 0x0000)
struct OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition");
static_assert(sizeof(OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition) == 0x000020, "Wrong size on OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition");
static_assert(offsetof(OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition, WorldPosition) == 0x000000, "Member 'OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition, ReturnValue) == 0x000018, "Member 'OdyCompassHorizontalWidget_ConvertWorldPositionToCompassPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.GetCompassWorldPosition
// 0x0018 (0x0018 - 0x0000)
struct OdyCompassHorizontalWidget_GetCompassWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_GetCompassWorldPosition) == 0x000008, "Wrong alignment on OdyCompassHorizontalWidget_GetCompassWorldPosition");
static_assert(sizeof(OdyCompassHorizontalWidget_GetCompassWorldPosition) == 0x000018, "Wrong size on OdyCompassHorizontalWidget_GetCompassWorldPosition");
static_assert(offsetof(OdyCompassHorizontalWidget_GetCompassWorldPosition, ReturnValue) == 0x000000, "Member 'OdyCompassHorizontalWidget_GetCompassWorldPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyCompassHorizontalWidget.GetHeadingYawInDegrees
// 0x0004 (0x0004 - 0x0000)
struct OdyCompassHorizontalWidget_GetHeadingYawInDegrees final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassHorizontalWidget_GetHeadingYawInDegrees) == 0x000004, "Wrong alignment on OdyCompassHorizontalWidget_GetHeadingYawInDegrees");
static_assert(sizeof(OdyCompassHorizontalWidget_GetHeadingYawInDegrees) == 0x000004, "Wrong size on OdyCompassHorizontalWidget_GetHeadingYawInDegrees");
static_assert(offsetof(OdyCompassHorizontalWidget_GetHeadingYawInDegrees, ReturnValue) == 0x000000, "Member 'OdyCompassHorizontalWidget_GetHeadingYawInDegrees::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyCompassIndicatorWidget.GetIndicatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct OdyCompassIndicatorWidget_GetIndicatorVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassIndicatorWidget_GetIndicatorVisibility) == 0x000001, "Wrong alignment on OdyCompassIndicatorWidget_GetIndicatorVisibility");
static_assert(sizeof(OdyCompassIndicatorWidget_GetIndicatorVisibility) == 0x000001, "Wrong size on OdyCompassIndicatorWidget_GetIndicatorVisibility");
static_assert(offsetof(OdyCompassIndicatorWidget_GetIndicatorVisibility, ReturnValue) == 0x000000, "Member 'OdyCompassIndicatorWidget_GetIndicatorVisibility::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyCompassIndicatorWidget.GetIndicatorWorldPosition
// 0x0018 (0x0018 - 0x0000)
struct OdyCompassIndicatorWidget_GetIndicatorWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyCompassIndicatorWidget_GetIndicatorWorldPosition) == 0x000008, "Wrong alignment on OdyCompassIndicatorWidget_GetIndicatorWorldPosition");
static_assert(sizeof(OdyCompassIndicatorWidget_GetIndicatorWorldPosition) == 0x000018, "Wrong size on OdyCompassIndicatorWidget_GetIndicatorWorldPosition");
static_assert(offsetof(OdyCompassIndicatorWidget_GetIndicatorWorldPosition, ReturnValue) == 0x000000, "Member 'OdyCompassIndicatorWidget_GetIndicatorWorldPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.CaptureMinimap
// 0x0002 (0x0002 - 0x0000)
struct OdyMinimapActor_CaptureMinimap final
{
public:
	bool                                          bCheckout;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0001(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_CaptureMinimap) == 0x000001, "Wrong alignment on OdyMinimapActor_CaptureMinimap");
static_assert(sizeof(OdyMinimapActor_CaptureMinimap) == 0x000002, "Wrong size on OdyMinimapActor_CaptureMinimap");
static_assert(offsetof(OdyMinimapActor_CaptureMinimap, bCheckout) == 0x000000, "Member 'OdyMinimapActor_CaptureMinimap::bCheckout' has a wrong offset!");
static_assert(offsetof(OdyMinimapActor_CaptureMinimap, ReturnValue) == 0x000001, "Member 'OdyMinimapActor_CaptureMinimap::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.GetOutputTextureSlice
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapActor_GetOutputTextureSlice final
{
public:
	float                                         WorldHeight;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_GetOutputTextureSlice) == 0x000008, "Wrong alignment on OdyMinimapActor_GetOutputTextureSlice");
static_assert(sizeof(OdyMinimapActor_GetOutputTextureSlice) == 0x000010, "Wrong size on OdyMinimapActor_GetOutputTextureSlice");
static_assert(offsetof(OdyMinimapActor_GetOutputTextureSlice, WorldHeight) == 0x000000, "Member 'OdyMinimapActor_GetOutputTextureSlice::WorldHeight' has a wrong offset!");
static_assert(offsetof(OdyMinimapActor_GetOutputTextureSlice, ReturnValue) == 0x000008, "Member 'OdyMinimapActor_GetOutputTextureSlice::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.SetupCameraInfo
// 0x0004 (0x0004 - 0x0000)
struct OdyMinimapActor_SetupCameraInfo final
{
public:
	int32                                         SliceIndex;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_SetupCameraInfo) == 0x000004, "Wrong alignment on OdyMinimapActor_SetupCameraInfo");
static_assert(sizeof(OdyMinimapActor_SetupCameraInfo) == 0x000004, "Wrong size on OdyMinimapActor_SetupCameraInfo");
static_assert(offsetof(OdyMinimapActor_SetupCameraInfo, SliceIndex) == 0x000000, "Member 'OdyMinimapActor_SetupCameraInfo::SliceIndex' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.ConvertWorldExtentToMinimapExtent
// 0x0028 (0x0028 - 0x0000)
struct OdyMinimapActor_ConvertWorldExtentToMinimapExtent final
{
public:
	struct FVector                                WorldExtent;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_ConvertWorldExtentToMinimapExtent) == 0x000008, "Wrong alignment on OdyMinimapActor_ConvertWorldExtentToMinimapExtent");
static_assert(sizeof(OdyMinimapActor_ConvertWorldExtentToMinimapExtent) == 0x000028, "Wrong size on OdyMinimapActor_ConvertWorldExtentToMinimapExtent");
static_assert(offsetof(OdyMinimapActor_ConvertWorldExtentToMinimapExtent, WorldExtent) == 0x000000, "Member 'OdyMinimapActor_ConvertWorldExtentToMinimapExtent::WorldExtent' has a wrong offset!");
static_assert(offsetof(OdyMinimapActor_ConvertWorldExtentToMinimapExtent, ReturnValue) == 0x000018, "Member 'OdyMinimapActor_ConvertWorldExtentToMinimapExtent::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.ConvertWorldPositionToMinimapPosition
// 0x0028 (0x0028 - 0x0000)
struct OdyMinimapActor_ConvertWorldPositionToMinimapPosition final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_ConvertWorldPositionToMinimapPosition) == 0x000008, "Wrong alignment on OdyMinimapActor_ConvertWorldPositionToMinimapPosition");
static_assert(sizeof(OdyMinimapActor_ConvertWorldPositionToMinimapPosition) == 0x000028, "Wrong size on OdyMinimapActor_ConvertWorldPositionToMinimapPosition");
static_assert(offsetof(OdyMinimapActor_ConvertWorldPositionToMinimapPosition, WorldPosition) == 0x000000, "Member 'OdyMinimapActor_ConvertWorldPositionToMinimapPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(OdyMinimapActor_ConvertWorldPositionToMinimapPosition, ReturnValue) == 0x000018, "Member 'OdyMinimapActor_ConvertWorldPositionToMinimapPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.GetOutputTexture
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapActor_GetOutputTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_GetOutputTexture) == 0x000008, "Wrong alignment on OdyMinimapActor_GetOutputTexture");
static_assert(sizeof(OdyMinimapActor_GetOutputTexture) == 0x000008, "Wrong size on OdyMinimapActor_GetOutputTexture");
static_assert(offsetof(OdyMinimapActor_GetOutputTexture, ReturnValue) == 0x000000, "Member 'OdyMinimapActor_GetOutputTexture::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapActor.GetWorldToMinimapRatio
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapActor_GetWorldToMinimapRatio final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapActor_GetWorldToMinimapRatio) == 0x000008, "Wrong alignment on OdyMinimapActor_GetWorldToMinimapRatio");
static_assert(sizeof(OdyMinimapActor_GetWorldToMinimapRatio) == 0x000010, "Wrong size on OdyMinimapActor_GetWorldToMinimapRatio");
static_assert(offsetof(OdyMinimapActor_GetWorldToMinimapRatio, ReturnValue) == 0x000000, "Member 'OdyMinimapActor_GetWorldToMinimapRatio::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.GetCompassIndicatorWidgetClass
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicated_GetCompassIndicatorWidgetClass final
{
public:
	TSubclassOf<class UOdyCompassIndicatorWidget> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_GetCompassIndicatorWidgetClass) == 0x000008, "Wrong alignment on OdyMinimapIndicated_GetCompassIndicatorWidgetClass");
static_assert(sizeof(OdyMinimapIndicated_GetCompassIndicatorWidgetClass) == 0x000008, "Wrong size on OdyMinimapIndicated_GetCompassIndicatorWidgetClass");
static_assert(offsetof(OdyMinimapIndicated_GetCompassIndicatorWidgetClass, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicated_GetCompassIndicatorWidgetClass::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWidgetClass
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicated_GetIndicatorWidgetClass final
{
public:
	TSubclassOf<class UOdyMinimapIndicatorWidget> ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_GetIndicatorWidgetClass) == 0x000008, "Wrong alignment on OdyMinimapIndicated_GetIndicatorWidgetClass");
static_assert(sizeof(OdyMinimapIndicated_GetIndicatorWidgetClass) == 0x000008, "Wrong size on OdyMinimapIndicated_GetIndicatorWidgetClass");
static_assert(offsetof(OdyMinimapIndicated_GetIndicatorWidgetClass, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicated_GetIndicatorWidgetClass::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWorldExtent
// 0x0018 (0x0018 - 0x0000)
struct OdyMinimapIndicated_GetIndicatorWorldExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_GetIndicatorWorldExtent) == 0x000008, "Wrong alignment on OdyMinimapIndicated_GetIndicatorWorldExtent");
static_assert(sizeof(OdyMinimapIndicated_GetIndicatorWorldExtent) == 0x000018, "Wrong size on OdyMinimapIndicated_GetIndicatorWorldExtent");
static_assert(offsetof(OdyMinimapIndicated_GetIndicatorWorldExtent, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicated_GetIndicatorWorldExtent::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.GetIndicatorWorldPosition
// 0x0018 (0x0018 - 0x0000)
struct OdyMinimapIndicated_GetIndicatorWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_GetIndicatorWorldPosition) == 0x000008, "Wrong alignment on OdyMinimapIndicated_GetIndicatorWorldPosition");
static_assert(sizeof(OdyMinimapIndicated_GetIndicatorWorldPosition) == 0x000018, "Wrong size on OdyMinimapIndicated_GetIndicatorWorldPosition");
static_assert(offsetof(OdyMinimapIndicated_GetIndicatorWorldPosition, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicated_GetIndicatorWorldPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.SetupIndicatorInstance
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicated_SetupIndicatorInstance final
{
public:
	class UOdyMinimapIndicatorWidget*             IndicatorInstance;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_SetupIndicatorInstance) == 0x000008, "Wrong alignment on OdyMinimapIndicated_SetupIndicatorInstance");
static_assert(sizeof(OdyMinimapIndicated_SetupIndicatorInstance) == 0x000008, "Wrong size on OdyMinimapIndicated_SetupIndicatorInstance");
static_assert(offsetof(OdyMinimapIndicated_SetupIndicatorInstance, IndicatorInstance) == 0x000000, "Member 'OdyMinimapIndicated_SetupIndicatorInstance::IndicatorInstance' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.ShouldCompassIndicatorBeVisible
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapIndicated_ShouldCompassIndicatorBeVisible final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OdyMinimapIndicated_ShouldCompassIndicatorBeVisible) == 0x000008, "Wrong alignment on OdyMinimapIndicated_ShouldCompassIndicatorBeVisible");
static_assert(sizeof(OdyMinimapIndicated_ShouldCompassIndicatorBeVisible) == 0x000010, "Wrong size on OdyMinimapIndicated_ShouldCompassIndicatorBeVisible");
static_assert(offsetof(OdyMinimapIndicated_ShouldCompassIndicatorBeVisible, InPlayerController) == 0x000000, "Member 'OdyMinimapIndicated_ShouldCompassIndicatorBeVisible::InPlayerController' has a wrong offset!");
static_assert(offsetof(OdyMinimapIndicated_ShouldCompassIndicatorBeVisible, ReturnValue) == 0x000008, "Member 'OdyMinimapIndicated_ShouldCompassIndicatorBeVisible::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.ShouldIndicatorBeVisible
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapIndicated_ShouldIndicatorBeVisible final
{
public:
	class APlayerController*                      InPlayerController;                                // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(OdyMinimapIndicated_ShouldIndicatorBeVisible) == 0x000008, "Wrong alignment on OdyMinimapIndicated_ShouldIndicatorBeVisible");
static_assert(sizeof(OdyMinimapIndicated_ShouldIndicatorBeVisible) == 0x000010, "Wrong size on OdyMinimapIndicated_ShouldIndicatorBeVisible");
static_assert(offsetof(OdyMinimapIndicated_ShouldIndicatorBeVisible, InPlayerController) == 0x000000, "Member 'OdyMinimapIndicated_ShouldIndicatorBeVisible::InPlayerController' has a wrong offset!");
static_assert(offsetof(OdyMinimapIndicated_ShouldIndicatorBeVisible, ReturnValue) == 0x000008, "Member 'OdyMinimapIndicated_ShouldIndicatorBeVisible::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicated.TickIndicator
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicated_TickIndicator final
{
public:
	class UOdyMinimapIndicatorWidget*             WidgetInstance;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicated_TickIndicator) == 0x000008, "Wrong alignment on OdyMinimapIndicated_TickIndicator");
static_assert(sizeof(OdyMinimapIndicated_TickIndicator) == 0x000008, "Wrong size on OdyMinimapIndicated_TickIndicator");
static_assert(offsetof(OdyMinimapIndicated_TickIndicator, WidgetInstance) == 0x000000, "Member 'OdyMinimapIndicated_TickIndicator::WidgetInstance' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorCompassVisibility
// 0x0001 (0x0001 - 0x0000)
struct OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility) == 0x000001, "Wrong alignment on OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility");
static_assert(sizeof(OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility) == 0x000001, "Wrong size on OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility");
static_assert(offsetof(OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicatorWidget_GetIndicatorCompassVisibility::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorVisibility
// 0x0001 (0x0001 - 0x0000)
struct OdyMinimapIndicatorWidget_GetIndicatorVisibility final
{
public:
	ESlateVisibility                              ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_GetIndicatorVisibility) == 0x000001, "Wrong alignment on OdyMinimapIndicatorWidget_GetIndicatorVisibility");
static_assert(sizeof(OdyMinimapIndicatorWidget_GetIndicatorVisibility) == 0x000001, "Wrong size on OdyMinimapIndicatorWidget_GetIndicatorVisibility");
static_assert(offsetof(OdyMinimapIndicatorWidget_GetIndicatorVisibility, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicatorWidget_GetIndicatorVisibility::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorWorldExtent
// 0x0018 (0x0018 - 0x0000)
struct OdyMinimapIndicatorWidget_GetIndicatorWorldExtent final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_GetIndicatorWorldExtent) == 0x000008, "Wrong alignment on OdyMinimapIndicatorWidget_GetIndicatorWorldExtent");
static_assert(sizeof(OdyMinimapIndicatorWidget_GetIndicatorWorldExtent) == 0x000018, "Wrong size on OdyMinimapIndicatorWidget_GetIndicatorWorldExtent");
static_assert(offsetof(OdyMinimapIndicatorWidget_GetIndicatorWorldExtent, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicatorWidget_GetIndicatorWorldExtent::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.GetIndicatorWorldPosition
// 0x0018 (0x0018 - 0x0000)
struct OdyMinimapIndicatorWidget_GetIndicatorWorldPosition final
{
public:
	struct FVector                                ReturnValue;                                       // 0x0000(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_GetIndicatorWorldPosition) == 0x000008, "Wrong alignment on OdyMinimapIndicatorWidget_GetIndicatorWorldPosition");
static_assert(sizeof(OdyMinimapIndicatorWidget_GetIndicatorWorldPosition) == 0x000018, "Wrong size on OdyMinimapIndicatorWidget_GetIndicatorWorldPosition");
static_assert(offsetof(OdyMinimapIndicatorWidget_GetIndicatorWorldPosition, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicatorWidget_GetIndicatorWorldPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.GetOwningMinimap
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicatorWidget_GetOwningMinimap final
{
public:
	class UOdyMinimapWidget*                      ReturnValue;                                       // 0x0000(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_GetOwningMinimap) == 0x000008, "Wrong alignment on OdyMinimapIndicatorWidget_GetOwningMinimap");
static_assert(sizeof(OdyMinimapIndicatorWidget_GetOwningMinimap) == 0x000008, "Wrong size on OdyMinimapIndicatorWidget_GetOwningMinimap");
static_assert(offsetof(OdyMinimapIndicatorWidget_GetOwningMinimap, ReturnValue) == 0x000000, "Member 'OdyMinimapIndicatorWidget_GetOwningMinimap::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapIndicatorWidget.SetOwningMinimap
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapIndicatorWidget_SetOwningMinimap final
{
public:
	class UOdyMinimapWidget*                      InOwningMinimap;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapIndicatorWidget_SetOwningMinimap) == 0x000008, "Wrong alignment on OdyMinimapIndicatorWidget_SetOwningMinimap");
static_assert(sizeof(OdyMinimapIndicatorWidget_SetOwningMinimap) == 0x000008, "Wrong size on OdyMinimapIndicatorWidget_SetOwningMinimap");
static_assert(offsetof(OdyMinimapIndicatorWidget_SetOwningMinimap, InOwningMinimap) == 0x000000, "Member 'OdyMinimapIndicatorWidget_SetOwningMinimap::InOwningMinimap' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.ConvertWorldExtentToMinimapExtent
// 0x0028 (0x0028 - 0x0000)
struct OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent final
{
public:
	struct FVector                                WorldExtent;                                       // 0x0000(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent");
static_assert(sizeof(OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent) == 0x000028, "Wrong size on OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent");
static_assert(offsetof(OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent, WorldExtent) == 0x000000, "Member 'OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent::WorldExtent' has a wrong offset!");
static_assert(offsetof(OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent, ReturnValue) == 0x000018, "Member 'OdyMinimapSubsystem_ConvertWorldExtentToMinimapExtent::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.ConvertWorldPositionToMinimapPosition
// 0x0028 (0x0028 - 0x0000)
struct OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition final
{
public:
	struct FVector                                WorldPosition;                                     // 0x0000(0x0018)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              ReturnValue;                                       // 0x0018(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition");
static_assert(sizeof(OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition) == 0x000028, "Wrong size on OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition");
static_assert(offsetof(OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition, WorldPosition) == 0x000000, "Member 'OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition::WorldPosition' has a wrong offset!");
static_assert(offsetof(OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition, ReturnValue) == 0x000018, "Member 'OdyMinimapSubsystem_ConvertWorldPositionToMinimapPosition::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapActor
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapSubsystem_GetMinimapActor final
{
public:
	class AOdyMinimapActor*                       ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_GetMinimapActor) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_GetMinimapActor");
static_assert(sizeof(OdyMinimapSubsystem_GetMinimapActor) == 0x000008, "Wrong size on OdyMinimapSubsystem_GetMinimapActor");
static_assert(offsetof(OdyMinimapSubsystem_GetMinimapActor, ReturnValue) == 0x000000, "Member 'OdyMinimapSubsystem_GetMinimapActor::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapBrightness
// 0x0004 (0x0004 - 0x0000)
struct OdyMinimapSubsystem_GetMinimapBrightness final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_GetMinimapBrightness) == 0x000004, "Wrong alignment on OdyMinimapSubsystem_GetMinimapBrightness");
static_assert(sizeof(OdyMinimapSubsystem_GetMinimapBrightness) == 0x000004, "Wrong size on OdyMinimapSubsystem_GetMinimapBrightness");
static_assert(offsetof(OdyMinimapSubsystem_GetMinimapBrightness, ReturnValue) == 0x000000, "Member 'OdyMinimapSubsystem_GetMinimapBrightness::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapTexture
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapSubsystem_GetMinimapTexture final
{
public:
	class UTexture2D*                             ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_GetMinimapTexture) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_GetMinimapTexture");
static_assert(sizeof(OdyMinimapSubsystem_GetMinimapTexture) == 0x000008, "Wrong size on OdyMinimapSubsystem_GetMinimapTexture");
static_assert(offsetof(OdyMinimapSubsystem_GetMinimapTexture, ReturnValue) == 0x000000, "Member 'OdyMinimapSubsystem_GetMinimapTexture::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.GetMinimapTextureForLocation
// 0x0020 (0x0020 - 0x0000)
struct OdyMinimapSubsystem_GetMinimapTextureForLocation final
{
public:
	struct FVector                                WorldLocation;                                     // 0x0000(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UTexture2D*                             ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_GetMinimapTextureForLocation) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_GetMinimapTextureForLocation");
static_assert(sizeof(OdyMinimapSubsystem_GetMinimapTextureForLocation) == 0x000020, "Wrong size on OdyMinimapSubsystem_GetMinimapTextureForLocation");
static_assert(offsetof(OdyMinimapSubsystem_GetMinimapTextureForLocation, WorldLocation) == 0x000000, "Member 'OdyMinimapSubsystem_GetMinimapTextureForLocation::WorldLocation' has a wrong offset!");
static_assert(offsetof(OdyMinimapSubsystem_GetMinimapTextureForLocation, ReturnValue) == 0x000018, "Member 'OdyMinimapSubsystem_GetMinimapTextureForLocation::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapSubsystem.GetWorldToMinimapRatio
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapSubsystem_GetWorldToMinimapRatio final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapSubsystem_GetWorldToMinimapRatio) == 0x000008, "Wrong alignment on OdyMinimapSubsystem_GetWorldToMinimapRatio");
static_assert(sizeof(OdyMinimapSubsystem_GetWorldToMinimapRatio) == 0x000010, "Wrong size on OdyMinimapSubsystem_GetWorldToMinimapRatio");
static_assert(offsetof(OdyMinimapSubsystem_GetWorldToMinimapRatio, ReturnValue) == 0x000000, "Member 'OdyMinimapSubsystem_GetWorldToMinimapRatio::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.AddIndicator
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapWidget_AddIndicator final
{
public:
	class UObject*                                IndicatedObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_AddIndicator) == 0x000008, "Wrong alignment on OdyMinimapWidget_AddIndicator");
static_assert(sizeof(OdyMinimapWidget_AddIndicator) == 0x000008, "Wrong size on OdyMinimapWidget_AddIndicator");
static_assert(offsetof(OdyMinimapWidget_AddIndicator, IndicatedObject) == 0x000000, "Member 'OdyMinimapWidget_AddIndicator::IndicatedObject' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.DestroyIndicator
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapWidget_DestroyIndicator final
{
public:
	class UObject*                                IndicatedObject;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_DestroyIndicator) == 0x000008, "Wrong alignment on OdyMinimapWidget_DestroyIndicator");
static_assert(sizeof(OdyMinimapWidget_DestroyIndicator) == 0x000008, "Wrong size on OdyMinimapWidget_DestroyIndicator");
static_assert(offsetof(OdyMinimapWidget_DestroyIndicator, IndicatedObject) == 0x000000, "Member 'OdyMinimapWidget_DestroyIndicator::IndicatedObject' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.OnActorDestroyed
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapWidget_OnActorDestroyed final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_OnActorDestroyed) == 0x000008, "Wrong alignment on OdyMinimapWidget_OnActorDestroyed");
static_assert(sizeof(OdyMinimapWidget_OnActorDestroyed) == 0x000008, "Wrong size on OdyMinimapWidget_OnActorDestroyed");
static_assert(offsetof(OdyMinimapWidget_OnActorDestroyed, InActor) == 0x000000, "Member 'OdyMinimapWidget_OnActorDestroyed::InActor' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.OnActorSpawned
// 0x0008 (0x0008 - 0x0000)
struct OdyMinimapWidget_OnActorSpawned final
{
public:
	class AActor*                                 InActor;                                           // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_OnActorSpawned) == 0x000008, "Wrong alignment on OdyMinimapWidget_OnActorSpawned");
static_assert(sizeof(OdyMinimapWidget_OnActorSpawned) == 0x000008, "Wrong size on OdyMinimapWidget_OnActorSpawned");
static_assert(offsetof(OdyMinimapWidget_OnActorSpawned, InActor) == 0x000000, "Member 'OdyMinimapWidget_OnActorSpawned::InActor' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.SetZoomCenter
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapWidget_SetZoomCenter final
{
public:
	struct FVector2D                              Value;                                             // 0x0000(0x0010)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_SetZoomCenter) == 0x000008, "Wrong alignment on OdyMinimapWidget_SetZoomCenter");
static_assert(sizeof(OdyMinimapWidget_SetZoomCenter) == 0x000010, "Wrong size on OdyMinimapWidget_SetZoomCenter");
static_assert(offsetof(OdyMinimapWidget_SetZoomCenter, Value) == 0x000000, "Member 'OdyMinimapWidget_SetZoomCenter::Value' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.SetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct OdyMinimapWidget_SetZoomLevel final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(ConstParm, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_SetZoomLevel) == 0x000004, "Wrong alignment on OdyMinimapWidget_SetZoomLevel");
static_assert(sizeof(OdyMinimapWidget_SetZoomLevel) == 0x000004, "Wrong size on OdyMinimapWidget_SetZoomLevel");
static_assert(offsetof(OdyMinimapWidget_SetZoomLevel, Value) == 0x000000, "Member 'OdyMinimapWidget_SetZoomLevel::Value' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.SetZoomLevelFromWoldMeters
// 0x0004 (0x0004 - 0x0000)
struct OdyMinimapWidget_SetZoomLevelFromWoldMeters final
{
public:
	float                                         DesiredMeters;                                     // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_SetZoomLevelFromWoldMeters) == 0x000004, "Wrong alignment on OdyMinimapWidget_SetZoomLevelFromWoldMeters");
static_assert(sizeof(OdyMinimapWidget_SetZoomLevelFromWoldMeters) == 0x000004, "Wrong size on OdyMinimapWidget_SetZoomLevelFromWoldMeters");
static_assert(offsetof(OdyMinimapWidget_SetZoomLevelFromWoldMeters, DesiredMeters) == 0x000000, "Member 'OdyMinimapWidget_SetZoomLevelFromWoldMeters::DesiredMeters' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.GetZoomCenter
// 0x0010 (0x0010 - 0x0000)
struct OdyMinimapWidget_GetZoomCenter final
{
public:
	struct FVector2D                              ReturnValue;                                       // 0x0000(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_GetZoomCenter) == 0x000008, "Wrong alignment on OdyMinimapWidget_GetZoomCenter");
static_assert(sizeof(OdyMinimapWidget_GetZoomCenter) == 0x000010, "Wrong size on OdyMinimapWidget_GetZoomCenter");
static_assert(offsetof(OdyMinimapWidget_GetZoomCenter, ReturnValue) == 0x000000, "Member 'OdyMinimapWidget_GetZoomCenter::ReturnValue' has a wrong offset!");

// Function OdyMinimap.OdyMinimapWidget.GetZoomLevel
// 0x0004 (0x0004 - 0x0000)
struct OdyMinimapWidget_GetZoomLevel final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(OdyMinimapWidget_GetZoomLevel) == 0x000004, "Wrong alignment on OdyMinimapWidget_GetZoomLevel");
static_assert(sizeof(OdyMinimapWidget_GetZoomLevel) == 0x000004, "Wrong size on OdyMinimapWidget_GetZoomLevel");
static_assert(offsetof(OdyMinimapWidget_GetZoomLevel, ReturnValue) == 0x000000, "Member 'OdyMinimapWidget_GetZoomLevel::ReturnValue' has a wrong offset!");

}

