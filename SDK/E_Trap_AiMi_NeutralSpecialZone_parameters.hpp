#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_Trap_AiMi_NeutralSpecialZone

#include "Basic.hpp"


namespace SDK::Params
{

// Function E_Trap_AiMi_NeutralSpecialZone.E_Trap_AiMi_NeutralSpecialZone_C.ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone
// 0x00B0 (0x00B0 - 0x0000)
struct E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Array_Index_Variable;                     // 0x0004(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_1;                    // 0x0009(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<class AMatchaSnapNetCharacterEntity*>  CallFunc_GetOverlappingCharacters_ReturnValue;     // 0x0010(0x0010)(ReferenceParm)
	class AMatchaSnapNetCharacterEntity*          CallFunc_Array_Get_Item;                           // 0x0020(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_Array_Length_ReturnValue;                 // 0x0028(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         Temp_int_Loop_Counter_Variable;                    // 0x002C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMatchaSnapNetCharacterEntity*          K2Node_Event_OverlappedCharacter_1;                // 0x0030(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Less_IntInt_ReturnValue;                  // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_Add_IntInt_ReturnValue;                   // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class AMatchaSnapNetCharacterEntity*          K2Node_Event_OverlappedCharacter;                  // 0x0040(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetOwnerEntity_ReturnValue;               // 0x0048(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_2;                    // 0x0050(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterEntity*          K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity; // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue;      // 0x0061(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_62[0x6];                                       // 0x0062(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetServerScript*                   CallFunc_Get_ReturnValue;                          // 0x0068(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_3;                    // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaServerScript*                    K2Node_DynamicCast_AsMatcha_Server_Script;         // 0x0078(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_1;                     // 0x0080(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_1;    // 0x0081(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_82[0x6];                                       // 0x0082(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 CallFunc_GetGlitchMarkedTargetActor_ReturnValue;   // 0x0088(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 CallFunc_GetGlitchMarkedTargetActor_ReturnValue_1; // 0x0090(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_4;                    // 0x0098(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterEntity*          K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity_1; // 0x00A0(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess_2;                     // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_EqualEqual_ObjectObject_ReturnValue_2;    // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_5;                    // 0x00AA(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_6;                    // 0x00AB(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_7;                    // 0x00AC(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue_8;                    // 0x00AD(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone) == 0x000008, "Wrong alignment on E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone");
static_assert(sizeof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone) == 0x0000B0, "Wrong size on E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, EntryPoint) == 0x000000, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::EntryPoint' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, Temp_int_Array_Index_Variable) == 0x000004, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::Temp_int_Array_Index_Variable' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_1) == 0x000009, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_GetOverlappingCharacters_ReturnValue) == 0x000010, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_GetOverlappingCharacters_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_Array_Get_Item) == 0x000020, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_Array_Get_Item' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_Array_Length_ReturnValue) == 0x000028, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_Array_Length_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, Temp_int_Loop_Counter_Variable) == 0x00002C, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::Temp_int_Loop_Counter_Variable' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_Event_OverlappedCharacter_1) == 0x000030, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_Event_OverlappedCharacter_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_Less_IntInt_ReturnValue) == 0x000038, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_Less_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_Add_IntInt_ReturnValue) == 0x00003C, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_Add_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_Event_OverlappedCharacter) == 0x000040, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_Event_OverlappedCharacter' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_GetOwnerEntity_ReturnValue) == 0x000048, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_GetOwnerEntity_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_2) == 0x000050, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity) == 0x000058, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_bSuccess) == 0x000060, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_EqualEqual_ObjectObject_ReturnValue) == 0x000061, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_EqualEqual_ObjectObject_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_Get_ReturnValue) == 0x000068, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_Get_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_3) == 0x000070, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_3' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_AsMatcha_Server_Script) == 0x000078, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_AsMatcha_Server_Script' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_bSuccess_1) == 0x000080, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_bSuccess_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_EqualEqual_ObjectObject_ReturnValue_1) == 0x000081, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_EqualEqual_ObjectObject_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_GetGlitchMarkedTargetActor_ReturnValue) == 0x000088, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_GetGlitchMarkedTargetActor_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_GetGlitchMarkedTargetActor_ReturnValue_1) == 0x000090, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_GetGlitchMarkedTargetActor_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_4) == 0x000098, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_4' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity_1) == 0x0000A0, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity_1' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, K2Node_DynamicCast_bSuccess_2) == 0x0000A8, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::K2Node_DynamicCast_bSuccess_2' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_EqualEqual_ObjectObject_ReturnValue_2) == 0x0000A9, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_EqualEqual_ObjectObject_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_5) == 0x0000AA, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_5' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_6) == 0x0000AB, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_6' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_7) == 0x0000AC, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_7' has a wrong offset!");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone, CallFunc_IsValid_ReturnValue_8) == 0x0000AD, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_ExecuteUbergraph_E_Trap_AiMi_NeutralSpecialZone::CallFunc_IsValid_ReturnValue_8' has a wrong offset!");

// Function E_Trap_AiMi_NeutralSpecialZone.E_Trap_AiMi_NeutralSpecialZone_C.OnCharacterOverlapEnded
// 0x0008 (0x0008 - 0x0000)
struct E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded final
{
public:
	class AMatchaSnapNetCharacterEntity*          OverlappedCharacter;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded) == 0x000008, "Wrong alignment on E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded");
static_assert(sizeof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded) == 0x000008, "Wrong size on E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded, OverlappedCharacter) == 0x000000, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapEnded::OverlappedCharacter' has a wrong offset!");

// Function E_Trap_AiMi_NeutralSpecialZone.E_Trap_AiMi_NeutralSpecialZone_C.OnCharacterOverlapStarted
// 0x0008 (0x0008 - 0x0000)
struct E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted final
{
public:
	class AMatchaSnapNetCharacterEntity*          OverlappedCharacter;                               // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted) == 0x000008, "Wrong alignment on E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted");
static_assert(sizeof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted) == 0x000008, "Wrong size on E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted");
static_assert(offsetof(E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted, OverlappedCharacter) == 0x000000, "Member 'E_Trap_AiMi_NeutralSpecialZone_C_OnCharacterOverlapStarted::OverlappedCharacter' has a wrong offset!");

}

