#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: CommonLoadingScreen

#include "Basic.hpp"

#include "DeveloperSettings_classes.hpp"
#include "OdyUI_structs.hpp"
#include "CoreUObject_classes.hpp"
#include "Engine_classes.hpp"


namespace SDK
{

// Class CommonLoadingScreen.CommonLoadingScreenSettings
// 0x0020 (0x0058 - 0x0038)
class UCommonLoadingScreenSettings final : public UDeveloperSettingsBackedByCVars
{
public:
	int32                                         LoadingScreenZOrder;                               // 0x0038(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class UOdyWidget>                 DefaultLoadingScreenWidgetClass;                   // 0x0040(0x0008)(Edit, ZeroConstructor, Config, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         HoldLoadingScreenAdditionalSecs;                   // 0x0048(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LoadingScreenHeartbeatHangDuration;                // 0x004C(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         LogLoadingScreenHeartbeatInterval;                 // 0x0050(0x0004)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          LogLoadingScreenReasonEveryFrame;                  // 0x0054(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceLoadingScreenVisible;                         // 0x0055(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          HoldLoadingScreenAdditionalSecsEvenInEditor;       // 0x0056(0x0001)(Edit, ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ForceTickLoadingScreenEvenInEditor;                // 0x0057(0x0001)(Edit, ZeroConstructor, Config, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"CommonLoadingScreenSettings">();
	}
	static class UCommonLoadingScreenSettings* GetDefaultObj()
	{
		return GetDefaultObjImpl<UCommonLoadingScreenSettings>();
	}
};
static_assert(alignof(UCommonLoadingScreenSettings) == 0x000008, "Wrong alignment on UCommonLoadingScreenSettings");
static_assert(sizeof(UCommonLoadingScreenSettings) == 0x000058, "Wrong size on UCommonLoadingScreenSettings");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenZOrder) == 0x000038, "Member 'UCommonLoadingScreenSettings::LoadingScreenZOrder' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, DefaultLoadingScreenWidgetClass) == 0x000040, "Member 'UCommonLoadingScreenSettings::DefaultLoadingScreenWidgetClass' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, HoldLoadingScreenAdditionalSecs) == 0x000048, "Member 'UCommonLoadingScreenSettings::HoldLoadingScreenAdditionalSecs' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LoadingScreenHeartbeatHangDuration) == 0x00004C, "Member 'UCommonLoadingScreenSettings::LoadingScreenHeartbeatHangDuration' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LogLoadingScreenHeartbeatInterval) == 0x000050, "Member 'UCommonLoadingScreenSettings::LogLoadingScreenHeartbeatInterval' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, LogLoadingScreenReasonEveryFrame) == 0x000054, "Member 'UCommonLoadingScreenSettings::LogLoadingScreenReasonEveryFrame' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ForceLoadingScreenVisible) == 0x000055, "Member 'UCommonLoadingScreenSettings::ForceLoadingScreenVisible' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, HoldLoadingScreenAdditionalSecsEvenInEditor) == 0x000056, "Member 'UCommonLoadingScreenSettings::HoldLoadingScreenAdditionalSecsEvenInEditor' has a wrong offset!");
static_assert(offsetof(UCommonLoadingScreenSettings, ForceTickLoadingScreenEvenInEditor) == 0x000057, "Member 'UCommonLoadingScreenSettings::ForceTickLoadingScreenEvenInEditor' has a wrong offset!");

// Class CommonLoadingScreen.LoadingProcessTask
// 0x0018 (0x0040 - 0x0028)
class ULoadingProcessTask final : public UObject
{
public:
	uint8                                         Pad_28[0x18];                                      // 0x0028(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	static class ULoadingProcessTask* CreateLoadingScreenProcessTask(class UObject* WorldContextObject, const class FString& ShowLoadingScreenReason);

	void SetShowLoadingScreenReason(const class FString& InReason);
	void Unregister();

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingProcessTask">();
	}
	static class ULoadingProcessTask* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingProcessTask>();
	}
};
static_assert(alignof(ULoadingProcessTask) == 0x000008, "Wrong alignment on ULoadingProcessTask");
static_assert(sizeof(ULoadingProcessTask) == 0x000040, "Wrong size on ULoadingProcessTask");

// Class CommonLoadingScreen.LoadingScreenManager
// 0x00D8 (0x0108 - 0x0030)
class ULoadingScreenManager final : public UGameInstanceSubsystem
{
public:
	uint8                                         Pad_30[0x48];                                      // 0x0030(0x0048)(Fixing Size After Last Property [ Dumper-7 ])
	class UOdyWidget*                             LoadingScreenOdyWidget;                            // 0x0078(0x0008)(ExportObject, ZeroConstructor, Transient, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_80[0x88];                                      // 0x0080(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])

public:
	void OnLoadingScreenWidgetDisplayStateChanged(class UOdyWidget* Widget, EOdyWidgetDisplayState OldState, EOdyWidgetDisplayState NewState);

	class FString GetDebugReasonForShowingOrHidingLoadingScreen() const;

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"LoadingScreenManager">();
	}
	static class ULoadingScreenManager* GetDefaultObj()
	{
		return GetDefaultObjImpl<ULoadingScreenManager>();
	}
};
static_assert(alignof(ULoadingScreenManager) == 0x000008, "Wrong alignment on ULoadingScreenManager");
static_assert(sizeof(ULoadingScreenManager) == 0x000108, "Wrong size on ULoadingScreenManager");
static_assert(offsetof(ULoadingScreenManager, LoadingScreenOdyWidget) == 0x000078, "Member 'ULoadingScreenManager::LoadingScreenOdyWidget' has a wrong offset!");

}

