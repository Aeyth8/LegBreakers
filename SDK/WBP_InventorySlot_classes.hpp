#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_InventorySlot

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"
#include "SlateCore_structs.hpp"
#include "OdyUI_classes.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"
#include "Matcha_structs.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_InventorySlot.WBP_InventorySlot_C
// 0x0198 (0x0530 - 0x0398)
class UWBP_InventorySlot_C final : public UOdyWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UImage*                                 BackgroundGear;                                    // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 BackgroundInventory;                               // 0x03A8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             CurrentValue;                                      // 0x03B0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              Gear_ScaleBox;                                     // 0x03B8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              Item_ScaleBox;                                     // 0x03C0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UScaleBox*                              ItemCount_ScaleBox;                                // 0x03C8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemGear_Portrait;                                 // 0x03D0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemGear_RarityLabel;                              // 0x03D8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemGear_Triangle;                                 // 0x03E0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UHorizontalBox*                         ItemType;                                          // 0x03E8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UWidgetSwitcher*                        ItemType_Switcher;                                 // 0x03F0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 ItemTypeIcon;                                      // 0x03F8(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UBorder*                                ItemTypeIconContainer;                             // 0x0400(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               ItemTypeOuterPanel;                                // 0x0408(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UOdyTextBlock*                          ItemTypeText;                                      // 0x0410(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UTextBlock*                             MaxValue;                                          // 0x0418(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class UImage*                                 SelectIconInventory;                               // 0x0420(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	class USizeBox*                               SizeBox;                                           // 0x0428(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	struct FLinearColor                           ConsumablesBGColor;                                // 0x0430(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          HideOnEmpty;                                       // 0x0440(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, ExposeOnSpawn, HasGetValueTypeHash)
	uint8                                         Pad_441[0x7];                                      // 0x0441(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Size;                                              // 0x0448(0x0010)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          IsAGearSlot;                                       // 0x0458(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_459[0x3];                                      // 0x0459(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           SlotType;                                          // 0x045C(0x0008)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_464[0x4];                                      // 0x0464(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               EmptyTexture;                                      // 0x0468(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIsSelected;                                   // 0x0470(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          DebugIsEnergized;                                  // 0x0471(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_472[0x6];                                      // 0x0472(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   ItemTooltip;                                       // 0x0478(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	FMulticastInlineDelegateProperty_             OnItemToolTipUpdated;                              // 0x0488(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FLinearColor                           ThrowOnlyLinearColor;                              // 0x0498(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           InstantTypeLinearColor;                            // 0x04A8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	FMulticastInlineDelegateProperty_             OnGearSlotBecameEnergized;                         // 0x04B8(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	class UTexture2D*                             SlotBG_Common;                                     // 0x04C8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotBG_Rare;                                       // 0x04D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotBG_Epic;                                       // 0x04D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	class UTexture2D*                             SlotBG_Legendary;                                  // 0x04E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          IsHeldItem;                                        // 0x04E8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4E9[0x7];                                      // 0x04E9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	FMulticastInlineDelegateProperty_             OnBecameHeldItem;                                  // 0x04F0(0x0010)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, BlueprintAssignable, BlueprintCallable)
	struct FSlateColor                            SlotTintColor;                                     // 0x0500(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            DefaultSlotTintColor;                              // 0x0514(0x0014)(Edit, BlueprintVisible, DisableEditOnInstance)
	bool                                          ShowItemType;                                      // 0x0528(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BindData(class UOdyUIData* NewUIData);
	void ChangeFillColor(const struct FLinearColor& FillColor);
	void ChangeItemImage(class UTexture* OldValue, class UTexture* NewValue);
	void ChangeOpacityOnHeld(bool RestoreOpacity);
	void ChangeStyle();
	void ChangeVisual_GearSlot(bool IsSelected);
	void ChangeVisual_InventorySlot(bool IsSelected);
	void ConsumeOnHold(bool OldValue, bool NewValue);
	void ExecuteUbergraph_WBP_InventorySlot(int32 EntryPoint);
	void Get_Item_Is_Consumable_On_Hold(bool* bIsConsumableOnHold);
	void Get_Item_Is_Throwable(bool* bIsThrowable);
	void GetItemCountAsInt(int32* Count);
	void GetItemIsGun(bool* bIsGun);
	void IsEnergized(bool* bIsEnergized);
	void IsEnergized_Gear(bool IsEnergized);
	void OnBecameHeldItem__DelegateSignature();
	void OnEnergizedStateChange(bool OldValue, bool NewValue);
	void OnGearSlotBecameEnergized__DelegateSignature(bool NewEnergizedState);
	void OnInitialized();
	void OnIsGearItemChanged(bool OldValue, bool NewValue);
	void OnItemCountChanged(int32 OldValue, int32 NewValue);
	void OnItemToolTipUpdated__DelegateSignature();
	void OnRarityChanged(int32 OldValue, int32 NewValue);
	void OnThrowableOnlyChanged(bool OldValue, bool NewValue);
	void OnTooltipTextChange(const class FText& OldValue, const class FText& NewValue);
	void PreConstruct(bool IsDesignTime);
	void ResetUI();
	void SetIsHeld(bool OldValue, bool NewValue);
	void SetItemImage(class UTexture* Value);
	void SetSize();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_InventorySlot_C">();
	}
	static class UWBP_InventorySlot_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_InventorySlot_C>();
	}
};
static_assert(alignof(UWBP_InventorySlot_C) == 0x000008, "Wrong alignment on UWBP_InventorySlot_C");
static_assert(sizeof(UWBP_InventorySlot_C) == 0x000530, "Wrong size on UWBP_InventorySlot_C");
static_assert(offsetof(UWBP_InventorySlot_C, UberGraphFrame) == 0x000398, "Member 'UWBP_InventorySlot_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, BackgroundGear) == 0x0003A0, "Member 'UWBP_InventorySlot_C::BackgroundGear' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, BackgroundInventory) == 0x0003A8, "Member 'UWBP_InventorySlot_C::BackgroundInventory' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, CurrentValue) == 0x0003B0, "Member 'UWBP_InventorySlot_C::CurrentValue' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, Gear_ScaleBox) == 0x0003B8, "Member 'UWBP_InventorySlot_C::Gear_ScaleBox' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, Item_ScaleBox) == 0x0003C0, "Member 'UWBP_InventorySlot_C::Item_ScaleBox' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemCount_ScaleBox) == 0x0003C8, "Member 'UWBP_InventorySlot_C::ItemCount_ScaleBox' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemGear_Portrait) == 0x0003D0, "Member 'UWBP_InventorySlot_C::ItemGear_Portrait' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemGear_RarityLabel) == 0x0003D8, "Member 'UWBP_InventorySlot_C::ItemGear_RarityLabel' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemGear_Triangle) == 0x0003E0, "Member 'UWBP_InventorySlot_C::ItemGear_Triangle' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemType) == 0x0003E8, "Member 'UWBP_InventorySlot_C::ItemType' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemType_Switcher) == 0x0003F0, "Member 'UWBP_InventorySlot_C::ItemType_Switcher' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemTypeIcon) == 0x0003F8, "Member 'UWBP_InventorySlot_C::ItemTypeIcon' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemTypeIconContainer) == 0x000400, "Member 'UWBP_InventorySlot_C::ItemTypeIconContainer' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemTypeOuterPanel) == 0x000408, "Member 'UWBP_InventorySlot_C::ItemTypeOuterPanel' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemTypeText) == 0x000410, "Member 'UWBP_InventorySlot_C::ItemTypeText' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, MaxValue) == 0x000418, "Member 'UWBP_InventorySlot_C::MaxValue' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SelectIconInventory) == 0x000420, "Member 'UWBP_InventorySlot_C::SelectIconInventory' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SizeBox) == 0x000428, "Member 'UWBP_InventorySlot_C::SizeBox' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ConsumablesBGColor) == 0x000430, "Member 'UWBP_InventorySlot_C::ConsumablesBGColor' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, HideOnEmpty) == 0x000440, "Member 'UWBP_InventorySlot_C::HideOnEmpty' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, Size) == 0x000448, "Member 'UWBP_InventorySlot_C::Size' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, IsAGearSlot) == 0x000458, "Member 'UWBP_InventorySlot_C::IsAGearSlot' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotType) == 0x00045C, "Member 'UWBP_InventorySlot_C::SlotType' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, EmptyTexture) == 0x000468, "Member 'UWBP_InventorySlot_C::EmptyTexture' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, DebugIsSelected) == 0x000470, "Member 'UWBP_InventorySlot_C::DebugIsSelected' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, DebugIsEnergized) == 0x000471, "Member 'UWBP_InventorySlot_C::DebugIsEnergized' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ItemTooltip) == 0x000478, "Member 'UWBP_InventorySlot_C::ItemTooltip' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, OnItemToolTipUpdated) == 0x000488, "Member 'UWBP_InventorySlot_C::OnItemToolTipUpdated' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ThrowOnlyLinearColor) == 0x000498, "Member 'UWBP_InventorySlot_C::ThrowOnlyLinearColor' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, InstantTypeLinearColor) == 0x0004A8, "Member 'UWBP_InventorySlot_C::InstantTypeLinearColor' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, OnGearSlotBecameEnergized) == 0x0004B8, "Member 'UWBP_InventorySlot_C::OnGearSlotBecameEnergized' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotBG_Common) == 0x0004C8, "Member 'UWBP_InventorySlot_C::SlotBG_Common' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotBG_Rare) == 0x0004D0, "Member 'UWBP_InventorySlot_C::SlotBG_Rare' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotBG_Epic) == 0x0004D8, "Member 'UWBP_InventorySlot_C::SlotBG_Epic' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotBG_Legendary) == 0x0004E0, "Member 'UWBP_InventorySlot_C::SlotBG_Legendary' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, IsHeldItem) == 0x0004E8, "Member 'UWBP_InventorySlot_C::IsHeldItem' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, OnBecameHeldItem) == 0x0004F0, "Member 'UWBP_InventorySlot_C::OnBecameHeldItem' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, SlotTintColor) == 0x000500, "Member 'UWBP_InventorySlot_C::SlotTintColor' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, DefaultSlotTintColor) == 0x000514, "Member 'UWBP_InventorySlot_C::DefaultSlotTintColor' has a wrong offset!");
static_assert(offsetof(UWBP_InventorySlot_C, ShowItemType) == 0x000528, "Member 'UWBP_InventorySlot_C::ShowItemType' has a wrong offset!");

}

