#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_Teleporter

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "SnapNet_structs.hpp"
#include "InteractiveEntity_Base_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass E_Teleporter.E_Teleporter_C
// 0x01B8 (0x0678 - 0x04C0)
class AE_Teleporter_C final : public AInteractiveEntity_Base_C
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame_E_Teleporter_C;                     // 0x04C0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   OptionalTextRender;                                // 0x04C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   DirectionVisual;                                   // 0x04D0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   WarpPointVisual;                                   // 0x04D8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        WarpTargetPosition;                                // 0x04E0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UBoxComponent*                          WarpAOEBox;                                        // 0x04E8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	struct FVector                                RelativeWarpLocation;                              // 0x04F0(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TArray<EObjectTypeQuery>                      WarpObjectTypes;                                   // 0x0508(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	struct FVector                                ManualWarpLocation;                                // 0x0518(0x0018)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WarpAOEExtents;                                    // 0x0530(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                WarpAOEOffset;                                     // 0x0548(0x0018)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSnapNetPropertyBoolean                ShowText;                                          // 0x0560(0x0018)(Edit, BlueprintVisible)
	struct FSnapNetPropertyString                 TextString;                                        // 0x0578(0x0030)(Edit, BlueprintVisible)
	struct FSnapNetPropertyInt32                  DirectionAngleIndicator;                           // 0x05A8(0x0038)(Edit, BlueprintVisible)
	struct FSnapNetPropertyBoolean                UseFullMeshes;                                     // 0x05E0(0x0018)(Edit, BlueprintVisible)
	struct FSnapNetPropertyVector                 WarpExtentsNetworked;                              // 0x05F8(0x0080)(Edit, BlueprintVisible, DisableEditOnInstance)

public:
	void ExecuteUbergraph_E_Teleporter(int32 EntryPoint);
	void InteractionCompleted(class AActor* InteractingActor);
	void ReceiveBeginPlay();
	void UserConstructionScript();

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"E_Teleporter_C">();
	}
	static class AE_Teleporter_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AE_Teleporter_C>();
	}
};
static_assert(alignof(AE_Teleporter_C) == 0x000008, "Wrong alignment on AE_Teleporter_C");
static_assert(sizeof(AE_Teleporter_C) == 0x000678, "Wrong size on AE_Teleporter_C");
static_assert(offsetof(AE_Teleporter_C, UberGraphFrame_E_Teleporter_C) == 0x0004C0, "Member 'AE_Teleporter_C::UberGraphFrame_E_Teleporter_C' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, OptionalTextRender) == 0x0004C8, "Member 'AE_Teleporter_C::OptionalTextRender' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, DirectionVisual) == 0x0004D0, "Member 'AE_Teleporter_C::DirectionVisual' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpPointVisual) == 0x0004D8, "Member 'AE_Teleporter_C::WarpPointVisual' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpTargetPosition) == 0x0004E0, "Member 'AE_Teleporter_C::WarpTargetPosition' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpAOEBox) == 0x0004E8, "Member 'AE_Teleporter_C::WarpAOEBox' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, RelativeWarpLocation) == 0x0004F0, "Member 'AE_Teleporter_C::RelativeWarpLocation' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpObjectTypes) == 0x000508, "Member 'AE_Teleporter_C::WarpObjectTypes' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, ManualWarpLocation) == 0x000518, "Member 'AE_Teleporter_C::ManualWarpLocation' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpAOEExtents) == 0x000530, "Member 'AE_Teleporter_C::WarpAOEExtents' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpAOEOffset) == 0x000548, "Member 'AE_Teleporter_C::WarpAOEOffset' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, ShowText) == 0x000560, "Member 'AE_Teleporter_C::ShowText' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, TextString) == 0x000578, "Member 'AE_Teleporter_C::TextString' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, DirectionAngleIndicator) == 0x0005A8, "Member 'AE_Teleporter_C::DirectionAngleIndicator' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, UseFullMeshes) == 0x0005E0, "Member 'AE_Teleporter_C::UseFullMeshes' has a wrong offset!");
static_assert(offsetof(AE_Teleporter_C, WarpExtentsNetworked) == 0x0005F8, "Member 'AE_Teleporter_C::WarpExtentsNetworked' has a wrong offset!");

}

