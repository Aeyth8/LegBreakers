#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_BreakableBase

#include "Basic.hpp"

#include "Matcha_structs.hpp"


namespace SDK::Params
{

// Function E_BreakableBase.E_BreakableBase_C.ExecuteUbergraph_E_BreakableBase
// 0x0090 (0x0090 - 0x0000)
struct E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombinedFXInfo                        K2Node_MakeStruct_CombinedFXInfo;                  // 0x0008(0x0088)(NoDestructor)
};
static_assert(alignof(E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase) == 0x000008, "Wrong alignment on E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase");
static_assert(sizeof(E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase) == 0x000090, "Wrong size on E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase");
static_assert(offsetof(E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase, EntryPoint) == 0x000000, "Member 'E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase::EntryPoint' has a wrong offset!");
static_assert(offsetof(E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase, K2Node_MakeStruct_CombinedFXInfo) == 0x000008, "Member 'E_BreakableBase_C_ExecuteUbergraph_E_BreakableBase::K2Node_MakeStruct_CombinedFXInfo' has a wrong offset!");

// Function E_BreakableBase.E_BreakableBase_C.UpdateCollision
// 0x0001 (0x0001 - 0x0000)
struct E_BreakableBase_C_UpdateCollision final
{
public:
	bool                                          CallFunc_IsAlive_ReturnValue;                      // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_BreakableBase_C_UpdateCollision) == 0x000001, "Wrong alignment on E_BreakableBase_C_UpdateCollision");
static_assert(sizeof(E_BreakableBase_C_UpdateCollision) == 0x000001, "Wrong size on E_BreakableBase_C_UpdateCollision");
static_assert(offsetof(E_BreakableBase_C_UpdateCollision, CallFunc_IsAlive_ReturnValue) == 0x000000, "Member 'E_BreakableBase_C_UpdateCollision::CallFunc_IsAlive_ReturnValue' has a wrong offset!");

}

