#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnapNet

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum SnapNet.ESnapNetMontageUpdateType
// NumValues: 0x0003
enum class ESnapNetMontageUpdateType : uint8
{
	Normal                                   = 0,
	ForceTimeSync                            = 1,
	ESnapNetMontageUpdateType_MAX            = 2,
};

// Enum SnapNet.ESnapNetClientConnectionStatus
// NumValues: 0x0004
enum class ESnapNetClientConnectionStatus : uint8
{
	Disconnected                             = 0,
	Connecting                               = 1,
	Connected                                = 2,
	ESnapNetClientConnectionStatus_MAX       = 3,
};

// Enum SnapNet.ESnapNetEntityInstantReplayBehavior
// NumValues: 0x0003
enum class ESnapNetEntityInstantReplayBehavior : uint8
{
	Historical                               = 0,
	Latest                                   = 1,
	ESnapNetEntityInstantReplayBehavior_MAX  = 2,
};

// Enum SnapNet.ESnapNetTransformSyncMode
// NumValues: 0x0006
enum class ESnapNetTransformSyncMode : uint8
{
	None                                     = 0,
	PositionOnly                             = 1,
	RotationOnly                             = 2,
	PositionAndRotation                      = 3,
	RigidBody                                = 4,
	ESnapNetTransformSyncMode_MAX            = 5,
};

// Enum SnapNet.ESnapNetPropertyRelevance
// NumValues: 0x0009
enum class ESnapNetPropertyRelevance : uint8
{
	Always                                   = 0,
	Never                                    = 1,
	Simulated                                = 2,
	NotSimulated                             = 3,
	Spectated                                = 4,
	NotSpectated                             = 5,
	SimulatedOrSpectated                     = 6,
	NeitherSimulatedNorSpectated             = 7,
	ESnapNetPropertyRelevance_MAX            = 8,
};

// Enum SnapNet.ESnapNetInterpolation
// NumValues: 0x0003
enum class ESnapNetInterpolation : uint8
{
	InterpolateToValue                       = 0,
	SnapToValue                              = 1,
	ESnapNetInterpolation_MAX                = 2,
};

// Enum SnapNet.ESnapNetFloatEncodingType
// NumValues: 0x0004
enum class ESnapNetFloatEncodingType : uint32
{
	FixedRange                               = 0,
	FloatingPoint                            = 1,
	SignedRange                              = 2,
	ESnapNetFloatEncodingType_MAX            = 3,
};

// Enum SnapNet.ESnapNetRotatorEncodingSource
// NumValues: 0x0004
enum class ESnapNetRotatorEncodingSource : uint8
{
	Custom                                   = 0,
	SimulatedOrSpectatedDefault              = 1,
	NeitherSimulatedNorSpectatedDefault      = 2,
	ESnapNetRotatorEncodingSource_MAX        = 3,
};

// Enum SnapNet.ESnapNetRotatorInterpolationMethod
// NumValues: 0x0003
enum class ESnapNetRotatorInterpolationMethod : uint8
{
	PerAxisLinearInterpolation               = 0,
	SphericalLinearInterpolation             = 1,
	ESnapNetRotatorInterpolationMethod_MAX   = 2,
};

// Enum SnapNet.ESnapNetPositionEncodingSource
// NumValues: 0x0003
enum class ESnapNetPositionEncodingSource : uint8
{
	SimulatedOrSpectatedDefault              = 0,
	NeitherSimulatedNorSpectatedDefault      = 1,
	ESnapNetPositionEncodingSource_MAX       = 2,
};

// Enum SnapNet.ESnapNetEntityPredictionAtSpawn
// NumValues: 0x0005
enum class ESnapNetEntityPredictionAtSpawn : uint8
{
	Default                                  = 0,
	None                                     = 1,
	Owner                                    = 2,
	All                                      = 3,
	ESnapNetEntityPredictionAtSpawn_MAX      = 4,
};

// Enum SnapNet.ESnapNetEntityPredictionMode
// NumValues: 0x0004
enum class ESnapNetEntityPredictionMode : uint8
{
	None                                     = 1,
	Owner                                    = 2,
	All                                      = 3,
	ESnapNetEntityPredictionMode_MAX         = 4,
};

// Enum SnapNet.ESnapNetPredictionMode
// NumValues: 0x0004
enum class ESnapNetPredictionMode : uint8
{
	EntireSimulation                         = 0,
	LocalPlayersOnly                         = 1,
	Upgraded                                 = 2,
	ESnapNetPredictionMode_MAX               = 3,
};

// Enum SnapNet.ESnapNetRenderInterpolationMethod
// NumValues: 0x0003
enum class ESnapNetRenderInterpolationMethod : uint8
{
	PartialTick                              = 0,
	PreviousTicks                            = 1,
	ESnapNetRenderInterpolationMethod_MAX    = 2,
};

// Enum SnapNet.ESnapNetSimulationFrameType
// NumValues: 0x0006
enum class ESnapNetSimulationFrameType : uint8
{
	None                                     = 0,
	Authoritative                            = 1,
	Partial                                  = 2,
	Prediction                               = 3,
	Reconciliation                           = 4,
	ESnapNetSimulationFrameType_MAX          = 5,
};

// ScriptStruct SnapNet.SnapNetProperty
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FSnapNetProperty
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	ESnapNetPropertyRelevance                     Relevance;                                         // 0x0008(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          UseAsEventId;                                      // 0x0009(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_A[0x6];                                        // 0x000A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetProperty) == 0x000008, "Wrong alignment on FSnapNetProperty");
static_assert(sizeof(FSnapNetProperty) == 0x000010, "Wrong size on FSnapNetProperty");
static_assert(offsetof(FSnapNetProperty, Relevance) == 0x000008, "Member 'FSnapNetProperty::Relevance' has a wrong offset!");
static_assert(offsetof(FSnapNetProperty, UseAsEventId) == 0x000009, "Member 'FSnapNetProperty::UseAsEventId' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyWithInterpolation
// 0x0008 (0x0018 - 0x0010)
struct FSnapNetPropertyWithInterpolation : public FSnapNetProperty
{
public:
	bool                                          DiscontinuityFlag;                                 // 0x0010(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          Interpolate;                                       // 0x0011(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          DiscontinuitiesSupported;                          // 0x0012(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_13[0x5];                                       // 0x0013(0x0005)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyWithInterpolation) == 0x000008, "Wrong alignment on FSnapNetPropertyWithInterpolation");
static_assert(sizeof(FSnapNetPropertyWithInterpolation) == 0x000018, "Wrong size on FSnapNetPropertyWithInterpolation");
static_assert(offsetof(FSnapNetPropertyWithInterpolation, DiscontinuityFlag) == 0x000010, "Member 'FSnapNetPropertyWithInterpolation::DiscontinuityFlag' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyWithInterpolation, Interpolate) == 0x000011, "Member 'FSnapNetPropertyWithInterpolation::Interpolate' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyWithInterpolation, DiscontinuitiesSupported) == 0x000012, "Member 'FSnapNetPropertyWithInterpolation::DiscontinuitiesSupported' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyVectorBase
// 0x0020 (0x0038 - 0x0018)
struct FSnapNetPropertyVectorBase : public FSnapNetPropertyWithInterpolation
{
public:
	bool                                          Clamped;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                Value;                                             // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyVectorBase) == 0x000008, "Wrong alignment on FSnapNetPropertyVectorBase");
static_assert(sizeof(FSnapNetPropertyVectorBase) == 0x000038, "Wrong size on FSnapNetPropertyVectorBase");
static_assert(offsetof(FSnapNetPropertyVectorBase, Clamped) == 0x000018, "Member 'FSnapNetPropertyVectorBase::Clamped' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyVectorBase, Value) == 0x000020, "Member 'FSnapNetPropertyVectorBase::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyPrimaryAsset
// 0x0048 (0x0058 - 0x0010)
struct FSnapNetPropertyPrimaryAsset final : public FSnapNetProperty
{
public:
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                Object;                                            // 0x0020(0x0008)(ZeroConstructor, Transient, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FSoftObjectPath                        ObjectPath;                                        // 0x0028(0x0020)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         PrimaryAssetIndex;                                 // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	struct FPrimaryAssetType                      PrimaryAssetType;                                  // 0x004C(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_54[0x4];                                       // 0x0054(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyPrimaryAsset) == 0x000008, "Wrong alignment on FSnapNetPropertyPrimaryAsset");
static_assert(sizeof(FSnapNetPropertyPrimaryAsset) == 0x000058, "Wrong size on FSnapNetPropertyPrimaryAsset");
static_assert(offsetof(FSnapNetPropertyPrimaryAsset, Object) == 0x000020, "Member 'FSnapNetPropertyPrimaryAsset::Object' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyPrimaryAsset, ObjectPath) == 0x000028, "Member 'FSnapNetPropertyPrimaryAsset::ObjectPath' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyPrimaryAsset, PrimaryAssetIndex) == 0x000048, "Member 'FSnapNetPropertyPrimaryAsset::PrimaryAssetIndex' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyPrimaryAsset, PrimaryAssetType) == 0x00004C, "Member 'FSnapNetPropertyPrimaryAsset::PrimaryAssetType' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetVector2DEncoding
// 0x0038 (0x0038 - 0x0000)
struct FSnapNetVector2DEncoding final
{
public:
	ESnapNetFloatEncodingType                     Encoding;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              MinValue;                                          // 0x0008(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector2D                              MaxValue;                                          // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Precision;                                         // 0x0028(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExponentBits;                                      // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SignificandBits;                                   // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetVector2DEncoding) == 0x000008, "Wrong alignment on FSnapNetVector2DEncoding");
static_assert(sizeof(FSnapNetVector2DEncoding) == 0x000038, "Wrong size on FSnapNetVector2DEncoding");
static_assert(offsetof(FSnapNetVector2DEncoding, Encoding) == 0x000000, "Member 'FSnapNetVector2DEncoding::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetVector2DEncoding, MinValue) == 0x000008, "Member 'FSnapNetVector2DEncoding::MinValue' has a wrong offset!");
static_assert(offsetof(FSnapNetVector2DEncoding, MaxValue) == 0x000018, "Member 'FSnapNetVector2DEncoding::MaxValue' has a wrong offset!");
static_assert(offsetof(FSnapNetVector2DEncoding, Precision) == 0x000028, "Member 'FSnapNetVector2DEncoding::Precision' has a wrong offset!");
static_assert(offsetof(FSnapNetVector2DEncoding, ExponentBits) == 0x000030, "Member 'FSnapNetVector2DEncoding::ExponentBits' has a wrong offset!");
static_assert(offsetof(FSnapNetVector2DEncoding, SignificandBits) == 0x000034, "Member 'FSnapNetVector2DEncoding::SignificandBits' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyVector2DBase
// 0x0018 (0x0030 - 0x0018)
struct FSnapNetPropertyVector2DBase : public FSnapNetPropertyWithInterpolation
{
public:
	bool                                          Clamped;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              Value;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyVector2DBase) == 0x000008, "Wrong alignment on FSnapNetPropertyVector2DBase");
static_assert(sizeof(FSnapNetPropertyVector2DBase) == 0x000030, "Wrong size on FSnapNetPropertyVector2DBase");
static_assert(offsetof(FSnapNetPropertyVector2DBase, Clamped) == 0x000018, "Member 'FSnapNetPropertyVector2DBase::Clamped' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyVector2DBase, Value) == 0x000020, "Member 'FSnapNetPropertyVector2DBase::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyVector2D
// 0x0038 (0x0068 - 0x0030)
struct FSnapNetPropertyVector2D final : public FSnapNetPropertyVector2DBase
{
public:
	struct FSnapNetVector2DEncoding               Encoding;                                          // 0x0030(0x0038)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyVector2D) == 0x000008, "Wrong alignment on FSnapNetPropertyVector2D");
static_assert(sizeof(FSnapNetPropertyVector2D) == 0x000068, "Wrong size on FSnapNetPropertyVector2D");
static_assert(offsetof(FSnapNetPropertyVector2D, Encoding) == 0x000030, "Member 'FSnapNetPropertyVector2D::Encoding' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyStringBase
// 0x0008 (0x0018 - 0x0010)
struct FSnapNetPropertyStringBase : public FSnapNetProperty
{
public:
	int32                                         StringPoolStringIndex;                             // 0x0010(0x0004)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          StringPoolStringIndexCached;                       // 0x0014(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyStringBase) == 0x000008, "Wrong alignment on FSnapNetPropertyStringBase");
static_assert(sizeof(FSnapNetPropertyStringBase) == 0x000018, "Wrong size on FSnapNetPropertyStringBase");
static_assert(offsetof(FSnapNetPropertyStringBase, StringPoolStringIndex) == 0x000010, "Member 'FSnapNetPropertyStringBase::StringPoolStringIndex' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyStringBase, StringPoolStringIndexCached) == 0x000014, "Member 'FSnapNetPropertyStringBase::StringPoolStringIndexCached' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetFloatEncoding
// 0x0018 (0x0018 - 0x0000)
struct FSnapNetFloatEncoding final
{
public:
	ESnapNetFloatEncodingType                     Encoding;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExponentBits;                                      // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SignificandBits;                                   // 0x0014(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetFloatEncoding) == 0x000004, "Wrong alignment on FSnapNetFloatEncoding");
static_assert(sizeof(FSnapNetFloatEncoding) == 0x000018, "Wrong size on FSnapNetFloatEncoding");
static_assert(offsetof(FSnapNetFloatEncoding, Encoding) == 0x000000, "Member 'FSnapNetFloatEncoding::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetFloatEncoding, MinValue) == 0x000004, "Member 'FSnapNetFloatEncoding::MinValue' has a wrong offset!");
static_assert(offsetof(FSnapNetFloatEncoding, MaxValue) == 0x000008, "Member 'FSnapNetFloatEncoding::MaxValue' has a wrong offset!");
static_assert(offsetof(FSnapNetFloatEncoding, Precision) == 0x00000C, "Member 'FSnapNetFloatEncoding::Precision' has a wrong offset!");
static_assert(offsetof(FSnapNetFloatEncoding, ExponentBits) == 0x000010, "Member 'FSnapNetFloatEncoding::ExponentBits' has a wrong offset!");
static_assert(offsetof(FSnapNetFloatEncoding, SignificandBits) == 0x000014, "Member 'FSnapNetFloatEncoding::SignificandBits' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyFloat
// 0x0028 (0x0040 - 0x0018)
struct FSnapNetPropertyFloat final : public FSnapNetPropertyWithInterpolation
{
public:
	bool                                          Clamped;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnapNetFloatEncoding                  Encoding;                                          // 0x001C(0x0018)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
	bool                                          Loop;                                              // 0x0034(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_35[0x3];                                       // 0x0035(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Value;                                             // 0x0038(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyFloat) == 0x000008, "Wrong alignment on FSnapNetPropertyFloat");
static_assert(sizeof(FSnapNetPropertyFloat) == 0x000040, "Wrong size on FSnapNetPropertyFloat");
static_assert(offsetof(FSnapNetPropertyFloat, Clamped) == 0x000018, "Member 'FSnapNetPropertyFloat::Clamped' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyFloat, Encoding) == 0x00001C, "Member 'FSnapNetPropertyFloat::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyFloat, Loop) == 0x000034, "Member 'FSnapNetPropertyFloat::Loop' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyFloat, Value) == 0x000038, "Member 'FSnapNetPropertyFloat::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyBoolean
// 0x0008 (0x0018 - 0x0010)
struct FSnapNetPropertyBoolean final : public FSnapNetProperty
{
public:
	bool                                          Value;                                             // 0x0010(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyBoolean) == 0x000008, "Wrong alignment on FSnapNetPropertyBoolean");
static_assert(sizeof(FSnapNetPropertyBoolean) == 0x000018, "Wrong size on FSnapNetPropertyBoolean");
static_assert(offsetof(FSnapNetPropertyBoolean, Value) == 0x000010, "Member 'FSnapNetPropertyBoolean::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetVectorEncoding
// 0x0048 (0x0048 - 0x0000)
struct FSnapNetVectorEncoding final
{
public:
	ESnapNetFloatEncodingType                     Encoding;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                MinValue;                                          // 0x0008(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                MaxValue;                                          // 0x0020(0x0018)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Precision;                                         // 0x0038(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExponentBits;                                      // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SignificandBits;                                   // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetVectorEncoding) == 0x000008, "Wrong alignment on FSnapNetVectorEncoding");
static_assert(sizeof(FSnapNetVectorEncoding) == 0x000048, "Wrong size on FSnapNetVectorEncoding");
static_assert(offsetof(FSnapNetVectorEncoding, Encoding) == 0x000000, "Member 'FSnapNetVectorEncoding::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetVectorEncoding, MinValue) == 0x000008, "Member 'FSnapNetVectorEncoding::MinValue' has a wrong offset!");
static_assert(offsetof(FSnapNetVectorEncoding, MaxValue) == 0x000020, "Member 'FSnapNetVectorEncoding::MaxValue' has a wrong offset!");
static_assert(offsetof(FSnapNetVectorEncoding, Precision) == 0x000038, "Member 'FSnapNetVectorEncoding::Precision' has a wrong offset!");
static_assert(offsetof(FSnapNetVectorEncoding, ExponentBits) == 0x000040, "Member 'FSnapNetVectorEncoding::ExponentBits' has a wrong offset!");
static_assert(offsetof(FSnapNetVectorEncoding, SignificandBits) == 0x000044, "Member 'FSnapNetVectorEncoding::SignificandBits' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyVector
// 0x0048 (0x0080 - 0x0038)
struct FSnapNetPropertyVector final : public FSnapNetPropertyVectorBase
{
public:
	struct FSnapNetVectorEncoding                 Encoding;                                          // 0x0038(0x0048)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyVector) == 0x000008, "Wrong alignment on FSnapNetPropertyVector");
static_assert(sizeof(FSnapNetPropertyVector) == 0x000080, "Wrong size on FSnapNetPropertyVector");
static_assert(offsetof(FSnapNetPropertyVector, Encoding) == 0x000038, "Member 'FSnapNetPropertyVector::Encoding' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyInt32Base
// 0x0018 (0x0030 - 0x0018)
struct FSnapNetPropertyInt32Base : public FSnapNetPropertyWithInterpolation
{
public:
	bool                                          Clamped;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_19[0x3];                                       // 0x0019(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         Value;                                             // 0x001C(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_20[0x10];                                      // 0x0020(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyInt32Base) == 0x000008, "Wrong alignment on FSnapNetPropertyInt32Base");
static_assert(sizeof(FSnapNetPropertyInt32Base) == 0x000030, "Wrong size on FSnapNetPropertyInt32Base");
static_assert(offsetof(FSnapNetPropertyInt32Base, Clamped) == 0x000018, "Member 'FSnapNetPropertyInt32Base::Clamped' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyInt32Base, Value) == 0x00001C, "Member 'FSnapNetPropertyInt32Base::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyInt32
// 0x0008 (0x0038 - 0x0030)
struct FSnapNetPropertyInt32 final : public FSnapNetPropertyInt32Base
{
public:
	int32                                         MinValue;                                          // 0x0030(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         MaxValue;                                          // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyInt32) == 0x000008, "Wrong alignment on FSnapNetPropertyInt32");
static_assert(sizeof(FSnapNetPropertyInt32) == 0x000038, "Wrong size on FSnapNetPropertyInt32");
static_assert(offsetof(FSnapNetPropertyInt32, MinValue) == 0x000030, "Member 'FSnapNetPropertyInt32::MinValue' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyInt32, MaxValue) == 0x000034, "Member 'FSnapNetPropertyInt32::MaxValue' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetIndexedPrimaryAssetList
// 0x0068 (0x0068 - 0x0000)
struct FSnapNetIndexedPrimaryAssetList final
{
public:
	TMap<struct FPrimaryAssetId, int32>           AssetIdToIndexMap;                                 // 0x0000(0x0050)(Edit, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	TArray<struct FAssetData>                     AssetList;                                         // 0x0050(0x0010)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, Protected, NativeAccessSpecifierProtected)
	struct FPrimaryAssetType                      AssetType;                                         // 0x0060(0x0008)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetIndexedPrimaryAssetList) == 0x000008, "Wrong alignment on FSnapNetIndexedPrimaryAssetList");
static_assert(sizeof(FSnapNetIndexedPrimaryAssetList) == 0x000068, "Wrong size on FSnapNetIndexedPrimaryAssetList");
static_assert(offsetof(FSnapNetIndexedPrimaryAssetList, AssetIdToIndexMap) == 0x000000, "Member 'FSnapNetIndexedPrimaryAssetList::AssetIdToIndexMap' has a wrong offset!");
static_assert(offsetof(FSnapNetIndexedPrimaryAssetList, AssetList) == 0x000050, "Member 'FSnapNetIndexedPrimaryAssetList::AssetList' has a wrong offset!");
static_assert(offsetof(FSnapNetIndexedPrimaryAssetList, AssetType) == 0x000060, "Member 'FSnapNetIndexedPrimaryAssetList::AssetType' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyClientIndex
// 0x0000 (0x0030 - 0x0030)
struct FSnapNetPropertyClientIndex final : public FSnapNetPropertyInt32Base
{
};
static_assert(alignof(FSnapNetPropertyClientIndex) == 0x000008, "Wrong alignment on FSnapNetPropertyClientIndex");
static_assert(sizeof(FSnapNetPropertyClientIndex) == 0x000030, "Wrong size on FSnapNetPropertyClientIndex");

// ScriptStruct SnapNet.SnapNetDoubleEncoding
// 0x0028 (0x0028 - 0x0000)
struct FSnapNetDoubleEncoding final
{
public:
	ESnapNetFloatEncodingType                     Encoding;                                          // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        MinValue;                                          // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        MaxValue;                                          // 0x0010(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Precision;                                         // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ExponentBits;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SignificandBits;                                   // 0x0024(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetDoubleEncoding) == 0x000008, "Wrong alignment on FSnapNetDoubleEncoding");
static_assert(sizeof(FSnapNetDoubleEncoding) == 0x000028, "Wrong size on FSnapNetDoubleEncoding");
static_assert(offsetof(FSnapNetDoubleEncoding, Encoding) == 0x000000, "Member 'FSnapNetDoubleEncoding::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetDoubleEncoding, MinValue) == 0x000008, "Member 'FSnapNetDoubleEncoding::MinValue' has a wrong offset!");
static_assert(offsetof(FSnapNetDoubleEncoding, MaxValue) == 0x000010, "Member 'FSnapNetDoubleEncoding::MaxValue' has a wrong offset!");
static_assert(offsetof(FSnapNetDoubleEncoding, Precision) == 0x000018, "Member 'FSnapNetDoubleEncoding::Precision' has a wrong offset!");
static_assert(offsetof(FSnapNetDoubleEncoding, ExponentBits) == 0x000020, "Member 'FSnapNetDoubleEncoding::ExponentBits' has a wrong offset!");
static_assert(offsetof(FSnapNetDoubleEncoding, SignificandBits) == 0x000024, "Member 'FSnapNetDoubleEncoding::SignificandBits' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyDouble
// 0x0040 (0x0058 - 0x0018)
struct FSnapNetPropertyDouble final : public FSnapNetPropertyWithInterpolation
{
public:
	bool                                          Clamped;                                           // 0x0018(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSnapNetDoubleEncoding                 Encoding;                                          // 0x0020(0x0028)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPrivate)
	bool                                          Loop;                                              // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        Value;                                             // 0x0050(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSnapNetPropertyDouble) == 0x000008, "Wrong alignment on FSnapNetPropertyDouble");
static_assert(sizeof(FSnapNetPropertyDouble) == 0x000058, "Wrong size on FSnapNetPropertyDouble");
static_assert(offsetof(FSnapNetPropertyDouble, Clamped) == 0x000018, "Member 'FSnapNetPropertyDouble::Clamped' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyDouble, Encoding) == 0x000020, "Member 'FSnapNetPropertyDouble::Encoding' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyDouble, Loop) == 0x000048, "Member 'FSnapNetPropertyDouble::Loop' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyDouble, Value) == 0x000050, "Member 'FSnapNetPropertyDouble::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyEntityIndex
// 0x0058 (0x0068 - 0x0010)
struct FSnapNetPropertyEntityIndex final : public FSnapNetProperty
{
public:
	int32                                         EntityIndex;                                       // 0x0010(0x0004)(Edit, ZeroConstructor, DisableEditOnTemplate, Transient, EditConst, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftComponentReference                EntityReference;                                   // 0x0018(0x0048)(Edit, DisableEditOnTemplate, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          EntityIndexDirty;                                  // 0x0060(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyEntityIndex) == 0x000008, "Wrong alignment on FSnapNetPropertyEntityIndex");
static_assert(sizeof(FSnapNetPropertyEntityIndex) == 0x000068, "Wrong size on FSnapNetPropertyEntityIndex");
static_assert(offsetof(FSnapNetPropertyEntityIndex, EntityIndex) == 0x000010, "Member 'FSnapNetPropertyEntityIndex::EntityIndex' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyEntityIndex, EntityReference) == 0x000018, "Member 'FSnapNetPropertyEntityIndex::EntityReference' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyEntityIndex, EntityIndexDirty) == 0x000060, "Member 'FSnapNetPropertyEntityIndex::EntityIndexDirty' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyEnum
// 0x0018 (0x0048 - 0x0030)
struct FSnapNetPropertyEnum final : public FSnapNetPropertyInt32Base
{
public:
	class UEnum*                                  Enum;                                              // 0x0030(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x10];                                      // 0x0038(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertyEnum) == 0x000008, "Wrong alignment on FSnapNetPropertyEnum");
static_assert(sizeof(FSnapNetPropertyEnum) == 0x000048, "Wrong size on FSnapNetPropertyEnum");
static_assert(offsetof(FSnapNetPropertyEnum, Enum) == 0x000030, "Member 'FSnapNetPropertyEnum::Enum' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyPlayerIndex
// 0x0000 (0x0030 - 0x0030)
struct FSnapNetPropertyPlayerIndex final : public FSnapNetPropertyInt32Base
{
};
static_assert(alignof(FSnapNetPropertyPlayerIndex) == 0x000008, "Wrong alignment on FSnapNetPropertyPlayerIndex");
static_assert(sizeof(FSnapNetPropertyPlayerIndex) == 0x000030, "Wrong size on FSnapNetPropertyPlayerIndex");

// ScriptStruct SnapNet.SnapNetPropertyQuaternion
// 0x0028 (0x0040 - 0x0018)
struct FSnapNetPropertyQuaternion final : public FSnapNetPropertyWithInterpolation
{
public:
	int32                                         BitsPerAxis;                                       // 0x0018(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FQuat                                  Value;                                             // 0x0020(0x0020)(Edit, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSnapNetPropertyQuaternion) == 0x000010, "Wrong alignment on FSnapNetPropertyQuaternion");
static_assert(sizeof(FSnapNetPropertyQuaternion) == 0x000040, "Wrong size on FSnapNetPropertyQuaternion");
static_assert(offsetof(FSnapNetPropertyQuaternion, BitsPerAxis) == 0x000018, "Member 'FSnapNetPropertyQuaternion::BitsPerAxis' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyQuaternion, Value) == 0x000020, "Member 'FSnapNetPropertyQuaternion::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyRotator
// 0x0020 (0x0038 - 0x0018)
struct FSnapNetPropertyRotator final : public FSnapNetPropertyWithInterpolation
{
public:
	ESnapNetRotatorEncodingSource                 EncodingSource;                                    // 0x0018(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	ESnapNetRotatorInterpolationMethod            InterpolationMethod;                               // 0x0019(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_1A[0x2];                                       // 0x001A(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Precision;                                         // 0x001C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	struct FRotator                               Value;                                             // 0x0020(0x0018)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSnapNetPropertyRotator) == 0x000008, "Wrong alignment on FSnapNetPropertyRotator");
static_assert(sizeof(FSnapNetPropertyRotator) == 0x000038, "Wrong size on FSnapNetPropertyRotator");
static_assert(offsetof(FSnapNetPropertyRotator, EncodingSource) == 0x000018, "Member 'FSnapNetPropertyRotator::EncodingSource' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyRotator, InterpolationMethod) == 0x000019, "Member 'FSnapNetPropertyRotator::InterpolationMethod' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyRotator, Precision) == 0x00001C, "Member 'FSnapNetPropertyRotator::Precision' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyRotator, Value) == 0x000020, "Member 'FSnapNetPropertyRotator::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertySoftObjectPath
// 0x0050 (0x0068 - 0x0018)
struct FSnapNetPropertySoftObjectPath final : public FSnapNetPropertyStringBase
{
public:
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   StringPoolName;                                    // 0x0020(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 StringValue;                                       // 0x0028(0x0010)(ZeroConstructor, Transient, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_38[0x8];                                       // 0x0038(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSoftObjectPath                        Value;                                             // 0x0040(0x0020)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	bool                                          bValueChangedExplicitly;                           // 0x0060(0x0001)(ZeroConstructor, Transient, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FSnapNetPropertySoftObjectPath) == 0x000008, "Wrong alignment on FSnapNetPropertySoftObjectPath");
static_assert(sizeof(FSnapNetPropertySoftObjectPath) == 0x000068, "Wrong size on FSnapNetPropertySoftObjectPath");
static_assert(offsetof(FSnapNetPropertySoftObjectPath, StringPoolName) == 0x000020, "Member 'FSnapNetPropertySoftObjectPath::StringPoolName' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertySoftObjectPath, StringValue) == 0x000028, "Member 'FSnapNetPropertySoftObjectPath::StringValue' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertySoftObjectPath, Value) == 0x000040, "Member 'FSnapNetPropertySoftObjectPath::Value' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertySoftObjectPath, bValueChangedExplicitly) == 0x000060, "Member 'FSnapNetPropertySoftObjectPath::bValueChangedExplicitly' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyString
// 0x0018 (0x0030 - 0x0018)
struct FSnapNetPropertyString final : public FSnapNetPropertyStringBase
{
public:
	class FName                                   StringPoolName;                                    // 0x0018(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 Value;                                             // 0x0020(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FSnapNetPropertyString) == 0x000008, "Wrong alignment on FSnapNetPropertyString");
static_assert(sizeof(FSnapNetPropertyString) == 0x000030, "Wrong size on FSnapNetPropertyString");
static_assert(offsetof(FSnapNetPropertyString, StringPoolName) == 0x000018, "Member 'FSnapNetPropertyString::StringPoolName' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyString, Value) == 0x000020, "Member 'FSnapNetPropertyString::Value' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyAngularVelocity
// 0x0000 (0x0038 - 0x0038)
struct FSnapNetPropertyAngularVelocity final : public FSnapNetPropertyVectorBase
{
};
static_assert(alignof(FSnapNetPropertyAngularVelocity) == 0x000008, "Wrong alignment on FSnapNetPropertyAngularVelocity");
static_assert(sizeof(FSnapNetPropertyAngularVelocity) == 0x000038, "Wrong size on FSnapNetPropertyAngularVelocity");

// ScriptStruct SnapNet.SnapNetPropertyPosition
// 0x0010 (0x0048 - 0x0038)
struct FSnapNetPropertyPosition final : public FSnapNetPropertyVectorBase
{
public:
	ESnapNetPositionEncodingSource                EncodingSource;                                    // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        SmallDeltaThreshold;                               // 0x0040(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FSnapNetPropertyPosition) == 0x000008, "Wrong alignment on FSnapNetPropertyPosition");
static_assert(sizeof(FSnapNetPropertyPosition) == 0x000048, "Wrong size on FSnapNetPropertyPosition");
static_assert(offsetof(FSnapNetPropertyPosition, EncodingSource) == 0x000038, "Member 'FSnapNetPropertyPosition::EncodingSource' has a wrong offset!");
static_assert(offsetof(FSnapNetPropertyPosition, SmallDeltaThreshold) == 0x000040, "Member 'FSnapNetPropertyPosition::SmallDeltaThreshold' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetPropertyVelocity
// 0x0000 (0x0038 - 0x0038)
struct FSnapNetPropertyVelocity final : public FSnapNetPropertyVectorBase
{
};
static_assert(alignof(FSnapNetPropertyVelocity) == 0x000008, "Wrong alignment on FSnapNetPropertyVelocity");
static_assert(sizeof(FSnapNetPropertyVelocity) == 0x000038, "Wrong size on FSnapNetPropertyVelocity");

// ScriptStruct SnapNet.SnapNetServerSettings
// 0x0028 (0x0028 - 0x0000)
struct FSnapNetServerSettings final
{
public:
	bool                                          AcceptRemoteConnections;                           // 0x0000(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 Address;                                           // 0x0008(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         Port;                                              // 0x0018(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	TSubclassOf<class USnapNetServerScript>       ServerScriptClass;                                 // 0x0020(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetServerSettings) == 0x000008, "Wrong alignment on FSnapNetServerSettings");
static_assert(sizeof(FSnapNetServerSettings) == 0x000028, "Wrong size on FSnapNetServerSettings");
static_assert(offsetof(FSnapNetServerSettings, AcceptRemoteConnections) == 0x000000, "Member 'FSnapNetServerSettings::AcceptRemoteConnections' has a wrong offset!");
static_assert(offsetof(FSnapNetServerSettings, Address) == 0x000008, "Member 'FSnapNetServerSettings::Address' has a wrong offset!");
static_assert(offsetof(FSnapNetServerSettings, Port) == 0x000018, "Member 'FSnapNetServerSettings::Port' has a wrong offset!");
static_assert(offsetof(FSnapNetServerSettings, ServerScriptClass) == 0x000020, "Member 'FSnapNetServerSettings::ServerScriptClass' has a wrong offset!");

// ScriptStruct SnapNet.SnapNetStringPool
// 0x000C (0x000C - 0x0000)
struct FSnapNetStringPool final
{
public:
	class FName                                   Name;                                              // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         MaxStrings;                                        // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FSnapNetStringPool) == 0x000004, "Wrong alignment on FSnapNetStringPool");
static_assert(sizeof(FSnapNetStringPool) == 0x00000C, "Wrong size on FSnapNetStringPool");
static_assert(offsetof(FSnapNetStringPool, Name) == 0x000000, "Member 'FSnapNetStringPool::Name' has a wrong offset!");
static_assert(offsetof(FSnapNetStringPool, MaxStrings) == 0x000008, "Member 'FSnapNetStringPool::MaxStrings' has a wrong offset!");

}

