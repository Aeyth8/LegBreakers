#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: MatchaGameplayAbilities

#include "Basic.hpp"

#include "DataRegistry_structs.hpp"
#include "NetCore_structs.hpp"
#include "Engine_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectAttributeCaptureSource
// NumValues: 0x0003
enum class EMatchaGameplayEffectAttributeCaptureSource : uint8
{
	Source                                   = 0,
	Target                                   = 1,
	EMatchaGameplayEffectAttributeCaptureSource_MAX = 2,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayTagEventType
// NumValues: 0x0003
enum class EMatchaGameplayTagEventType : uint8
{
	NewOrRemoved                             = 0,
	AnyCountChange                           = 1,
	EMatchaGameplayTagEventType_MAX          = 2,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectMagnitudeCalculation
// NumValues: 0x0005
enum class EMatchaGameplayEffectMagnitudeCalculation : uint8
{
	ScalableFloat                            = 0,
	AttributeBased                           = 1,
	CustomCalculationClass                   = 2,
	SetByCaller                              = 3,
	EMatchaGameplayEffectMagnitudeCalculation_MAX = 4,
};

// Enum MatchaGameplayAbilities.EMatchaAttributeBasedFloatCalculationType
// NumValues: 0x0005
enum class EMatchaAttributeBasedFloatCalculationType : uint8
{
	AttributeMagnitude                       = 0,
	AttributeBaseValue                       = 1,
	AttributeBonusMagnitude                  = 2,
	AttributeMagnitudeEvaluatedUpToChannel   = 3,
	EMatchaAttributeBasedFloatCalculationType_MAX = 4,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectVersion
// NumValues: 0x0005
enum class EMatchaGameplayEffectVersion : uint8
{
	Monolithic                               = 0,
	Modular53                                = 1,
	AbilitiesComponent53                     = 2,
	Current                                  = 2,
	EMatchaGameplayEffectVersion_MAX         = 3,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectScopedModifierAggregatorType
// NumValues: 0x0003
enum class EMatchaGameplayEffectScopedModifierAggregatorType : uint8
{
	CapturedAttributeBacked                  = 0,
	Transient                                = 1,
	EMatchaGameplayEffectScopedModifierAggregatorType_MAX = 2,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectDurationType
// NumValues: 0x0004
enum class EMatchaGameplayEffectDurationType : uint8
{
	Instant                                  = 0,
	Infinite                                 = 1,
	HasDuration                              = 2,
	EMatchaGameplayEffectDurationType_MAX    = 3,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectStackingDurationPolicy
// NumValues: 0x0003
enum class EMatchaGameplayEffectStackingDurationPolicy : uint8
{
	RefreshOnSuccessfulApplication           = 0,
	NeverRefresh                             = 1,
	EMatchaGameplayEffectStackingDurationPolicy_MAX = 2,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectStackingPeriodPolicy
// NumValues: 0x0003
enum class EMatchaGameplayEffectStackingPeriodPolicy : uint8
{
	ResetOnSuccessfulApplication             = 0,
	NeverReset                               = 1,
	EMatchaGameplayEffectStackingPeriodPolicy_MAX = 2,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectStackingExpirationPolicy
// NumValues: 0x0004
enum class EMatchaGameplayEffectStackingExpirationPolicy : uint8
{
	ClearEntireStack                         = 0,
	RemoveSingleStackAndRefreshDuration      = 1,
	RefreshDuration                          = 2,
	EMatchaGameplayEffectStackingExpirationPolicy_MAX = 3,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectPeriodInhibitionRemovedPolicy
// NumValues: 0x0004
enum class EMatchaGameplayEffectPeriodInhibitionRemovedPolicy : uint8
{
	NeverReset                               = 0,
	ResetPeriod                              = 1,
	ExecuteAndResetPeriod                    = 2,
	EMatchaGameplayEffectPeriodInhibitionRemovedPolicy_MAX = 3,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayModEvaluationChannel
// NumValues: 0x000C
enum class EMatchaGameplayModEvaluationChannel : uint8
{
	Channel0                                 = 0,
	Channel1                                 = 1,
	Channel2                                 = 2,
	Channel3                                 = 3,
	Channel4                                 = 4,
	Channel5                                 = 5,
	Channel6                                 = 6,
	Channel7                                 = 7,
	Channel8                                 = 8,
	Channel9                                 = 9,
	Channel_MAX                              = 10,
	EMatchaGameplayModEvaluationChannel_MAX  = 11,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayModOp
// NumValues: 0x0005
enum class EMatchaGameplayModOp : uint8
{
	Additive                                 = 0,
	Multiplicitive                           = 1,
	Division                                 = 2,
	Override                                 = 3,
	Max                                      = 4,
};

// Enum MatchaGameplayAbilities.EMatchaGameplayEffectStackingType
// NumValues: 0x0004
enum class EMatchaGameplayEffectStackingType : uint8
{
	None                                     = 0,
	AggregateBySource                        = 1,
	AggregateByTarget                        = 2,
	EMatchaGameplayEffectStackingType_MAX    = 3,
};

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayAttribute
// 0x0038 (0x0038 - 0x0000)
struct FMatchaGameplayAttribute final
{
public:
	class FString                                 AttributeName;                                     // 0x0000(0x0010)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  Attribute;                                         // 0x0010(0x0020)(Edit, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	class UStruct*                                AttributeOwner;                                    // 0x0030(0x0008)(Edit, ZeroConstructor, EditConst, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMatchaGameplayAttribute) == 0x000008, "Wrong alignment on FMatchaGameplayAttribute");
static_assert(sizeof(FMatchaGameplayAttribute) == 0x000038, "Wrong size on FMatchaGameplayAttribute");
static_assert(offsetof(FMatchaGameplayAttribute, AttributeName) == 0x000000, "Member 'FMatchaGameplayAttribute::AttributeName' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayAttribute, Attribute) == 0x000010, "Member 'FMatchaGameplayAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayAttribute, AttributeOwner) == 0x000030, "Member 'FMatchaGameplayAttribute::AttributeOwner' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectModifiedAttribute
// 0x0040 (0x0040 - 0x0000)
struct FMatchaGameplayEffectModifiedAttribute final
{
public:
	struct FMatchaGameplayAttribute               Attribute;                                         // 0x0000(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         TotalMagnitude;                                    // 0x0038(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectModifiedAttribute) == 0x000008, "Wrong alignment on FMatchaGameplayEffectModifiedAttribute");
static_assert(sizeof(FMatchaGameplayEffectModifiedAttribute) == 0x000040, "Wrong size on FMatchaGameplayEffectModifiedAttribute");
static_assert(offsetof(FMatchaGameplayEffectModifiedAttribute, Attribute) == 0x000000, "Member 'FMatchaGameplayEffectModifiedAttribute::Attribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectModifiedAttribute, TotalMagnitude) == 0x000038, "Member 'FMatchaGameplayEffectModifiedAttribute::TotalMagnitude' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectContextHandle
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMatchaGameplayEffectContextHandle final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectContextHandle) == 0x000008, "Wrong alignment on FMatchaGameplayEffectContextHandle");
static_assert(sizeof(FMatchaGameplayEffectContextHandle) == 0x000018, "Wrong size on FMatchaGameplayEffectContextHandle");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectAttributeCaptureDefinition
// 0x0040 (0x0040 - 0x0000)
struct FMatchaGameplayEffectAttributeCaptureDefinition final
{
public:
	struct FMatchaGameplayAttribute               AttributeToCapture;                                // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayEffectAttributeCaptureSource   AttributeSource;                                   // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bSnapshot;                                         // 0x0039(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3A[0x6];                                       // 0x003A(0x0006)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectAttributeCaptureDefinition) == 0x000008, "Wrong alignment on FMatchaGameplayEffectAttributeCaptureDefinition");
static_assert(sizeof(FMatchaGameplayEffectAttributeCaptureDefinition) == 0x000040, "Wrong size on FMatchaGameplayEffectAttributeCaptureDefinition");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureDefinition, AttributeToCapture) == 0x000000, "Member 'FMatchaGameplayEffectAttributeCaptureDefinition::AttributeToCapture' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureDefinition, AttributeSource) == 0x000038, "Member 'FMatchaGameplayEffectAttributeCaptureDefinition::AttributeSource' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureDefinition, bSnapshot) == 0x000039, "Member 'FMatchaGameplayEffectAttributeCaptureDefinition::bSnapshot' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectAttributeCaptureSpec
// 0x0050 (0x0050 - 0x0000)
struct FMatchaGameplayEffectAttributeCaptureSpec final
{
public:
	struct FMatchaGameplayEffectAttributeCaptureDefinition BackingDefinition;                                 // 0x0000(0x0040)(HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x10];                                      // 0x0040(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectAttributeCaptureSpec) == 0x000008, "Wrong alignment on FMatchaGameplayEffectAttributeCaptureSpec");
static_assert(sizeof(FMatchaGameplayEffectAttributeCaptureSpec) == 0x000050, "Wrong size on FMatchaGameplayEffectAttributeCaptureSpec");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureSpec, BackingDefinition) == 0x000000, "Member 'FMatchaGameplayEffectAttributeCaptureSpec::BackingDefinition' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectAttributeCaptureSpecContainer
// 0x0028 (0x0028 - 0x0000)
struct FMatchaGameplayEffectAttributeCaptureSpecContainer final
{
public:
	TArray<struct FMatchaGameplayEffectAttributeCaptureSpec> SourceAttributes;                                  // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	TArray<struct FMatchaGameplayEffectAttributeCaptureSpec> TargetAttributes;                                  // 0x0010(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	bool                                          bHasNonSnapshottedAttributes;                      // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectAttributeCaptureSpecContainer) == 0x000008, "Wrong alignment on FMatchaGameplayEffectAttributeCaptureSpecContainer");
static_assert(sizeof(FMatchaGameplayEffectAttributeCaptureSpecContainer) == 0x000028, "Wrong size on FMatchaGameplayEffectAttributeCaptureSpecContainer");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureSpecContainer, SourceAttributes) == 0x000000, "Member 'FMatchaGameplayEffectAttributeCaptureSpecContainer::SourceAttributes' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureSpecContainer, TargetAttributes) == 0x000010, "Member 'FMatchaGameplayEffectAttributeCaptureSpecContainer::TargetAttributes' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectAttributeCaptureSpecContainer, bHasNonSnapshottedAttributes) == 0x000020, "Member 'FMatchaGameplayEffectAttributeCaptureSpecContainer::bHasNonSnapshottedAttributes' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaTagContainerAggregator
// 0x0068 (0x0068 - 0x0000)
struct FMatchaTagContainerAggregator final
{
public:
	struct FGameplayTagContainer                  CapturedActorTags;                                 // 0x0000(0x0020)(NativeAccessSpecifierPrivate)
	struct FGameplayTagContainer                  CapturedSpecTags;                                  // 0x0020(0x0020)(NativeAccessSpecifierPrivate)
	uint8                                         Pad_40[0x28];                                      // 0x0040(0x0028)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaTagContainerAggregator) == 0x000008, "Wrong alignment on FMatchaTagContainerAggregator");
static_assert(sizeof(FMatchaTagContainerAggregator) == 0x000068, "Wrong size on FMatchaTagContainerAggregator");
static_assert(offsetof(FMatchaTagContainerAggregator, CapturedActorTags) == 0x000000, "Member 'FMatchaTagContainerAggregator::CapturedActorTags' has a wrong offset!");
static_assert(offsetof(FMatchaTagContainerAggregator, CapturedSpecTags) == 0x000020, "Member 'FMatchaTagContainerAggregator::CapturedSpecTags' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaModifierSpec
// 0x0004 (0x0004 - 0x0000)
struct FMatchaModifierSpec final
{
public:
	float                                         EvaluatedMagnitude;                                // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
};
static_assert(alignof(FMatchaModifierSpec) == 0x000004, "Wrong alignment on FMatchaModifierSpec");
static_assert(sizeof(FMatchaModifierSpec) == 0x000004, "Wrong size on FMatchaModifierSpec");
static_assert(offsetof(FMatchaModifierSpec, EvaluatedMagnitude) == 0x000000, "Member 'FMatchaModifierSpec::EvaluatedMagnitude' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectSpec
// 0x0230 (0x0230 - 0x0000)
struct FMatchaGameplayEffectSpec final
{
public:
	class UMatchaGameplayEffect*                  Def;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchaGameplayEffectModifiedAttribute> ModifiedAttributes;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMatchaGameplayEffectAttributeCaptureSpecContainer CapturedRelevantAttributes;                        // 0x0018(0x0028)(RepSkip, NativeAccessSpecifierPublic)
	float                                         Duration;                                          // 0x0040(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Period;                                            // 0x0044(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchaTagContainerAggregator          CapturedSourceTags;                                // 0x0048(0x0068)(RepSkip, NativeAccessSpecifierPublic)
	struct FMatchaTagContainerAggregator          CapturedTargetTags;                                // 0x00B0(0x0068)(RepSkip, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DynamicGrantedTags;                                // 0x0118(0x0020)(NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  DynamicAssetTags;                                  // 0x0138(0x0020)(NativeAccessSpecifierPublic)
	TArray<struct FMatchaModifierSpec>            Modifiers;                                         // 0x0158(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	int32                                         StackCount;                                        // 0x0168(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         bCompletedSourceAttributeCapture : 1;              // 0x016C(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bCompletedTargetAttributeCapture : 1;              // 0x016C(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         bDurationLocked : 1;                               // 0x016C(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic))
	uint8                                         Pad_16D[0xA3];                                     // 0x016D(0x00A3)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayEffectContextHandle     EffectContext;                                     // 0x0210(0x0018)(NativeAccessSpecifierPrivate)
	float                                         Level;                                             // 0x0228(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_22C[0x4];                                      // 0x022C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectSpec) == 0x000008, "Wrong alignment on FMatchaGameplayEffectSpec");
static_assert(sizeof(FMatchaGameplayEffectSpec) == 0x000230, "Wrong size on FMatchaGameplayEffectSpec");
static_assert(offsetof(FMatchaGameplayEffectSpec, Def) == 0x000000, "Member 'FMatchaGameplayEffectSpec::Def' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, ModifiedAttributes) == 0x000008, "Member 'FMatchaGameplayEffectSpec::ModifiedAttributes' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, CapturedRelevantAttributes) == 0x000018, "Member 'FMatchaGameplayEffectSpec::CapturedRelevantAttributes' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, Duration) == 0x000040, "Member 'FMatchaGameplayEffectSpec::Duration' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, Period) == 0x000044, "Member 'FMatchaGameplayEffectSpec::Period' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, CapturedSourceTags) == 0x000048, "Member 'FMatchaGameplayEffectSpec::CapturedSourceTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, CapturedTargetTags) == 0x0000B0, "Member 'FMatchaGameplayEffectSpec::CapturedTargetTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, DynamicGrantedTags) == 0x000118, "Member 'FMatchaGameplayEffectSpec::DynamicGrantedTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, DynamicAssetTags) == 0x000138, "Member 'FMatchaGameplayEffectSpec::DynamicAssetTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, Modifiers) == 0x000158, "Member 'FMatchaGameplayEffectSpec::Modifiers' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, StackCount) == 0x000168, "Member 'FMatchaGameplayEffectSpec::StackCount' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, EffectContext) == 0x000210, "Member 'FMatchaGameplayEffectSpec::EffectContext' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpec, Level) == 0x000228, "Member 'FMatchaGameplayEffectSpec::Level' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaActiveGameplayEffect
// 0x02BC (0x02C8 - 0x000C)
struct FMatchaActiveGameplayEffect final : public FFastArraySerializerItem
{
public:
	uint8                                         Pad_C[0xC];                                        // 0x000C(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayEffectSpec              Spec;                                              // 0x0018(0x0230)(NativeAccessSpecifierPublic)
	float                                         StartServerWorldTime;                              // 0x0248(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CachedStartServerWorldTime;                        // 0x024C(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartWorldTime;                                    // 0x0250(0x0004)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsInhibited;                                      // 0x0254(0x0001)(ZeroConstructor, IsPlainOldData, RepSkip, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_255[0x73];                                     // 0x0255(0x0073)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaActiveGameplayEffect) == 0x000008, "Wrong alignment on FMatchaActiveGameplayEffect");
static_assert(sizeof(FMatchaActiveGameplayEffect) == 0x0002C8, "Wrong size on FMatchaActiveGameplayEffect");
static_assert(offsetof(FMatchaActiveGameplayEffect, Spec) == 0x000018, "Member 'FMatchaActiveGameplayEffect::Spec' has a wrong offset!");
static_assert(offsetof(FMatchaActiveGameplayEffect, StartServerWorldTime) == 0x000248, "Member 'FMatchaActiveGameplayEffect::StartServerWorldTime' has a wrong offset!");
static_assert(offsetof(FMatchaActiveGameplayEffect, CachedStartServerWorldTime) == 0x00024C, "Member 'FMatchaActiveGameplayEffect::CachedStartServerWorldTime' has a wrong offset!");
static_assert(offsetof(FMatchaActiveGameplayEffect, StartWorldTime) == 0x000250, "Member 'FMatchaActiveGameplayEffect::StartWorldTime' has a wrong offset!");
static_assert(offsetof(FMatchaActiveGameplayEffect, bIsInhibited) == 0x000254, "Member 'FMatchaActiveGameplayEffect::bIsInhibited' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaAttributeSet
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x08) FMatchaAttributeSet
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaAttributeSet) == 0x000008, "Wrong alignment on FMatchaAttributeSet");
static_assert(sizeof(FMatchaAttributeSet) == 0x000018, "Wrong size on FMatchaAttributeSet");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectVersion
// 0x0001 (0x0001 - 0x0000)
struct FMatchaGameplayEffectVersion final
{
public:
	uint8                                         Pad_0[0x1];                                        // 0x0000(0x0001)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectVersion) == 0x000001, "Wrong alignment on FMatchaGameplayEffectVersion");
static_assert(sizeof(FMatchaGameplayEffectVersion) == 0x000001, "Wrong size on FMatchaGameplayEffectVersion");

// ScriptStruct MatchaGameplayAbilities.MatchaInheritedTagContainer
// 0x0060 (0x0060 - 0x0000)
struct FMatchaInheritedTagContainer final
{
public:
	struct FGameplayTagContainer                  CombinedTags;                                      // 0x0000(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Added;                                             // 0x0020(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  Removed;                                           // 0x0040(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaInheritedTagContainer) == 0x000008, "Wrong alignment on FMatchaInheritedTagContainer");
static_assert(sizeof(FMatchaInheritedTagContainer) == 0x000060, "Wrong size on FMatchaInheritedTagContainer");
static_assert(offsetof(FMatchaInheritedTagContainer, CombinedTags) == 0x000000, "Member 'FMatchaInheritedTagContainer::CombinedTags' has a wrong offset!");
static_assert(offsetof(FMatchaInheritedTagContainer, Added) == 0x000020, "Member 'FMatchaInheritedTagContainer::Added' has a wrong offset!");
static_assert(offsetof(FMatchaInheritedTagContainer, Removed) == 0x000040, "Member 'FMatchaInheritedTagContainer::Removed' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayAttributeData
// 0x0008 (0x0008 - 0x0000)
struct alignas(0x08) FMatchaGameplayAttributeData
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayAttributeData) == 0x000008, "Wrong alignment on FMatchaGameplayAttributeData");
static_assert(sizeof(FMatchaGameplayAttributeData) == 0x000008, "Wrong size on FMatchaGameplayAttributeData");

// ScriptStruct MatchaGameplayAbilities.MatchaAttributeMetaData
// 0x0028 (0x0030 - 0x0008)
struct FMatchaAttributeMetaData final : public FTableRowBase
{
public:
	float                                         BaseValue;                                         // 0x0008(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MinValue;                                          // 0x000C(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxValue;                                          // 0x0010(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0x4];                                       // 0x0014(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 DerivedAttributeInfo;                              // 0x0018(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bCanStack;                                         // 0x0028(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_29[0x7];                                       // 0x0029(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaAttributeMetaData) == 0x000008, "Wrong alignment on FMatchaAttributeMetaData");
static_assert(sizeof(FMatchaAttributeMetaData) == 0x000030, "Wrong size on FMatchaAttributeMetaData");
static_assert(offsetof(FMatchaAttributeMetaData, BaseValue) == 0x000008, "Member 'FMatchaAttributeMetaData::BaseValue' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeMetaData, MinValue) == 0x00000C, "Member 'FMatchaAttributeMetaData::MinValue' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeMetaData, MaxValue) == 0x000010, "Member 'FMatchaAttributeMetaData::MaxValue' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeMetaData, DerivedAttributeInfo) == 0x000018, "Member 'FMatchaAttributeMetaData::DerivedAttributeInfo' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeMetaData, bCanStack) == 0x000028, "Member 'FMatchaAttributeMetaData::bCanStack' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaNetSerializeScriptStructCache
// 0x0010 (0x0010 - 0x0000)
struct FMatchaNetSerializeScriptStructCache final
{
public:
	TArray<class UScriptStruct*>                  ScriptStructs;                                     // 0x0000(0x0010)(ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaNetSerializeScriptStructCache) == 0x000008, "Wrong alignment on FMatchaNetSerializeScriptStructCache");
static_assert(sizeof(FMatchaNetSerializeScriptStructCache) == 0x000010, "Wrong size on FMatchaNetSerializeScriptStructCache");
static_assert(offsetof(FMatchaNetSerializeScriptStructCache, ScriptStructs) == 0x000000, "Member 'FMatchaNetSerializeScriptStructCache::ScriptStructs' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaActiveGameplayEffectHandle
// 0x0008 (0x0008 - 0x0000)
struct FMatchaActiveGameplayEffectHandle final
{
public:
	int32                                         Handle;                                            // 0x0000(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	bool                                          bPassedFiltersAndWasExecuted;                      // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaActiveGameplayEffectHandle) == 0x000004, "Wrong alignment on FMatchaActiveGameplayEffectHandle");
static_assert(sizeof(FMatchaActiveGameplayEffectHandle) == 0x000008, "Wrong size on FMatchaActiveGameplayEffectHandle");
static_assert(offsetof(FMatchaActiveGameplayEffectHandle, Handle) == 0x000000, "Member 'FMatchaActiveGameplayEffectHandle::Handle' has a wrong offset!");
static_assert(offsetof(FMatchaActiveGameplayEffectHandle, bPassedFiltersAndWasExecuted) == 0x000004, "Member 'FMatchaActiveGameplayEffectHandle::bPassedFiltersAndWasExecuted' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaScalableFloat
// 0x0028 (0x0028 - 0x0000)
struct FMatchaScalableFloat final
{
public:
	float                                         Value;                                             // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCurveTableRowHandle                   Curve;                                             // 0x0008(0x0010)(Edit, BlueprintVisible, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FDataRegistryType                      RegistryType;                                      // 0x0018(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaScalableFloat) == 0x000008, "Wrong alignment on FMatchaScalableFloat");
static_assert(sizeof(FMatchaScalableFloat) == 0x000028, "Wrong size on FMatchaScalableFloat");
static_assert(offsetof(FMatchaScalableFloat, Value) == 0x000000, "Member 'FMatchaScalableFloat::Value' has a wrong offset!");
static_assert(offsetof(FMatchaScalableFloat, Curve) == 0x000008, "Member 'FMatchaScalableFloat::Curve' has a wrong offset!");
static_assert(offsetof(FMatchaScalableFloat, RegistryType) == 0x000018, "Member 'FMatchaScalableFloat::RegistryType' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaAttributeBasedFloat
// 0x0110 (0x0110 - 0x0000)
struct FMatchaAttributeBasedFloat final
{
public:
	struct FMatchaScalableFloat                   Coefficient;                                       // 0x0000(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaScalableFloat                   PreMultiplyAdditiveValue;                          // 0x0028(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaScalableFloat                   PostMultiplyAdditiveValue;                         // 0x0050(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaGameplayEffectAttributeCaptureDefinition BackingAttribute;                                  // 0x0078(0x0040)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   AttributeCurve;                                    // 0x00B8(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaAttributeBasedFloatCalculationType     AttributeCalculationType;                          // 0x00C8(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayModEvaluationChannel           FinalChannel;                                      // 0x00C9(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_CA[0x6];                                       // 0x00CA(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTagContainer                  SourceTagFilter;                                   // 0x00D0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  TargetTagFilter;                                   // 0x00F0(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaAttributeBasedFloat) == 0x000008, "Wrong alignment on FMatchaAttributeBasedFloat");
static_assert(sizeof(FMatchaAttributeBasedFloat) == 0x000110, "Wrong size on FMatchaAttributeBasedFloat");
static_assert(offsetof(FMatchaAttributeBasedFloat, Coefficient) == 0x000000, "Member 'FMatchaAttributeBasedFloat::Coefficient' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, PreMultiplyAdditiveValue) == 0x000028, "Member 'FMatchaAttributeBasedFloat::PreMultiplyAdditiveValue' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, PostMultiplyAdditiveValue) == 0x000050, "Member 'FMatchaAttributeBasedFloat::PostMultiplyAdditiveValue' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, BackingAttribute) == 0x000078, "Member 'FMatchaAttributeBasedFloat::BackingAttribute' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, AttributeCurve) == 0x0000B8, "Member 'FMatchaAttributeBasedFloat::AttributeCurve' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, AttributeCalculationType) == 0x0000C8, "Member 'FMatchaAttributeBasedFloat::AttributeCalculationType' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, FinalChannel) == 0x0000C9, "Member 'FMatchaAttributeBasedFloat::FinalChannel' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, SourceTagFilter) == 0x0000D0, "Member 'FMatchaAttributeBasedFloat::SourceTagFilter' has a wrong offset!");
static_assert(offsetof(FMatchaAttributeBasedFloat, TargetTagFilter) == 0x0000F0, "Member 'FMatchaAttributeBasedFloat::TargetTagFilter' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaCustomCalculationBasedFloat
// 0x0090 (0x0090 - 0x0000)
struct FMatchaCustomCalculationBasedFloat final
{
public:
	TSubclassOf<class UMatchaGameplayModMagnitudeCalculation> CalculationClassMagnitude;                         // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchaScalableFloat                   Coefficient;                                       // 0x0008(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaScalableFloat                   PreMultiplyAdditiveValue;                          // 0x0030(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaScalableFloat                   PostMultiplyAdditiveValue;                         // 0x0058(0x0028)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FCurveTableRowHandle                   FinalLookupCurve;                                  // 0x0080(0x0010)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaCustomCalculationBasedFloat) == 0x000008, "Wrong alignment on FMatchaCustomCalculationBasedFloat");
static_assert(sizeof(FMatchaCustomCalculationBasedFloat) == 0x000090, "Wrong size on FMatchaCustomCalculationBasedFloat");
static_assert(offsetof(FMatchaCustomCalculationBasedFloat, CalculationClassMagnitude) == 0x000000, "Member 'FMatchaCustomCalculationBasedFloat::CalculationClassMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaCustomCalculationBasedFloat, Coefficient) == 0x000008, "Member 'FMatchaCustomCalculationBasedFloat::Coefficient' has a wrong offset!");
static_assert(offsetof(FMatchaCustomCalculationBasedFloat, PreMultiplyAdditiveValue) == 0x000030, "Member 'FMatchaCustomCalculationBasedFloat::PreMultiplyAdditiveValue' has a wrong offset!");
static_assert(offsetof(FMatchaCustomCalculationBasedFloat, PostMultiplyAdditiveValue) == 0x000058, "Member 'FMatchaCustomCalculationBasedFloat::PostMultiplyAdditiveValue' has a wrong offset!");
static_assert(offsetof(FMatchaCustomCalculationBasedFloat, FinalLookupCurve) == 0x000080, "Member 'FMatchaCustomCalculationBasedFloat::FinalLookupCurve' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaSetByCallerFloat
// 0x0010 (0x0010 - 0x0000)
struct FMatchaSetByCallerFloat final
{
public:
	class FName                                   DataName;                                          // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           DataTag;                                           // 0x0008(0x0008)(Edit, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaSetByCallerFloat) == 0x000004, "Wrong alignment on FMatchaSetByCallerFloat");
static_assert(sizeof(FMatchaSetByCallerFloat) == 0x000010, "Wrong size on FMatchaSetByCallerFloat");
static_assert(offsetof(FMatchaSetByCallerFloat, DataName) == 0x000000, "Member 'FMatchaSetByCallerFloat::DataName' has a wrong offset!");
static_assert(offsetof(FMatchaSetByCallerFloat, DataTag) == 0x000008, "Member 'FMatchaSetByCallerFloat::DataTag' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectModifierMagnitude
// 0x01E0 (0x01E0 - 0x0000)
struct FMatchaGameplayEffectModifierMagnitude final
{
public:
	EMatchaGameplayEffectMagnitudeCalculation     MagnitudeCalculationType;                          // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaScalableFloat                   ScalableFloatMagnitude;                            // 0x0008(0x0028)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMatchaAttributeBasedFloat             AttributeBasedMagnitude;                           // 0x0030(0x0110)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMatchaCustomCalculationBasedFloat     CustomMagnitude;                                   // 0x0140(0x0090)(Edit, DisableEditOnInstance, Protected, NativeAccessSpecifierProtected)
	struct FMatchaSetByCallerFloat                SetByCallerMagnitude;                              // 0x01D0(0x0010)(Edit, DisableEditOnInstance, NoDestructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMatchaGameplayEffectModifierMagnitude) == 0x000008, "Wrong alignment on FMatchaGameplayEffectModifierMagnitude");
static_assert(sizeof(FMatchaGameplayEffectModifierMagnitude) == 0x0001E0, "Wrong size on FMatchaGameplayEffectModifierMagnitude");
static_assert(offsetof(FMatchaGameplayEffectModifierMagnitude, MagnitudeCalculationType) == 0x000000, "Member 'FMatchaGameplayEffectModifierMagnitude::MagnitudeCalculationType' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectModifierMagnitude, ScalableFloatMagnitude) == 0x000008, "Member 'FMatchaGameplayEffectModifierMagnitude::ScalableFloatMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectModifierMagnitude, AttributeBasedMagnitude) == 0x000030, "Member 'FMatchaGameplayEffectModifierMagnitude::AttributeBasedMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectModifierMagnitude, CustomMagnitude) == 0x000140, "Member 'FMatchaGameplayEffectModifierMagnitude::CustomMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectModifierMagnitude, SetByCallerMagnitude) == 0x0001D0, "Member 'FMatchaGameplayEffectModifierMagnitude::SetByCallerMagnitude' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayTagRequirements
// 0x0088 (0x0088 - 0x0000)
struct FMatchaGameplayTagRequirements final
{
public:
	struct FGameplayTagContainer                  RequireTags;                                       // 0x0000(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  IgnoreTags;                                        // 0x0020(0x0020)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      TagQuery;                                          // 0x0040(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayTagRequirements) == 0x000008, "Wrong alignment on FMatchaGameplayTagRequirements");
static_assert(sizeof(FMatchaGameplayTagRequirements) == 0x000088, "Wrong size on FMatchaGameplayTagRequirements");
static_assert(offsetof(FMatchaGameplayTagRequirements, RequireTags) == 0x000000, "Member 'FMatchaGameplayTagRequirements::RequireTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagRequirements, IgnoreTags) == 0x000020, "Member 'FMatchaGameplayTagRequirements::IgnoreTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagRequirements, TagQuery) == 0x000040, "Member 'FMatchaGameplayTagRequirements::TagQuery' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayModEvaluationChannelSettings
// 0x0001 (0x0001 - 0x0000)
struct FMatchaGameplayModEvaluationChannelSettings final
{
public:
	EMatchaGameplayModEvaluationChannel           Channel;                                           // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMatchaGameplayModEvaluationChannelSettings) == 0x000001, "Wrong alignment on FMatchaGameplayModEvaluationChannelSettings");
static_assert(sizeof(FMatchaGameplayModEvaluationChannelSettings) == 0x000001, "Wrong size on FMatchaGameplayModEvaluationChannelSettings");
static_assert(offsetof(FMatchaGameplayModEvaluationChannelSettings, Channel) == 0x000000, "Member 'FMatchaGameplayModEvaluationChannelSettings::Channel' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectExecutionScopedModifierInfo
// 0x0348 (0x0348 - 0x0000)
struct FMatchaGameplayEffectExecutionScopedModifierInfo final
{
public:
	struct FMatchaGameplayEffectAttributeCaptureDefinition CapturedAttribute;                                 // 0x0000(0x0040)(Edit, DisableEditOnInstance, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           TransientAggregatorIdentifier;                     // 0x0040(0x0008)(Edit, DisableEditOnInstance, EditConst, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayEffectScopedModifierAggregatorType AggregatorType;                                    // 0x0048(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayModOp                          ModifierOp;                                        // 0x0049(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4A[0x6];                                       // 0x004A(0x0006)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayEffectModifierMagnitude ModifierMagnitude;                                 // 0x0050(0x01E0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaGameplayModEvaluationChannelSettings EvaluationChannelSettings;                         // 0x0230(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_231[0x7];                                      // 0x0231(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayTagRequirements         SourceTags;                                        // 0x0238(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaGameplayTagRequirements         TargetTags;                                        // 0x02C0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayEffectExecutionScopedModifierInfo) == 0x000008, "Wrong alignment on FMatchaGameplayEffectExecutionScopedModifierInfo");
static_assert(sizeof(FMatchaGameplayEffectExecutionScopedModifierInfo) == 0x000348, "Wrong size on FMatchaGameplayEffectExecutionScopedModifierInfo");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, CapturedAttribute) == 0x000000, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::CapturedAttribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, TransientAggregatorIdentifier) == 0x000040, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::TransientAggregatorIdentifier' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, AggregatorType) == 0x000048, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::AggregatorType' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, ModifierOp) == 0x000049, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::ModifierOp' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, ModifierMagnitude) == 0x000050, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::ModifierMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, EvaluationChannelSettings) == 0x000230, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::EvaluationChannelSettings' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, SourceTags) == 0x000238, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::SourceTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionScopedModifierInfo, TargetTags) == 0x0002C0, "Member 'FMatchaGameplayEffectExecutionScopedModifierInfo::TargetTags' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaConditionalGameplayEffect
// 0x0028 (0x0028 - 0x0000)
struct FMatchaConditionalGameplayEffect final
{
public:
	TSubclassOf<class UMatchaGameplayEffect>      EffectClass;                                       // 0x0000(0x0008)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  RequiredSourceTags;                                // 0x0008(0x0020)(Edit, BlueprintVisible, BlueprintReadOnly, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaConditionalGameplayEffect) == 0x000008, "Wrong alignment on FMatchaConditionalGameplayEffect");
static_assert(sizeof(FMatchaConditionalGameplayEffect) == 0x000028, "Wrong size on FMatchaConditionalGameplayEffect");
static_assert(offsetof(FMatchaConditionalGameplayEffect, EffectClass) == 0x000000, "Member 'FMatchaConditionalGameplayEffect::EffectClass' has a wrong offset!");
static_assert(offsetof(FMatchaConditionalGameplayEffect, RequiredSourceTags) == 0x000008, "Member 'FMatchaConditionalGameplayEffect::RequiredSourceTags' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectExecutionDefinition
// 0x0048 (0x0048 - 0x0000)
struct FMatchaGameplayEffectExecutionDefinition final
{
public:
	TSubclassOf<class UMatchaGameplayEffectExecutionCalculation> CalculationClass;                                  // 0x0000(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  PassedInTags;                                      // 0x0008(0x0020)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMatchaGameplayEffectExecutionScopedModifierInfo> CalculationModifiers;                              // 0x0028(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
	TArray<struct FMatchaConditionalGameplayEffect> ConditionalGameplayEffects;                        // 0x0038(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayEffectExecutionDefinition) == 0x000008, "Wrong alignment on FMatchaGameplayEffectExecutionDefinition");
static_assert(sizeof(FMatchaGameplayEffectExecutionDefinition) == 0x000048, "Wrong size on FMatchaGameplayEffectExecutionDefinition");
static_assert(offsetof(FMatchaGameplayEffectExecutionDefinition, CalculationClass) == 0x000000, "Member 'FMatchaGameplayEffectExecutionDefinition::CalculationClass' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionDefinition, PassedInTags) == 0x000008, "Member 'FMatchaGameplayEffectExecutionDefinition::PassedInTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionDefinition, CalculationModifiers) == 0x000028, "Member 'FMatchaGameplayEffectExecutionDefinition::CalculationModifiers' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectExecutionDefinition, ConditionalGameplayEffects) == 0x000038, "Member 'FMatchaGameplayEffectExecutionDefinition::ConditionalGameplayEffects' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayModifierInfo
// 0x0338 (0x0338 - 0x0000)
struct FMatchaGameplayModifierInfo final
{
public:
	struct FMatchaGameplayAttribute               Attribute;                                         // 0x0000(0x0038)(Edit, DisableEditOnInstance, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayModOp                          ModifierOp;                                        // 0x0038(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x7];                                       // 0x0039(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayEffectModifierMagnitude ModifierMagnitude;                                 // 0x0040(0x01E0)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaGameplayModEvaluationChannelSettings EvaluationChannelSettings;                         // 0x0220(0x0001)(Edit, DisableEditOnInstance, NoDestructor, NativeAccessSpecifierPublic)
	uint8                                         Pad_221[0x7];                                      // 0x0221(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayTagRequirements         SourceTags;                                        // 0x0228(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
	struct FMatchaGameplayTagRequirements         TargetTags;                                        // 0x02B0(0x0088)(Edit, DisableEditOnInstance, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayModifierInfo) == 0x000008, "Wrong alignment on FMatchaGameplayModifierInfo");
static_assert(sizeof(FMatchaGameplayModifierInfo) == 0x000338, "Wrong size on FMatchaGameplayModifierInfo");
static_assert(offsetof(FMatchaGameplayModifierInfo, Attribute) == 0x000000, "Member 'FMatchaGameplayModifierInfo::Attribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierInfo, ModifierOp) == 0x000038, "Member 'FMatchaGameplayModifierInfo::ModifierOp' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierInfo, ModifierMagnitude) == 0x000040, "Member 'FMatchaGameplayModifierInfo::ModifierMagnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierInfo, EvaluationChannelSettings) == 0x000220, "Member 'FMatchaGameplayModifierInfo::EvaluationChannelSettings' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierInfo, SourceTags) == 0x000228, "Member 'FMatchaGameplayModifierInfo::SourceTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierInfo, TargetTags) == 0x0002B0, "Member 'FMatchaGameplayModifierInfo::TargetTags' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectSpecForRPC
// 0x0078 (0x0078 - 0x0000)
struct FMatchaGameplayEffectSpecForRPC final
{
public:
	class UMatchaGameplayEffect*                  Def;                                               // 0x0000(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<struct FMatchaGameplayEffectModifiedAttribute> ModifiedAttributes;                                // 0x0008(0x0010)(ZeroConstructor, NativeAccessSpecifierPublic)
	struct FMatchaGameplayEffectContextHandle     EffectContext;                                     // 0x0018(0x0018)(NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedSourceTags;                              // 0x0030(0x0020)(NativeAccessSpecifierPublic)
	struct FGameplayTagContainer                  AggregatedTargetTags;                              // 0x0050(0x0020)(NativeAccessSpecifierPublic)
	float                                         Level;                                             // 0x0070(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         AbilityLevel;                                      // 0x0074(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayEffectSpecForRPC) == 0x000008, "Wrong alignment on FMatchaGameplayEffectSpecForRPC");
static_assert(sizeof(FMatchaGameplayEffectSpecForRPC) == 0x000078, "Wrong size on FMatchaGameplayEffectSpecForRPC");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, Def) == 0x000000, "Member 'FMatchaGameplayEffectSpecForRPC::Def' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, ModifiedAttributes) == 0x000008, "Member 'FMatchaGameplayEffectSpecForRPC::ModifiedAttributes' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, EffectContext) == 0x000018, "Member 'FMatchaGameplayEffectSpecForRPC::EffectContext' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, AggregatedSourceTags) == 0x000030, "Member 'FMatchaGameplayEffectSpecForRPC::AggregatedSourceTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, AggregatedTargetTags) == 0x000050, "Member 'FMatchaGameplayEffectSpecForRPC::AggregatedTargetTags' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, Level) == 0x000070, "Member 'FMatchaGameplayEffectSpecForRPC::Level' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectSpecForRPC, AbilityLevel) == 0x000074, "Member 'FMatchaGameplayEffectSpecForRPC::AbilityLevel' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectQuery
// 0x0198 (0x0198 - 0x0000)
struct FMatchaGameplayEffectQuery final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	TDelegate<void(const struct FMatchaActiveGameplayEffect& Effect, bool* bMatches)> CustomMatchDelegate_BP;                            // 0x0010(0x0010)(BlueprintVisible, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      OwningTagQuery;                                    // 0x0020(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      EffectTagQuery;                                    // 0x0068(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceTagQuery;                                    // 0x00B0(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FGameplayTagQuery                      SourceAggregateTagQuery;                           // 0x00F8(0x0048)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	struct FMatchaGameplayAttribute               ModifyingAttribute;                                // 0x0140(0x0038)(Edit, BlueprintVisible, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UObject*                                EffectSource;                                      // 0x0178(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatchaGameplayEffect>      EffectDefinition;                                  // 0x0180(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_188[0x10];                                     // 0x0188(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectQuery) == 0x000008, "Wrong alignment on FMatchaGameplayEffectQuery");
static_assert(sizeof(FMatchaGameplayEffectQuery) == 0x000198, "Wrong size on FMatchaGameplayEffectQuery");
static_assert(offsetof(FMatchaGameplayEffectQuery, CustomMatchDelegate_BP) == 0x000010, "Member 'FMatchaGameplayEffectQuery::CustomMatchDelegate_BP' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, OwningTagQuery) == 0x000020, "Member 'FMatchaGameplayEffectQuery::OwningTagQuery' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, EffectTagQuery) == 0x000068, "Member 'FMatchaGameplayEffectQuery::EffectTagQuery' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, SourceTagQuery) == 0x0000B0, "Member 'FMatchaGameplayEffectQuery::SourceTagQuery' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, SourceAggregateTagQuery) == 0x0000F8, "Member 'FMatchaGameplayEffectQuery::SourceAggregateTagQuery' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, ModifyingAttribute) == 0x000140, "Member 'FMatchaGameplayEffectQuery::ModifyingAttribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, EffectSource) == 0x000178, "Member 'FMatchaGameplayEffectQuery::EffectSource' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectQuery, EffectDefinition) == 0x000180, "Member 'FMatchaGameplayEffectQuery::EffectDefinition' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaActiveGameplayEffectQuery
// 0x0088 (0x0088 - 0x0000)
struct alignas(0x08) FMatchaActiveGameplayEffectQuery final
{
public:
	uint8                                         Pad_0[0x88];                                       // 0x0000(0x0088)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaActiveGameplayEffectQuery) == 0x000008, "Wrong alignment on FMatchaActiveGameplayEffectQuery");
static_assert(sizeof(FMatchaActiveGameplayEffectQuery) == 0x000088, "Wrong size on FMatchaActiveGameplayEffectQuery");

// ScriptStruct MatchaGameplayAbilities.MatchaActiveGameplayEffectsContainer
// 0x01A8 (0x02B0 - 0x0108)
struct FMatchaActiveGameplayEffectsContainer final : public FFastArraySerializer
{
public:
	uint8                                         Pad_108[0x38];                                     // 0x0108(0x0038)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchaActiveGameplayEffect>    GameplayEffects_Internal;                          // 0x0140(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         Pad_150[0x160];                                    // 0x0150(0x0160)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaActiveGameplayEffectsContainer) == 0x000008, "Wrong alignment on FMatchaActiveGameplayEffectsContainer");
static_assert(sizeof(FMatchaActiveGameplayEffectsContainer) == 0x0002B0, "Wrong size on FMatchaActiveGameplayEffectsContainer");
static_assert(offsetof(FMatchaActiveGameplayEffectsContainer, GameplayEffects_Internal) == 0x000140, "Member 'FMatchaActiveGameplayEffectsContainer::GameplayEffects_Internal' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectCustomExecutionParameters
// 0x00E8 (0x00E8 - 0x0000)
struct alignas(0x08) FMatchaGameplayEffectCustomExecutionParameters final
{
public:
	uint8                                         Pad_0[0xE8];                                       // 0x0000(0x00E8)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectCustomExecutionParameters) == 0x000008, "Wrong alignment on FMatchaGameplayEffectCustomExecutionParameters");
static_assert(sizeof(FMatchaGameplayEffectCustomExecutionParameters) == 0x0000E8, "Wrong size on FMatchaGameplayEffectCustomExecutionParameters");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayModifierEvaluatedData
// 0x0050 (0x0050 - 0x0000)
struct FMatchaGameplayModifierEvaluatedData final
{
public:
	struct FMatchaGameplayAttribute               Attribute;                                         // 0x0000(0x0038)(HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMatchaGameplayModOp                          ModifierOp;                                        // 0x0038(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_39[0x3];                                       // 0x0039(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         Magnitude;                                         // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchaActiveGameplayEffectHandle      Handle;                                            // 0x0040(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          IsValid;                                           // 0x0048(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayModifierEvaluatedData) == 0x000008, "Wrong alignment on FMatchaGameplayModifierEvaluatedData");
static_assert(sizeof(FMatchaGameplayModifierEvaluatedData) == 0x000050, "Wrong size on FMatchaGameplayModifierEvaluatedData");
static_assert(offsetof(FMatchaGameplayModifierEvaluatedData, Attribute) == 0x000000, "Member 'FMatchaGameplayModifierEvaluatedData::Attribute' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierEvaluatedData, ModifierOp) == 0x000038, "Member 'FMatchaGameplayModifierEvaluatedData::ModifierOp' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierEvaluatedData, Magnitude) == 0x00003C, "Member 'FMatchaGameplayModifierEvaluatedData::Magnitude' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierEvaluatedData, Handle) == 0x000040, "Member 'FMatchaGameplayModifierEvaluatedData::Handle' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayModifierEvaluatedData, IsValid) == 0x000048, "Member 'FMatchaGameplayModifierEvaluatedData::IsValid' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectCustomExecutionOutput
// 0x0018 (0x0018 - 0x0000)
struct FMatchaGameplayEffectCustomExecutionOutput final
{
public:
	TArray<struct FMatchaGameplayModifierEvaluatedData> OutputModifiers;                                   // 0x0000(0x0010)(ZeroConstructor, NativeAccessSpecifierPrivate)
	uint8                                         bTriggerConditionalGameplayEffects : 1;            // 0x0010(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHandledStackCountManually : 1;                    // 0x0010(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         bHandledGameplayCuesManually : 1;                  // 0x0010(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPrivate))
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectCustomExecutionOutput) == 0x000008, "Wrong alignment on FMatchaGameplayEffectCustomExecutionOutput");
static_assert(sizeof(FMatchaGameplayEffectCustomExecutionOutput) == 0x000018, "Wrong size on FMatchaGameplayEffectCustomExecutionOutput");
static_assert(offsetof(FMatchaGameplayEffectCustomExecutionOutput, OutputModifiers) == 0x000000, "Member 'FMatchaGameplayEffectCustomExecutionOutput::OutputModifiers' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectContext
// 0x0078 (0x0078 - 0x0000)
struct FMatchaGameplayEffectContext final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class AActor>                  Instigator;                                        // 0x0008(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class AActor>                  EffectCauser;                                      // 0x0010(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	int32                                         AbilityLevel;                                      // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TWeakObjectPtr<class UObject>                 SourceObject;                                      // 0x001C(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_24[0x14];                                      // 0x0024(0x0014)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<TWeakObjectPtr<class AActor>>          Actors;                                            // 0x0038(0x0010)(ZeroConstructor, Protected, UObjectWrapper, NativeAccessSpecifierProtected)
	uint8                                         Pad_48[0x10];                                      // 0x0048(0x0010)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                WorldOrigin;                                       // 0x0058(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         bHasWorldOrigin : 1;                               // 0x0070(0x0001)(BitIndex: 0x00, PropSize: 0x0001 (NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplicateSourceObject : 1;                        // 0x0070(0x0001)(BitIndex: 0x01, PropSize: 0x0001 (RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplicateInstigator : 1;                          // 0x0070(0x0001)(BitIndex: 0x02, PropSize: 0x0001 (RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         bReplicateEffectCauser : 1;                        // 0x0070(0x0001)(BitIndex: 0x03, PropSize: 0x0001 (RepSkip, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected))
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectContext) == 0x000008, "Wrong alignment on FMatchaGameplayEffectContext");
static_assert(sizeof(FMatchaGameplayEffectContext) == 0x000078, "Wrong size on FMatchaGameplayEffectContext");
static_assert(offsetof(FMatchaGameplayEffectContext, Instigator) == 0x000008, "Member 'FMatchaGameplayEffectContext::Instigator' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectContext, EffectCauser) == 0x000010, "Member 'FMatchaGameplayEffectContext::EffectCauser' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectContext, AbilityLevel) == 0x000018, "Member 'FMatchaGameplayEffectContext::AbilityLevel' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectContext, SourceObject) == 0x00001C, "Member 'FMatchaGameplayEffectContext::SourceObject' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectContext, Actors) == 0x000038, "Member 'FMatchaGameplayEffectContext::Actors' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectContext, WorldOrigin) == 0x000058, "Member 'FMatchaGameplayEffectContext::WorldOrigin' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectRemovalInfo
// 0x0028 (0x0028 - 0x0000)
struct FMatchaGameplayEffectRemovalInfo final
{
public:
	bool                                          bPrematureRemoval;                                 // 0x0000(0x0001)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x3];                                        // 0x0001(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         StackCount;                                        // 0x0004(0x0004)(Edit, BlueprintVisible, BlueprintReadOnly, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FMatchaGameplayEffectContextHandle     EffectContext;                                     // 0x0008(0x0018)(Edit, BlueprintVisible, BlueprintReadOnly, EditConst, NativeAccessSpecifierPublic)
	uint8                                         Pad_20[0x8];                                       // 0x0020(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectRemovalInfo) == 0x000008, "Wrong alignment on FMatchaGameplayEffectRemovalInfo");
static_assert(sizeof(FMatchaGameplayEffectRemovalInfo) == 0x000028, "Wrong size on FMatchaGameplayEffectRemovalInfo");
static_assert(offsetof(FMatchaGameplayEffectRemovalInfo, bPrematureRemoval) == 0x000000, "Member 'FMatchaGameplayEffectRemovalInfo::bPrematureRemoval' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectRemovalInfo, StackCount) == 0x000004, "Member 'FMatchaGameplayEffectRemovalInfo::StackCount' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayEffectRemovalInfo, EffectContext) == 0x000008, "Member 'FMatchaGameplayEffectRemovalInfo::EffectContext' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayTagBlueprintPropertyMapping
// 0x0048 (0x0048 - 0x0000)
struct FMatchaGameplayTagBlueprintPropertyMapping final
{
public:
	struct FGameplayTag                           TagToMap;                                          // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TFieldPath<struct FProperty>                  PropertyToEdit;                                    // 0x0008(0x0020)(Edit, EditConst, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   PropertyName;                                      // 0x0028(0x0008)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGuid                                  PropertyGuid;                                      // 0x0030(0x0010)(Edit, ZeroConstructor, EditConst, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_40[0x8];                                       // 0x0040(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayTagBlueprintPropertyMapping) == 0x000008, "Wrong alignment on FMatchaGameplayTagBlueprintPropertyMapping");
static_assert(sizeof(FMatchaGameplayTagBlueprintPropertyMapping) == 0x000048, "Wrong size on FMatchaGameplayTagBlueprintPropertyMapping");
static_assert(offsetof(FMatchaGameplayTagBlueprintPropertyMapping, TagToMap) == 0x000000, "Member 'FMatchaGameplayTagBlueprintPropertyMapping::TagToMap' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagBlueprintPropertyMapping, PropertyToEdit) == 0x000008, "Member 'FMatchaGameplayTagBlueprintPropertyMapping::PropertyToEdit' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagBlueprintPropertyMapping, PropertyName) == 0x000028, "Member 'FMatchaGameplayTagBlueprintPropertyMapping::PropertyName' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagBlueprintPropertyMapping, PropertyGuid) == 0x000030, "Member 'FMatchaGameplayTagBlueprintPropertyMapping::PropertyGuid' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayTagBlueprintPropertyMap
// 0x0028 (0x0028 - 0x0000)
struct FMatchaGameplayTagBlueprintPropertyMap final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FMatchaGameplayTagBlueprintPropertyMapping> PropertyMappings;                                  // 0x0018(0x0010)(Edit, ZeroConstructor, Protected, NativeAccessSpecifierProtected)
};
static_assert(alignof(FMatchaGameplayTagBlueprintPropertyMap) == 0x000008, "Wrong alignment on FMatchaGameplayTagBlueprintPropertyMap");
static_assert(sizeof(FMatchaGameplayTagBlueprintPropertyMap) == 0x000028, "Wrong size on FMatchaGameplayTagBlueprintPropertyMap");
static_assert(offsetof(FMatchaGameplayTagBlueprintPropertyMap, PropertyMappings) == 0x000018, "Member 'FMatchaGameplayTagBlueprintPropertyMap::PropertyMappings' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayEffectSpecHandle
// 0x0010 (0x0010 - 0x0000)
struct alignas(0x08) FMatchaGameplayEffectSpecHandle final
{
public:
	uint8                                         Pad_0[0x10];                                       // 0x0000(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayEffectSpecHandle) == 0x000008, "Wrong alignment on FMatchaGameplayEffectSpecHandle");
static_assert(sizeof(FMatchaGameplayEffectSpecHandle) == 0x000010, "Wrong size on FMatchaGameplayEffectSpecHandle");

// ScriptStruct MatchaGameplayAbilities.MatchaMinimalReplicationTagCountMap
// 0x0068 (0x0068 - 0x0000)
struct FMatchaMinimalReplicationTagCountMap final
{
public:
	uint8                                         Pad_0[0x50];                                       // 0x0000(0x0050)(Fixing Size After Last Property [ Dumper-7 ])
	TScriptInterface<class IMatchaGameplayEffectOwner> Owner;                                             // 0x0050(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_60[0x8];                                       // 0x0060(0x0008)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaMinimalReplicationTagCountMap) == 0x000008, "Wrong alignment on FMatchaMinimalReplicationTagCountMap");
static_assert(sizeof(FMatchaMinimalReplicationTagCountMap) == 0x000068, "Wrong size on FMatchaMinimalReplicationTagCountMap");
static_assert(offsetof(FMatchaMinimalReplicationTagCountMap, Owner) == 0x000050, "Member 'FMatchaMinimalReplicationTagCountMap::Owner' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayTagReponsePair
// 0x0028 (0x0028 - 0x0000)
struct FMatchaGameplayTagReponsePair final
{
public:
	struct FGameplayTag                           Tag;                                               // 0x0000(0x0008)(Edit, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TSubclassOf<class UMatchaGameplayEffect>      ResponseGameplayEffect;                            // 0x0008(0x0008)(ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<TSubclassOf<class UMatchaGameplayEffect>> ResponseGameplayEffects;                           // 0x0010(0x0010)(Edit, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
	int32                                         SoftCountCap;                                      // 0x0020(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_24[0x4];                                       // 0x0024(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMatchaGameplayTagReponsePair) == 0x000008, "Wrong alignment on FMatchaGameplayTagReponsePair");
static_assert(sizeof(FMatchaGameplayTagReponsePair) == 0x000028, "Wrong size on FMatchaGameplayTagReponsePair");
static_assert(offsetof(FMatchaGameplayTagReponsePair, Tag) == 0x000000, "Member 'FMatchaGameplayTagReponsePair::Tag' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagReponsePair, ResponseGameplayEffect) == 0x000008, "Member 'FMatchaGameplayTagReponsePair::ResponseGameplayEffect' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagReponsePair, ResponseGameplayEffects) == 0x000010, "Member 'FMatchaGameplayTagReponsePair::ResponseGameplayEffects' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagReponsePair, SoftCountCap) == 0x000020, "Member 'FMatchaGameplayTagReponsePair::SoftCountCap' has a wrong offset!");

// ScriptStruct MatchaGameplayAbilities.MatchaGameplayTagResponseTableEntry
// 0x0050 (0x0050 - 0x0000)
struct FMatchaGameplayTagResponseTableEntry final
{
public:
	struct FMatchaGameplayTagReponsePair          Positive;                                          // 0x0000(0x0028)(Edit, NativeAccessSpecifierPublic)
	struct FMatchaGameplayTagReponsePair          Negative;                                          // 0x0028(0x0028)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMatchaGameplayTagResponseTableEntry) == 0x000008, "Wrong alignment on FMatchaGameplayTagResponseTableEntry");
static_assert(sizeof(FMatchaGameplayTagResponseTableEntry) == 0x000050, "Wrong size on FMatchaGameplayTagResponseTableEntry");
static_assert(offsetof(FMatchaGameplayTagResponseTableEntry, Positive) == 0x000000, "Member 'FMatchaGameplayTagResponseTableEntry::Positive' has a wrong offset!");
static_assert(offsetof(FMatchaGameplayTagResponseTableEntry, Negative) == 0x000028, "Member 'FMatchaGameplayTagResponseTableEntry::Negative' has a wrong offset!");

}

