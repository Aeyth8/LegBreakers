#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BPL_CameraUtils

#include "Basic.hpp"

#include "BPL_CameraUtils_classes.hpp"
#include "BPL_CameraUtils_parameters.hpp"


namespace SDK
{

// Function BPL_CameraUtils.BPL_CameraUtils_C.AddExtraCameraActors
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   Actors                                                 (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// class AActor*                           CameraActor                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::AddExtraCameraActors(TArray<class AActor*>& Actors, class AActor* CameraActor, class UObject* __WorldContext)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "AddExtraCameraActors");

	Params::BPL_CameraUtils_C_AddExtraCameraActors Parms{};

	Parms.Actors = std::move(Actors);
	Parms.CameraActor = CameraActor;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	Actors = std::move(Parms.Actors);
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.ComputeBaseHeightOffset
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// double                                  CameraPitch                                            (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// double                                  CameraYLocation                                        (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  HeightOffset                                           (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::ComputeBaseHeightOffset(double CameraPitch, double CameraYLocation, class UObject* __WorldContext, double* HeightOffset)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "ComputeBaseHeightOffset");

	Params::BPL_CameraUtils_C_ComputeBaseHeightOffset Parms{};

	Parms.CameraPitch = CameraPitch;
	Parms.CameraYLocation = CameraYLocation;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (HeightOffset != nullptr)
		*HeightOffset = Parms.HeightOffset;
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.CheckGround
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CameraTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// bool                                    Ground                                                 (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::CheckGround(class AActor* CameraTarget, class UObject* __WorldContext, bool* Ground)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "CheckGround");

	Params::BPL_CameraUtils_C_CheckGround Parms{};

	Parms.CameraTarget = CameraTarget;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Ground != nullptr)
		*Ground = Parms.Ground;
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.ComputeViewParamsForPointsOfInterest
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// TArray<class AActor*>                   PointsOfInterest                                       (BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
// struct FVector                          MinimumVisibleAreaExtents                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaximumVisibleAreaExtents                              (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ViewTargetOrigin                                       (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          ViewExtents                                            (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::ComputeViewParamsForPointsOfInterest(TArray<class AActor*>& PointsOfInterest, const struct FVector& MinimumVisibleAreaExtents, const struct FVector& MaximumVisibleAreaExtents, const struct FVector& ViewTargetOrigin, class UObject* __WorldContext, struct FVector* ViewExtents)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "ComputeViewParamsForPointsOfInterest");

	Params::BPL_CameraUtils_C_ComputeViewParamsForPointsOfInterest Parms{};

	Parms.PointsOfInterest = std::move(PointsOfInterest);
	Parms.MinimumVisibleAreaExtents = std::move(MinimumVisibleAreaExtents);
	Parms.MaximumVisibleAreaExtents = std::move(MaximumVisibleAreaExtents);
	Parms.ViewTargetOrigin = std::move(ViewTargetOrigin);
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	PointsOfInterest = std::move(Parms.PointsOfInterest);

	if (ViewExtents != nullptr)
		*ViewExtents = std::move(Parms.ViewExtents);
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.CollectPointsOfInterest
// (Static, Public, HasOutParams, HasDefaults, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           CameraTarget                                           (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          TargetLocationOffset                                   (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// struct FVector                          MaxSearchRange                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// bool                                    CombatMode                                             (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// TArray<class AActor*>                   PointsOfInterest                                       (Parm, OutParm)

void UBPL_CameraUtils_C::CollectPointsOfInterest(class AActor* CameraTarget, const struct FVector& TargetLocationOffset, const struct FVector& MaxSearchRange, bool CombatMode, class UObject* __WorldContext, TArray<class AActor*>* PointsOfInterest)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "CollectPointsOfInterest");

	Params::BPL_CameraUtils_C_CollectPointsOfInterest Parms{};

	Parms.CameraTarget = CameraTarget;
	Parms.TargetLocationOffset = std::move(TargetLocationOffset);
	Parms.MaxSearchRange = std::move(MaxSearchRange);
	Parms.CombatMode = CombatMode;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (PointsOfInterest != nullptr)
		*PointsOfInterest = std::move(Parms.PointsOfInterest);
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.GetNextCameraTarget
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class APlayerController_MatchaSnapNet_C*LocalPlayerController                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class AActor*                           CameraTarget                                           (Parm, OutParm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::GetNextCameraTarget(class APlayerController_MatchaSnapNet_C* LocalPlayerController, class UObject* __WorldContext, class AActor** CameraTarget)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "GetNextCameraTarget");

	Params::BPL_CameraUtils_C_GetNextCameraTarget Parms{};

	Parms.LocalPlayerController = LocalPlayerController;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (CameraTarget != nullptr)
		*CameraTarget = Parms.CameraTarget;
}


// Function BPL_CameraUtils.BPL_CameraUtils_C.GetCameraLocation
// (Static, Public, HasOutParams, BlueprintCallable, BlueprintEvent)
// Parameters:
// class AActor*                           Target                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// double                                  Alpha                                                  (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
// class AActor*                           Camera                                                 (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// class UObject*                          __WorldContext                                         (BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
// struct FVector                          Location                                               (Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

void UBPL_CameraUtils_C::GetCameraLocation(class AActor* Target, double Alpha, class AActor* Camera, class UObject* __WorldContext, struct FVector* Location)
{
	static class UFunction* Func = nullptr;

	if (Func == nullptr)
		Func = StaticClass()->GetFunction("BPL_CameraUtils_C", "GetCameraLocation");

	Params::BPL_CameraUtils_C_GetCameraLocation Parms{};

	Parms.Target = Target;
	Parms.Alpha = Alpha;
	Parms.Camera = Camera;
	Parms.__WorldContext = __WorldContext;

	GetDefaultObj()->ProcessEvent(Func, &Parms);

	if (Location != nullptr)
		*Location = std::move(Parms.Location);
}

}

