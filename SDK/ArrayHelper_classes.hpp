#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: ArrayHelper

#include "Basic.hpp"

#include "Engine_classes.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK
{

// Class ArrayHelper.ArrayHelperBPLibrary
// 0x0000 (0x0028 - 0x0028)
class UArrayHelperBPLibrary final : public UBlueprintFunctionLibrary
{
public:
	static void ArrayAddRef(TArray<int32>& InArrayA, const int32& InItem, bool* OutResult);
	static void ArrayDivideRef(TArray<int32>& InArrayA, const int32& InItem, bool* OutResult);
	static void ArrayMultiplyRef(TArray<int32>& InArrayA, const int32& InItem, bool* OutResult);
	static void ArraySubtractRef(TArray<int32>& InArrayA, const int32& InItem, bool* OutResult);
	static float AverageByte(const TArray<uint8>& Array);
	static float AverageFloat(const TArray<float>& Array);
	static float AverageInteger(const TArray<int32>& Array);
	static float AverageInteger64(const TArray<int64>& Array);
	static void BreakTransformArray(const TArray<struct FTransform>& InTransforms, TArray<struct FVector>* OutLocations, TArray<struct FRotator>* OutRotators, TArray<struct FVector>* OutScales);
	static TArray<uint8> ClampByte(const TArray<uint8>& Array, uint8 Min, uint8 Max);
	static void ClampByteRef(TArray<uint8>& Array, uint8 Min, uint8 Max);
	static TArray<float> ClampFloat(const TArray<float>& Array, float Min, float Max);
	static void ClampFloatRef(TArray<float>& Array, float Min, float Max);
	static TArray<int32> ClampInteger(const TArray<int32>& Array, int32 Min, int32 Max);
	static TArray<int64> ClampInteger64(const TArray<int64>& Array, int64 Min, int64 Max);
	static void ClampInteger64Ref(TArray<int64>& Array, int64 Min, int64 Max);
	static void ClampIntegerRef(TArray<int32>& Array, int32 Min, int32 Max);
	static TArray<struct FVector2D> ClampVector2DSize(const TArray<struct FVector2D>& InArray, float InMinSize, float InMaxSize);
	static void ClampVector2DSizeRef(TArray<struct FVector2D>& InArray, float InMinSize, float InMaxSize);
	static TArray<struct FVector> ClampVectorSize(const TArray<struct FVector>& Array, float MinSize, float MaxSize, bool bOnly2D);
	static void ClampVectorSizeRef(TArray<struct FVector>& Array, float MinSize, float MaxSize, bool bOnly2D);
	static void ClosestActor(const TArray<class AActor*>& Array, const class AActor*& Origin, class AActor** Closest, float* Distance, int32* Index_0);
	static void ClosestLocation(const TArray<struct FVector>& Array, const struct FVector& Origin, struct FVector* Closest, float* Distance, int32* Index_0);
	static void ClosestTransform(const TArray<struct FTransform>& InArray, const struct FVector& InOrigin, struct FTransform* OutClosest, float* OutDistance, int32* OutIndex);
	static void ExtractArray(const TArray<int32>& ArrayA, TArray<int32>* ArrayB, int32 StartIndex, int32 EndIndex);
	static void FarthestActor(const TArray<class AActor*>& Array, const class AActor*& Origin, class AActor** Farthest, float* Distance, int32* Index_0);
	static void FarthestLocation(const TArray<struct FVector>& Array, const struct FVector& Origin, struct FVector* Farthest, float* Distance, int32* Index_0);
	static void FarthestTransform(const TArray<struct FTransform>& InArray, const struct FVector& InOrigin, struct FTransform* OutFarthest, float* OutDistance, int32* OutIndex);
	static class FString FilterMatch(const TArray<class FString>& Array, const class FString& Pattern, bool* bFound, int32* Index_0);
	static TArray<class FString> FilterMatches(const TArray<class FString>& Array, const class FString& Pattern, bool* bFound, TArray<int32>* Indexes);
	static bool MakeTransformArray(const TArray<struct FVector>& InLocations, const TArray<struct FRotator>& InRotators, const TArray<struct FVector>& InScales, TArray<struct FTransform>* OutTransforms);
	static int32 MaximumByteIndex(const TArray<uint8>& Array);
	static int32 MaximumFloatIndex(const TArray<float>& Array);
	static int32 MaximumInteger64Index(const TArray<int64>& Array);
	static int32 MaximumIntegerIndex(const TArray<int32>& Array);
	static int32 MinimumByteIndex(const TArray<uint8>& Array);
	static int32 MinimumFloatIndex(const TArray<float>& Array);
	static int32 MinimumInteger64Index(const TArray<int64>& Array);
	static int32 MinimumIntegerIndex(const TArray<int32>& Array);
	static TArray<uint8> MinMaxByteNormalization(const TArray<uint8>& Array, uint8 Min, uint8 Max);
	static TArray<float> MinMaxFloatNormalization(const TArray<float>& Array, float Min, float Max);
	static TArray<int64> MinMaxInteger64Normalization(const TArray<int64>& Array, int64 Min, int64 Max);
	static TArray<int32> MinMaxIntegerNormalization(const TArray<int32>& Array, int32 Min, int32 Max);
	static TArray<class AActor*> PredicateFilterActor(const TArray<class AActor*>& Array, const TDelegate<void(class AActor* Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<uint8> PredicateFilterByte(const TArray<uint8>& Array, const TDelegate<void(uint8& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<float> PredicateFilterFloat(const TArray<float>& Array, const TDelegate<void(float& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<int32> PredicateFilterInteger(const TArray<int32>& Array, const TDelegate<void(int32& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<int64> PredicateFilterInteger64(const TArray<int64>& Array, const TDelegate<void(int64& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class FName> PredicateFilterName(const TArray<class FName>& Array, const TDelegate<void(class FName& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class UObject*> PredicateFilterObject(const TArray<class UObject*>& Array, const TDelegate<void(class UObject* Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class FString> PredicateFilterString(const TArray<class FString>& Array, const TDelegate<void(const class FString& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<struct FVector> PredicateFilterVector(const TArray<struct FVector>& Array, const TDelegate<void(struct FVector& Value, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<struct FVector2D> PredicateFilterVector2D(const TArray<struct FVector2D>& InArray, const TDelegate<void(struct FVector2D& Value, bool* Result)>& InPredicateFunction, bool bInInvertResult);
	static TArray<class AActor*> PredicateSortActor(const TArray<class AActor*>& Array, const TDelegate<void(class AActor* A, class AActor* B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortActorRef(TArray<class AActor*>& Array, const TDelegate<void(class AActor* A, class AActor* B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<uint8> PredicateSortByte(const TArray<uint8>& Array, const TDelegate<void(uint8& A, uint8& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortByteRef(TArray<uint8>& Array, const TDelegate<void(uint8& A, uint8& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<float> PredicateSortFloat(const TArray<float>& Array, const TDelegate<void(float& A, float& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortFloatRef(TArray<float>& Array, const TDelegate<void(float& A, float& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<int32> PredicateSortInteger(const TArray<int32>& Array, const TDelegate<void(int32& A, int32& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<int64> PredicateSortInteger64(const TArray<int64>& Array, const TDelegate<void(int64& A, int64& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortInteger64Ref(TArray<int64>& Array, const TDelegate<void(int64& A, int64& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortIntegerRef(TArray<int32>& Array, const TDelegate<void(int32& A, int32& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class FName> PredicateSortName(const TArray<class FName>& Array, const TDelegate<void(class FName& A, class FName& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortNameRef(TArray<class FName>& Array, const TDelegate<void(class FName& A, class FName& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class UObject*> PredicateSortObject(const TArray<class UObject*>& Array, const TDelegate<void(class UObject* A, class UObject* B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortObjectRef(TArray<class UObject*>& Array, const TDelegate<void(class UObject* A, class UObject* B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<class FString> PredicateSortString(const TArray<class FString>& Array, const TDelegate<void(const class FString& A, const class FString& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static void PredicateSortStringRef(TArray<class FString>& Array, const TDelegate<void(const class FString& A, const class FString& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<struct FVector> PredicateSortVector(const TArray<struct FVector>& Array, const TDelegate<void(struct FVector& A, struct FVector& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<struct FVector2D> PredicateSortVector2D(const TArray<struct FVector2D>& InArray, const TDelegate<void(struct FVector2D& A, struct FVector2D& B, bool* Result)>& InPredicateFunction, bool bInInvertResult);
	static void PredicateSortVector2DRef(TArray<struct FVector2D>& InArray, const TDelegate<void(struct FVector2D& A, struct FVector2D& B, bool* Result)>& InPredicateFunction, bool bInInvertResult);
	static void PredicateSortVectorRef(TArray<struct FVector>& Array, const TDelegate<void(struct FVector& A, struct FVector& B, bool* Result)>& PredicateFunction, bool InvertResult);
	static TArray<bool> RandomBoolean(int32 Size);
	static TArray<uint8> RandomByte(int32 Size, uint8 MinValue, uint8 MaxValue);
	static TArray<float> RandomFloat(int32 Size, float MinValue, float MaxValue);
	static TArray<int32> RandomInteger(int32 Size, int32 MinValue, int32 MaxValue);
	static TArray<int64> RandomInteger64(int32 Size, int64 MinValue, int64 MaxValue);
	static void RandomItem(const TArray<int32>& ArrayA, const TArray<int32>& Weights, int32* Item, int32* Index_0);
	static TArray<struct FVector> RandomVector(int32 Size, const struct FVector& MinValue, const struct FVector& MaxValue);
	static TArray<struct FVector2D> RandomVector2D(int32 InSize, const struct FVector2D& InMinValue, const struct FVector2D& InMaxValue);
	static void ReverseArray(const TArray<int32>& ArrayA, TArray<int32>* ArrayB);
	static TArray<class AActor*> SortActor(const TArray<class AActor*>& Array, const class AActor*& Actor, bool bIsAscending);
	static void SortActorRef(TArray<class AActor*>& Array, const class AActor*& Actor, bool bIsAscending);
	static TArray<uint8> SortByte(const TArray<uint8>& Array, bool bIsAscending);
	static void SortByteRef(TArray<uint8>& Array, bool bIsAscending);
	static TArray<float> SortFloat(const TArray<float>& Array, bool bIsAscending);
	static void SortFloatRef(TArray<float>& Array, bool bIsAscending);
	static TArray<int32> SortInteger(const TArray<int32>& Array, bool bIsAscending);
	static TArray<int64> SortInteger64(const TArray<int64>& Array, bool bIsAscending);
	static void SortInteger64Ref(TArray<int64>& Array, bool bIsAscending);
	static void SortIntegerRef(TArray<int32>& Array, bool bIsAscending);
	static TArray<class FName> SortName(const TArray<class FName>& Array, bool bIsAscending);
	static void SortNameRef(TArray<class FName>& Array, bool bIsAscending);
	static TArray<class FString> SortString(const TArray<class FString>& Array, bool bIsAscending);
	static void SortStringRef(TArray<class FString>& Array, bool bIsAscending);
	static TArray<struct FVector> SortVector(const TArray<struct FVector>& Array, const struct FVector& Origin, bool bIsAscending);
	static TArray<struct FVector2D> SortVector2D(const TArray<struct FVector2D>& InArray, const struct FVector2D& InOrigin, bool bInIsAscending);
	static void SortVector2DRef(TArray<struct FVector2D>& InArray, const struct FVector2D& InOrigin, bool bInIsAscending);
	static void SortVectorRef(TArray<struct FVector>& Array, const struct FVector& Origin, bool bIsAscending);
	static TArray<struct FVector2D> SortVertices(const TArray<struct FVector2D>& InArray, bool bInCounterClockWise);
	static void SortVerticesRef(TArray<struct FVector2D>& InArray, bool bInCounterClockWise);
	static TArray<class FString> SplitString(const class FString& String, const class FString& Separator, ESearchCase SearchCase, bool RemoveEmptyString);
	static void ToSet(const TArray<int32>& ArrayA, TSet<int32>* ArrayB);

public:
	static class UClass* StaticClass()
	{
		return StaticClassImpl<"ArrayHelperBPLibrary">();
	}
	static class UArrayHelperBPLibrary* GetDefaultObj()
	{
		return GetDefaultObjImpl<UArrayHelperBPLibrary>();
	}
};
static_assert(alignof(UArrayHelperBPLibrary) == 0x000008, "Wrong alignment on UArrayHelperBPLibrary");
static_assert(sizeof(UArrayHelperBPLibrary) == 0x000028, "Wrong size on UArrayHelperBPLibrary");

}

