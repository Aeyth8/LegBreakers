#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_FloatingIndicator

#include "Basic.hpp"

#include "SlateCore_structs.hpp"
#include "Engine_structs.hpp"
#include "CoreUObject_structs.hpp"
#include "UMG_structs.hpp"


namespace SDK::Params
{

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.AllyAliveStateChangedBindingEvent
// 0x0040 (0x0040 - 0x0000)
struct WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent final
{
public:
	bool                                          OldValue;                                          // 0x0000(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          NewValue;                                          // 0x0001(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x1];                                        // 0x0003(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FSlateColor                            K2Node_MakeStruct_SlateColor;                      // 0x0004(0x0014)()
	struct FSlateColor                            K2Node_MakeStruct_SlateColor_1;                    // 0x0018(0x0014)()
	struct FSlateColor                            K2Node_Select_Default;                             // 0x002C(0x0014)()
};
static_assert(alignof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent) == 0x000004, "Wrong alignment on WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent");
static_assert(sizeof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent) == 0x000040, "Wrong size on WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, OldValue) == 0x000000, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, NewValue) == 0x000001, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, Temp_bool_Variable) == 0x000002, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, K2Node_MakeStruct_SlateColor) == 0x000004, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::K2Node_MakeStruct_SlateColor' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, K2Node_MakeStruct_SlateColor_1) == 0x000018, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::K2Node_MakeStruct_SlateColor_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent, K2Node_Select_Default) == 0x00002C, "Member 'WBP_FloatingIndicator_C_AllyAliveStateChangedBindingEvent::K2Node_Select_Default' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.ExecuteUbergraph_WBP_FloatingIndicator
// 0x0040 (0x0040 - 0x0000)
struct WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              K2Node_Event_MyGeometry;                           // 0x0004(0x0038)(IsPlainOldData, NoDestructor)
	float                                         K2Node_Event_InDeltaTime;                          // 0x003C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator) == 0x000004, "Wrong alignment on WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator");
static_assert(sizeof(WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator) == 0x000040, "Wrong size on WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator");
static_assert(offsetof(WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator, EntryPoint) == 0x000000, "Member 'WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator::EntryPoint' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator, K2Node_Event_MyGeometry) == 0x000004, "Member 'WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator::K2Node_Event_MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator, K2Node_Event_InDeltaTime) == 0x00003C, "Member 'WBP_FloatingIndicator_C_ExecuteUbergraph_WBP_FloatingIndicator::K2Node_Event_InDeltaTime' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.SetAllyIndicator
// 0x0060 (0x0060 - 0x0000)
struct WBP_FloatingIndicator_C_SetAllyIndicator final
{
public:
	class UMatchaPlayerUIData*                    Player;                                            // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(bool OldValue, bool NewValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0008(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IntBinding_GetValue_ReturnValue;          // 0x0018(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   CallFunc_TextBinding_GetValue_ReturnValue;         // 0x0020(0x0010)()
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0030(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_31[0x7];                                       // 0x0031(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaSnapNetGameInstance*             CallFunc_GetMatchaSnapNetGameInstance_ReturnValue; // 0x0038(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorForAllies_ReturnValue;            // 0x0040(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_SetAllyIndicator) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_SetAllyIndicator");
static_assert(sizeof(WBP_FloatingIndicator_C_SetAllyIndicator) == 0x000060, "Wrong size on WBP_FloatingIndicator_C_SetAllyIndicator");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, Player) == 0x000000, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::Player' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, K2Node_CreateDelegate_OutputDelegate) == 0x000008, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_IntBinding_GetValue_ReturnValue) == 0x000018, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_IntBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_TextBinding_GetValue_ReturnValue) == 0x000020, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_TextBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_IsValid_ReturnValue) == 0x000030, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_GetMatchaSnapNetGameInstance_ReturnValue) == 0x000038, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_GetMatchaSnapNetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_GetColorForAllies_ReturnValue) == 0x000040, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_GetColorForAllies_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000050, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetAllyIndicator, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000058, "Member 'WBP_FloatingIndicator_C_SetAllyIndicator::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.SetEnemyIndicator
// 0x0068 (0x0068 - 0x0000)
struct WBP_FloatingIndicator_C_SetEnemyIndicator final
{
public:
	class UMatchaPlayerUIData*                    PlayerUIData;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsValid_ReturnValue;                      // 0x0008(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_IntBinding_GetValue_ReturnValue;          // 0x000C(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UMatchaSnapNetGameInstance*             CallFunc_GetMatchaSnapNetGameInstance_ReturnValue; // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FLinearColor                           CallFunc_GetColorForEnemies_ReturnValue;           // 0x0018(0x0010)(ConstParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 OldValue, int32 NewValue)> K2Node_CreateDelegate_OutputDelegate;              // 0x0028(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	TDelegate<void(int32 OldValue, int32 NewValue)> K2Node_CreateDelegate_OutputDelegate_1;            // 0x0038(0x0010)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	int32                                         CallFunc_IntBinding_GetValue_ReturnValue_1;        // 0x0048(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture2D*                             CallFunc_TextureBinding_GetTexture2DValue_ReturnValue; // 0x0050(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue;           // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class UMaterialInstanceDynamic*               CallFunc_GetDynamicMaterial_ReturnValue_1;         // 0x0060(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_SetEnemyIndicator) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_SetEnemyIndicator");
static_assert(sizeof(WBP_FloatingIndicator_C_SetEnemyIndicator) == 0x000068, "Wrong size on WBP_FloatingIndicator_C_SetEnemyIndicator");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, PlayerUIData) == 0x000000, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::PlayerUIData' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_IsValid_ReturnValue) == 0x000008, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_IsValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_IntBinding_GetValue_ReturnValue) == 0x00000C, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_IntBinding_GetValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_GetMatchaSnapNetGameInstance_ReturnValue) == 0x000010, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_GetMatchaSnapNetGameInstance_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_GetColorForEnemies_ReturnValue) == 0x000018, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_GetColorForEnemies_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, K2Node_CreateDelegate_OutputDelegate) == 0x000028, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::K2Node_CreateDelegate_OutputDelegate' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, K2Node_CreateDelegate_OutputDelegate_1) == 0x000038, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::K2Node_CreateDelegate_OutputDelegate_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_IntBinding_GetValue_ReturnValue_1) == 0x000048, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_IntBinding_GetValue_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_TextureBinding_GetTexture2DValue_ReturnValue) == 0x000050, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_TextureBinding_GetTexture2DValue_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_GetDynamicMaterial_ReturnValue) == 0x000058, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_GetDynamicMaterial_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_SetEnemyIndicator, CallFunc_GetDynamicMaterial_ReturnValue_1) == 0x000060, "Member 'WBP_FloatingIndicator_C_SetEnemyIndicator::CallFunc_GetDynamicMaterial_ReturnValue_1' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.Tick
// 0x003C (0x003C - 0x0000)
struct WBP_FloatingIndicator_C_Tick final
{
public:
	struct FGeometry                              MyGeometry;                                        // 0x0000(0x0038)(BlueprintVisible, BlueprintReadOnly, Parm, IsPlainOldData, NoDestructor)
	float                                         InDeltaTime;                                       // 0x0038(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_Tick) == 0x000004, "Wrong alignment on WBP_FloatingIndicator_C_Tick");
static_assert(sizeof(WBP_FloatingIndicator_C_Tick) == 0x00003C, "Wrong size on WBP_FloatingIndicator_C_Tick");
static_assert(offsetof(WBP_FloatingIndicator_C_Tick, MyGeometry) == 0x000000, "Member 'WBP_FloatingIndicator_C_Tick::MyGeometry' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_Tick, InDeltaTime) == 0x000038, "Member 'WBP_FloatingIndicator_C_Tick::InDeltaTime' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.TickIndicator
// 0x0088 (0x0088 - 0x0000)
struct WBP_FloatingIndicator_C_TickIndicator final
{
public:
	struct FVector                                Position;                                          // 0x0000(0x0018)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0018(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0020(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	class APlayerController*                      CallFunc_GetOwningPlayer_ReturnValue;              // 0x0058(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_ProjectWorldToScreen_ScreenPosition;      // 0x0060(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_ProjectWorldToScreen_ReturnValue;         // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_71[0x7];                                       // 0x0071(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_ScreenToWidgetLocal_LocalCoordinate;      // 0x0078(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_TickIndicator) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_TickIndicator");
static_assert(sizeof(WBP_FloatingIndicator_C_TickIndicator) == 0x000088, "Wrong size on WBP_FloatingIndicator_C_TickIndicator");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, Position) == 0x000000, "Member 'WBP_FloatingIndicator_C_TickIndicator::Position' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_GetParent_ReturnValue) == 0x000018, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_GetCachedGeometry_ReturnValue) == 0x000020, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_GetOwningPlayer_ReturnValue) == 0x000058, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_GetOwningPlayer_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_ProjectWorldToScreen_ScreenPosition) == 0x000060, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_ProjectWorldToScreen_ScreenPosition' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_ProjectWorldToScreen_ReturnValue) == 0x000070, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_ProjectWorldToScreen_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_TickIndicator, CallFunc_ScreenToWidgetLocal_LocalCoordinate) == 0x000078, "Member 'WBP_FloatingIndicator_C_TickIndicator::CallFunc_ScreenToWidgetLocal_LocalCoordinate' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.UpdateCompass
// 0x00A0 (0x00A0 - 0x0000)
struct WBP_FloatingIndicator_C_UpdateCompass final
{
public:
	double                                        CallFunc_GetPI_ReturnValue;                        // 0x0000(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Divide_DoubleDouble_ReturnValue;          // 0x0018(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Subtract_Vector2DVector2D_ReturnValue;    // 0x0020(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Divide_Vector2DVector2D_ReturnValue;      // 0x0030(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Normal2D_ReturnValue;                     // 0x0040(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Conv_Vector2DToVector_ReturnValue;        // 0x0050(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector                                CallFunc_Multiply_VectorVector_ReturnValue;        // 0x0068(0x0018)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Vector_HeadingAngle_ReturnValue;          // 0x0080(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Multiply_DoubleDouble_ReturnValue;        // 0x0088(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0090(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	float                                         CallFunc_SetRenderTransformAngle_Angle_ImplicitCast; // 0x0098(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_UpdateCompass) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_UpdateCompass");
static_assert(sizeof(WBP_FloatingIndicator_C_UpdateCompass) == 0x0000A0, "Wrong size on WBP_FloatingIndicator_C_UpdateCompass");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_GetPI_ReturnValue) == 0x000000, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_GetPI_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_GetViewportSize_ReturnValue) == 0x000008, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Divide_DoubleDouble_ReturnValue) == 0x000018, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Divide_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Subtract_Vector2DVector2D_ReturnValue) == 0x000020, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Subtract_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Divide_Vector2DVector2D_ReturnValue) == 0x000030, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Divide_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Normal2D_ReturnValue) == 0x000040, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Normal2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Conv_Vector2DToVector_ReturnValue) == 0x000050, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Conv_Vector2DToVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Multiply_VectorVector_ReturnValue) == 0x000068, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Multiply_VectorVector_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Vector_HeadingAngle_ReturnValue) == 0x000080, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Vector_HeadingAngle_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Multiply_DoubleDouble_ReturnValue) == 0x000088, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Multiply_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000090, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateCompass, CallFunc_SetRenderTransformAngle_Angle_ImplicitCast) == 0x000098, "Member 'WBP_FloatingIndicator_C_UpdateCompass::CallFunc_SetRenderTransformAngle_Angle_ImplicitCast' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.UpdateEnemyDmgPercent
// 0x00F8 (0x00F8 - 0x0000)
struct WBP_FloatingIndicator_C_UpdateEnemyDmgPercent final
{
public:
	int32                                         OldValue;                                          // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int32                                         NewValue;                                          // 0x0004(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            LowDamageColor;                                    // 0x0008(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            MediumDamageColor;                                 // 0x001C(0x0014)(Edit, BlueprintVisible)
	struct FSlateColor                            HighDamageColor;                                   // 0x0030(0x0014)(Edit, BlueprintVisible)
	bool                                          CallFunc_Greater_IntInt_ReturnValue;               // 0x0044(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_1;             // 0x0045(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_Greater_IntInt_ReturnValue_2;             // 0x0046(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_47[0x1];                                       // 0x0047(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_Conv_IntToDouble_ReturnValue;             // 0x0048(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Add_DoubleDouble_ReturnValue;             // 0x0050(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_Subtract_DoubleDouble_ReturnValue;        // 0x0058(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          Temp_bool_Variable;                                // 0x0060(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_61[0x3];                                       // 0x0061(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         CallFunc_FTrunc_ReturnValue;                       // 0x0064(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	int64                                         CallFunc_Conv_IntToInt64_ReturnValue;              // 0x0068(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FFormatArgumentData                    K2Node_MakeStruct_FormatArgumentData;              // 0x0070(0x0048)(HasGetValueTypeHash)
	TArray<struct FFormatArgumentData>            K2Node_MakeArray_Array;                            // 0x00B8(0x0010)(ReferenceParm)
	class FText                                   CallFunc_Format_ReturnValue;                       // 0x00C8(0x0010)()
	class UUMGSequencePlayer*                     CallFunc_PlayAnimation_ReturnValue;                // 0x00D8(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FSlateColor                            K2Node_Select_Default;                             // 0x00E0(0x0014)()
};
static_assert(alignof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_UpdateEnemyDmgPercent");
static_assert(sizeof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent) == 0x0000F8, "Wrong size on WBP_FloatingIndicator_C_UpdateEnemyDmgPercent");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, OldValue) == 0x000000, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::OldValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, NewValue) == 0x000004, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::NewValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, LowDamageColor) == 0x000008, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::LowDamageColor' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, MediumDamageColor) == 0x00001C, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::MediumDamageColor' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, HighDamageColor) == 0x000030, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::HighDamageColor' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Greater_IntInt_ReturnValue) == 0x000044, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Greater_IntInt_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Greater_IntInt_ReturnValue_1) == 0x000045, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Greater_IntInt_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Greater_IntInt_ReturnValue_2) == 0x000046, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Greater_IntInt_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Conv_IntToDouble_ReturnValue) == 0x000048, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Conv_IntToDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Add_DoubleDouble_ReturnValue) == 0x000050, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Add_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Subtract_DoubleDouble_ReturnValue) == 0x000058, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Subtract_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, Temp_bool_Variable) == 0x000060, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_FTrunc_ReturnValue) == 0x000064, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_FTrunc_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Conv_IntToInt64_ReturnValue) == 0x000068, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Conv_IntToInt64_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, K2Node_MakeStruct_FormatArgumentData) == 0x000070, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::K2Node_MakeStruct_FormatArgumentData' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, K2Node_MakeArray_Array) == 0x0000B8, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::K2Node_MakeArray_Array' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_Format_ReturnValue) == 0x0000C8, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_Format_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, CallFunc_PlayAnimation_ReturnValue) == 0x0000D8, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::CallFunc_PlayAnimation_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdateEnemyDmgPercent, K2Node_Select_Default) == 0x0000E0, "Member 'WBP_FloatingIndicator_C_UpdateEnemyDmgPercent::K2Node_Select_Default' has a wrong offset!");

// Function WBP_FloatingIndicator.WBP_FloatingIndicator_C.UpdatePosition
// 0x0140 (0x0140 - 0x0000)
struct WBP_FloatingIndicator_C_UpdatePosition final
{
public:
	bool                                          Temp_bool_Variable;                                // 0x0000(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable;                                // 0x0001(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              Temp_byte_Variable_1;                              // 0x0002(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_3[0x5];                                        // 0x0003(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue;                 // 0x0008(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_1;               // 0x0018(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UPanelWidget*                           CallFunc_GetParent_ReturnValue;                    // 0x0028(0x0008)(ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X;                          // 0x0030(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y;                          // 0x0038(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FGeometry                              CallFunc_GetCachedGeometry_ReturnValue;            // 0x0040(0x0038)(ConstParm, IsPlainOldData, NoDestructor)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue;    // 0x0078(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_79[0x7];                                       // 0x0079(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_GetLocalSize_ReturnValue;                 // 0x0080(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1;  // 0x0090(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_91[0x7];                                       // 0x0091(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue;    // 0x0098(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_Multiply_Vector2DVector2D_ReturnValue_1;  // 0x00A8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_1;                        // 0x00B8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_1;                        // 0x00C0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_2;                        // 0x00C8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_2;                        // 0x00D0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	struct FVector2D                              CallFunc_GetViewportSize_ReturnValue;              // 0x00D8(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_3;                        // 0x00E8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_3;                        // 0x00F0(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_X_4;                        // 0x00F8(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_BreakVector2D_Y_4;                        // 0x0100(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue;       // 0x0108(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_109[0x7];                                      // 0x0109(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	double                                        CallFunc_FClamp_ReturnValue;                       // 0x0110(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CallFunc_FClamp_ReturnValue_1;                     // 0x0118(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_LessEqual_DoubleDouble_ReturnValue_1;     // 0x0120(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_121[0x7];                                      // 0x0121(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              CallFunc_MakeVector2D_ReturnValue_2;               // 0x0128(0x0010)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue;                   // 0x0138(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_1;                 // 0x0139(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_BooleanAND_ReturnValue_2;                 // 0x013A(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESlateVisibility                              K2Node_Select_Default;                             // 0x013B(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(WBP_FloatingIndicator_C_UpdatePosition) == 0x000008, "Wrong alignment on WBP_FloatingIndicator_C_UpdatePosition");
static_assert(sizeof(WBP_FloatingIndicator_C_UpdatePosition) == 0x000140, "Wrong size on WBP_FloatingIndicator_C_UpdatePosition");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, Temp_bool_Variable) == 0x000000, "Member 'WBP_FloatingIndicator_C_UpdatePosition::Temp_bool_Variable' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, Temp_byte_Variable) == 0x000001, "Member 'WBP_FloatingIndicator_C_UpdatePosition::Temp_byte_Variable' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, Temp_byte_Variable_1) == 0x000002, "Member 'WBP_FloatingIndicator_C_UpdatePosition::Temp_byte_Variable_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_MakeVector2D_ReturnValue) == 0x000008, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_MakeVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_MakeVector2D_ReturnValue_1) == 0x000018, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_MakeVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GetParent_ReturnValue) == 0x000028, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GetParent_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_X) == 0x000030, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_X' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_Y) == 0x000038, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_Y' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GetCachedGeometry_ReturnValue) == 0x000040, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GetCachedGeometry_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue) == 0x000078, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GetLocalSize_ReturnValue) == 0x000080, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GetLocalSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1) == 0x000090, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GreaterEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_Multiply_Vector2DVector2D_ReturnValue) == 0x000098, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_Multiply_Vector2DVector2D_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_Multiply_Vector2DVector2D_ReturnValue_1) == 0x0000A8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_Multiply_Vector2DVector2D_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_X_1) == 0x0000B8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_X_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_Y_1) == 0x0000C0, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_Y_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_X_2) == 0x0000C8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_X_2' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_Y_2) == 0x0000D0, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_Y_2' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_GetViewportSize_ReturnValue) == 0x0000D8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_GetViewportSize_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_X_3) == 0x0000E8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_X_3' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_Y_3) == 0x0000F0, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_Y_3' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_X_4) == 0x0000F8, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_X_4' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BreakVector2D_Y_4) == 0x000100, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BreakVector2D_Y_4' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_LessEqual_DoubleDouble_ReturnValue) == 0x000108, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_LessEqual_DoubleDouble_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_FClamp_ReturnValue) == 0x000110, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_FClamp_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_FClamp_ReturnValue_1) == 0x000118, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_FClamp_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_LessEqual_DoubleDouble_ReturnValue_1) == 0x000120, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_LessEqual_DoubleDouble_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_MakeVector2D_ReturnValue_2) == 0x000128, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_MakeVector2D_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BooleanAND_ReturnValue) == 0x000138, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BooleanAND_ReturnValue' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BooleanAND_ReturnValue_1) == 0x000139, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BooleanAND_ReturnValue_1' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, CallFunc_BooleanAND_ReturnValue_2) == 0x00013A, "Member 'WBP_FloatingIndicator_C_UpdatePosition::CallFunc_BooleanAND_ReturnValue_2' has a wrong offset!");
static_assert(offsetof(WBP_FloatingIndicator_C_UpdatePosition, K2Node_Select_Default) == 0x00013B, "Member 'WBP_FloatingIndicator_C_UpdatePosition::K2Node_Select_Default' has a wrong offset!");

}

