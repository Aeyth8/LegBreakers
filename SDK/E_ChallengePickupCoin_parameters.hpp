#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: E_ChallengePickupCoin

#include "Basic.hpp"

#include "GameplayTags_structs.hpp"
#include "Matcha_structs.hpp"


namespace SDK::Params
{

// Function E_ChallengePickupCoin.E_ChallengePickupCoin_C.ExecuteUbergraph_E_ChallengePickupCoin
// 0x001C (0x001C - 0x0000)
struct E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin final
{
public:
	int32                                         EntryPoint;                                        // 0x0000(0x0004)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	ESnapNetWorldType                             CallFunc_SwitchSnapNetWorldType_WorldType;         // 0x0004(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x0005(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_IsGameplayTagValid_ReturnValue;           // 0x0006(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_7[0x1];                                        // 0x0007(0x0001)(Fixing Size After Last Property [ Dumper-7 ])
	struct FMatchaGameplayEvent                   K2Node_MakeStruct_MatchaGameplayEvent;             // 0x0008(0x0014)(NoDestructor)
};
static_assert(alignof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin) == 0x000004, "Wrong alignment on E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin");
static_assert(sizeof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin) == 0x00001C, "Wrong size on E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin");
static_assert(offsetof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin, EntryPoint) == 0x000000, "Member 'E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin::EntryPoint' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin, CallFunc_SwitchSnapNetWorldType_WorldType) == 0x000004, "Member 'E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin::CallFunc_SwitchSnapNetWorldType_WorldType' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin, K2Node_SwitchEnum_CmpSuccess) == 0x000005, "Member 'E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin, CallFunc_IsGameplayTagValid_ReturnValue) == 0x000006, "Member 'E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin::CallFunc_IsGameplayTagValid_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin, K2Node_MakeStruct_MatchaGameplayEvent) == 0x000008, "Member 'E_ChallengePickupCoin_C_ExecuteUbergraph_E_ChallengePickupCoin::K2Node_MakeStruct_MatchaGameplayEvent' has a wrong offset!");

// Function E_ChallengePickupCoin.E_ChallengePickupCoin_C.GetBroadcastChannel
// 0x0008 (0x0008 - 0x0000)
struct E_ChallengePickupCoin_C_GetBroadcastChannel final
{
public:
	struct FGameplayTag                           ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ReturnParm, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_ChallengePickupCoin_C_GetBroadcastChannel) == 0x000004, "Wrong alignment on E_ChallengePickupCoin_C_GetBroadcastChannel");
static_assert(sizeof(E_ChallengePickupCoin_C_GetBroadcastChannel) == 0x000008, "Wrong size on E_ChallengePickupCoin_C_GetBroadcastChannel");
static_assert(offsetof(E_ChallengePickupCoin_C_GetBroadcastChannel, ReturnValue) == 0x000000, "Member 'E_ChallengePickupCoin_C_GetBroadcastChannel::ReturnValue' has a wrong offset!");

// Function E_ChallengePickupCoin.E_ChallengePickupCoin_C.TryPickUpBy
// 0x00B0 (0x00B0 - 0x0000)
struct E_ChallengePickupCoin_C_TryPickUpBy final
{
public:
	class AActor*                                 Instigator_0;                                      // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          Success;                                           // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UMatchaGameplayEventSubsystem*          CallFunc_GetWorldSubsystem_ReturnValue;            // 0x0010(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          CallFunc_TryPickUpBy_Success;                      // 0x0018(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FCombinedFXInfo                        K2Node_MakeStruct_CombinedFXInfo;                  // 0x0020(0x0088)(NoDestructor)
	ESnapNetWorldType                             CallFunc_SwitchSnapNetWorldType_WorldType;         // 0x00A8(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_SwitchEnum_CmpSuccess;                      // 0x00A9(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(E_ChallengePickupCoin_C_TryPickUpBy) == 0x000008, "Wrong alignment on E_ChallengePickupCoin_C_TryPickUpBy");
static_assert(sizeof(E_ChallengePickupCoin_C_TryPickUpBy) == 0x0000B0, "Wrong size on E_ChallengePickupCoin_C_TryPickUpBy");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, Instigator_0) == 0x000000, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::Instigator_0' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, Success) == 0x000008, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::Success' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, CallFunc_GetWorldSubsystem_ReturnValue) == 0x000010, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::CallFunc_GetWorldSubsystem_ReturnValue' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, CallFunc_TryPickUpBy_Success) == 0x000018, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::CallFunc_TryPickUpBy_Success' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, K2Node_MakeStruct_CombinedFXInfo) == 0x000020, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::K2Node_MakeStruct_CombinedFXInfo' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, CallFunc_SwitchSnapNetWorldType_WorldType) == 0x0000A8, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::CallFunc_SwitchSnapNetWorldType_WorldType' has a wrong offset!");
static_assert(offsetof(E_ChallengePickupCoin_C_TryPickUpBy, K2Node_SwitchEnum_CmpSuccess) == 0x0000A9, "Member 'E_ChallengePickupCoin_C_TryPickUpBy::K2Node_SwitchEnum_CmpSuccess' has a wrong offset!");

}

