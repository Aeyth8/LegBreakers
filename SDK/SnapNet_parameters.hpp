#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: SnapNet

#include "Basic.hpp"

#include "SnapNet_structs.hpp"
#include "CoreUObject_structs.hpp"


namespace SDK::Params
{

// Function SnapNet.SnapNetAnimationUtilities.GetComponentSpaceBoneTransform
// 0x0090 (0x0090 - 0x0000)
struct SnapNetAnimationUtilities_GetComponentSpaceBoneTransform final
{
public:
	const class UAnimMontage*                     Montage;                                           // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Time;                                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x000C(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_14[0xC];                                       // 0x0014(0x000C)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0020(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform) == 0x000010, "Wrong alignment on SnapNetAnimationUtilities_GetComponentSpaceBoneTransform");
static_assert(sizeof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform) == 0x000090, "Wrong size on SnapNetAnimationUtilities_GetComponentSpaceBoneTransform");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform, Montage) == 0x000000, "Member 'SnapNetAnimationUtilities_GetComponentSpaceBoneTransform::Montage' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform, Time) == 0x000008, "Member 'SnapNetAnimationUtilities_GetComponentSpaceBoneTransform::Time' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform, SocketName) == 0x00000C, "Member 'SnapNetAnimationUtilities_GetComponentSpaceBoneTransform::SocketName' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform, OutTransform) == 0x000020, "Member 'SnapNetAnimationUtilities_GetComponentSpaceBoneTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceBoneTransform, ReturnValue) == 0x000080, "Member 'SnapNetAnimationUtilities_GetComponentSpaceBoneTransform::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetAnimationUtilities.GetComponentSpaceSocketTransform
// 0x0090 (0x0090 - 0x0000)
struct SnapNetAnimationUtilities_GetComponentSpaceSocketTransform final
{
public:
	const class UAnimSequenceBase*                AnimationSequence;                                 // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	double                                        Time;                                              // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   SocketName;                                        // 0x0010(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_18[0x8];                                       // 0x0018(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTransform                             OutTransform;                                      // 0x0020(0x0060)(Parm, OutParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0080(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_81[0xF];                                       // 0x0081(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform) == 0x000010, "Wrong alignment on SnapNetAnimationUtilities_GetComponentSpaceSocketTransform");
static_assert(sizeof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform) == 0x000090, "Wrong size on SnapNetAnimationUtilities_GetComponentSpaceSocketTransform");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform, AnimationSequence) == 0x000000, "Member 'SnapNetAnimationUtilities_GetComponentSpaceSocketTransform::AnimationSequence' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform, Time) == 0x000008, "Member 'SnapNetAnimationUtilities_GetComponentSpaceSocketTransform::Time' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform, SocketName) == 0x000010, "Member 'SnapNetAnimationUtilities_GetComponentSpaceSocketTransform::SocketName' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform, OutTransform) == 0x000020, "Member 'SnapNetAnimationUtilities_GetComponentSpaceSocketTransform::OutTransform' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_GetComponentSpaceSocketTransform, ReturnValue) == 0x000080, "Member 'SnapNetAnimationUtilities_GetComponentSpaceSocketTransform::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetAnimationUtilities.SyncMontageState
// 0x0028 (0x0028 - 0x0000)
struct SnapNetAnimationUtilities_SyncMontageState final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageGroupName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackPosition;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlayRate;                                          // 0x001C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetMontageUpdateType                     UpdateType;                                        // 0x0020(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_21[0x7];                                       // 0x0021(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetAnimationUtilities_SyncMontageState) == 0x000008, "Wrong alignment on SnapNetAnimationUtilities_SyncMontageState");
static_assert(sizeof(SnapNetAnimationUtilities_SyncMontageState) == 0x000028, "Wrong size on SnapNetAnimationUtilities_SyncMontageState");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, AnimInstance) == 0x000000, "Member 'SnapNetAnimationUtilities_SyncMontageState::AnimInstance' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, MontageGroupName) == 0x000008, "Member 'SnapNetAnimationUtilities_SyncMontageState::MontageGroupName' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, Montage) == 0x000010, "Member 'SnapNetAnimationUtilities_SyncMontageState::Montage' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, PlaybackPosition) == 0x000018, "Member 'SnapNetAnimationUtilities_SyncMontageState::PlaybackPosition' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, PlayRate) == 0x00001C, "Member 'SnapNetAnimationUtilities_SyncMontageState::PlayRate' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_SyncMontageState, UpdateType) == 0x000020, "Member 'SnapNetAnimationUtilities_SyncMontageState::UpdateType' has a wrong offset!");

// Function SnapNet.SnapNetAnimationUtilities.UpdateMontageState
// 0x0020 (0x0020 - 0x0000)
struct SnapNetAnimationUtilities_UpdateMontageState final
{
public:
	class UAnimInstance*                          AnimInstance;                                      // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   MontageGroupName;                                  // 0x0008(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class UAnimMontage*                           Montage;                                           // 0x0010(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         PlaybackPosition;                                  // 0x0018(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetMontageUpdateType                     UpdateType;                                        // 0x001C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1D[0x3];                                       // 0x001D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetAnimationUtilities_UpdateMontageState) == 0x000008, "Wrong alignment on SnapNetAnimationUtilities_UpdateMontageState");
static_assert(sizeof(SnapNetAnimationUtilities_UpdateMontageState) == 0x000020, "Wrong size on SnapNetAnimationUtilities_UpdateMontageState");
static_assert(offsetof(SnapNetAnimationUtilities_UpdateMontageState, AnimInstance) == 0x000000, "Member 'SnapNetAnimationUtilities_UpdateMontageState::AnimInstance' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_UpdateMontageState, MontageGroupName) == 0x000008, "Member 'SnapNetAnimationUtilities_UpdateMontageState::MontageGroupName' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_UpdateMontageState, Montage) == 0x000010, "Member 'SnapNetAnimationUtilities_UpdateMontageState::Montage' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_UpdateMontageState, PlaybackPosition) == 0x000018, "Member 'SnapNetAnimationUtilities_UpdateMontageState::PlaybackPosition' has a wrong offset!");
static_assert(offsetof(SnapNetAnimationUtilities_UpdateMontageState, UpdateType) == 0x00001C, "Member 'SnapNetAnimationUtilities_UpdateMontageState::UpdateType' has a wrong offset!");

// Function SnapNet.SnapNetCharacterEntity.CharacterMovementUpdated
// 0x0038 (0x0038 - 0x0000)
struct SnapNetCharacterEntity_CharacterMovementUpdated final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector                                OldLocation;                                       // 0x0008(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FVector                                OldVelocity;                                       // 0x0020(0x0018)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetCharacterEntity_CharacterMovementUpdated) == 0x000008, "Wrong alignment on SnapNetCharacterEntity_CharacterMovementUpdated");
static_assert(sizeof(SnapNetCharacterEntity_CharacterMovementUpdated) == 0x000038, "Wrong size on SnapNetCharacterEntity_CharacterMovementUpdated");
static_assert(offsetof(SnapNetCharacterEntity_CharacterMovementUpdated, DeltaSeconds) == 0x000000, "Member 'SnapNetCharacterEntity_CharacterMovementUpdated::DeltaSeconds' has a wrong offset!");
static_assert(offsetof(SnapNetCharacterEntity_CharacterMovementUpdated, OldLocation) == 0x000008, "Member 'SnapNetCharacterEntity_CharacterMovementUpdated::OldLocation' has a wrong offset!");
static_assert(offsetof(SnapNetCharacterEntity_CharacterMovementUpdated, OldVelocity) == 0x000020, "Member 'SnapNetCharacterEntity_CharacterMovementUpdated::OldVelocity' has a wrong offset!");

// Function SnapNet.SnapNetClient.Get
// 0x0010 (0x0010 - 0x0000)
struct SnapNetClient_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetClient*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_Get) == 0x000008, "Wrong alignment on SnapNetClient_Get");
static_assert(sizeof(SnapNetClient_Get) == 0x000010, "Wrong size on SnapNetClient_Get");
static_assert(offsetof(SnapNetClient_Get, WorldContextObject) == 0x000000, "Member 'SnapNetClient_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetClient_Get, ReturnValue) == 0x000008, "Member 'SnapNetClient_Get::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.PlayReplayFile
// 0x0020 (0x0020 - 0x0000)
struct SnapNetClient_PlayReplayFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0010(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0014(0x0004)(Parm, OutParm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetClient_PlayReplayFile) == 0x000008, "Wrong alignment on SnapNetClient_PlayReplayFile");
static_assert(sizeof(SnapNetClient_PlayReplayFile) == 0x000020, "Wrong size on SnapNetClient_PlayReplayFile");
static_assert(offsetof(SnapNetClient_PlayReplayFile, Filename) == 0x000000, "Member 'SnapNetClient_PlayReplayFile::Filename' has a wrong offset!");
static_assert(offsetof(SnapNetClient_PlayReplayFile, StartTime) == 0x000010, "Member 'SnapNetClient_PlayReplayFile::StartTime' has a wrong offset!");
static_assert(offsetof(SnapNetClient_PlayReplayFile, EndTime) == 0x000014, "Member 'SnapNetClient_PlayReplayFile::EndTime' has a wrong offset!");
static_assert(offsetof(SnapNetClient_PlayReplayFile, ReturnValue) == 0x000018, "Member 'SnapNetClient_PlayReplayFile::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.SeekReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SeekReplay final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SeekReplay) == 0x000004, "Wrong alignment on SnapNetClient_SeekReplay");
static_assert(sizeof(SnapNetClient_SeekReplay) == 0x000004, "Wrong size on SnapNetClient_SeekReplay");
static_assert(offsetof(SnapNetClient_SeekReplay, Time) == 0x000000, "Member 'SnapNetClient_SeekReplay::Time' has a wrong offset!");

// Function SnapNet.SnapNetClient.SendReliableMessage
// 0x0010 (0x0010 - 0x0000)
struct SnapNetClient_SendReliableMessage final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetReliableMessage*                Message;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SendReliableMessage) == 0x000008, "Wrong alignment on SnapNetClient_SendReliableMessage");
static_assert(sizeof(SnapNetClient_SendReliableMessage) == 0x000010, "Wrong size on SnapNetClient_SendReliableMessage");
static_assert(offsetof(SnapNetClient_SendReliableMessage, LocalPlayerIndex) == 0x000000, "Member 'SnapNetClient_SendReliableMessage::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_SendReliableMessage, Message) == 0x000008, "Member 'SnapNetClient_SendReliableMessage::Message' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetAdditionalJitterBufferMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetAdditionalJitterBufferMilliseconds final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetAdditionalJitterBufferMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_SetAdditionalJitterBufferMilliseconds");
static_assert(sizeof(SnapNetClient_SetAdditionalJitterBufferMilliseconds) == 0x000004, "Wrong size on SnapNetClient_SetAdditionalJitterBufferMilliseconds");
static_assert(offsetof(SnapNetClient_SetAdditionalJitterBufferMilliseconds, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetAdditionalJitterBufferMilliseconds::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetInputDelayBeforePredictionMaxMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds");
static_assert(sizeof(SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds) == 0x000004, "Wrong size on SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds");
static_assert(offsetof(SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetInputDelayBeforePredictionMaxMilliseconds::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetInputDelayBeforePredictionMinMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds");
static_assert(sizeof(SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds) == 0x000004, "Wrong size on SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds");
static_assert(offsetof(SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetInputDelayBeforePredictionMinMilliseconds::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetPacketCodecClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_SetPacketCodecClass final
{
public:
	TSubclassOf<class USnapNetPacketCodec>        PacketCodecClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetPacketCodecClass) == 0x000008, "Wrong alignment on SnapNetClient_SetPacketCodecClass");
static_assert(sizeof(SnapNetClient_SetPacketCodecClass) == 0x000008, "Wrong size on SnapNetClient_SetPacketCodecClass");
static_assert(offsetof(SnapNetClient_SetPacketCodecClass, PacketCodecClass) == 0x000000, "Member 'SnapNetClient_SetPacketCodecClass::PacketCodecClass' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetPacketSimulationJitter
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetPacketSimulationJitter final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetPacketSimulationJitter) == 0x000004, "Wrong alignment on SnapNetClient_SetPacketSimulationJitter");
static_assert(sizeof(SnapNetClient_SetPacketSimulationJitter) == 0x000004, "Wrong size on SnapNetClient_SetPacketSimulationJitter");
static_assert(offsetof(SnapNetClient_SetPacketSimulationJitter, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetPacketSimulationJitter::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetPacketSimulationLatency
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetPacketSimulationLatency final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetPacketSimulationLatency) == 0x000004, "Wrong alignment on SnapNetClient_SetPacketSimulationLatency");
static_assert(sizeof(SnapNetClient_SetPacketSimulationLatency) == 0x000004, "Wrong size on SnapNetClient_SetPacketSimulationLatency");
static_assert(offsetof(SnapNetClient_SetPacketSimulationLatency, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetPacketSimulationLatency::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetPacketSimulationLoss
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetPacketSimulationLoss final
{
public:
	float                                         Percentage;                                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetPacketSimulationLoss) == 0x000004, "Wrong alignment on SnapNetClient_SetPacketSimulationLoss");
static_assert(sizeof(SnapNetClient_SetPacketSimulationLoss) == 0x000004, "Wrong size on SnapNetClient_SetPacketSimulationLoss");
static_assert(offsetof(SnapNetClient_SetPacketSimulationLoss, Percentage) == 0x000000, "Member 'SnapNetClient_SetPacketSimulationLoss::Percentage' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetPredictedMaxMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetPredictedMaxMilliseconds final
{
public:
	int32                                         Milliseconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetPredictedMaxMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_SetPredictedMaxMilliseconds");
static_assert(sizeof(SnapNetClient_SetPredictedMaxMilliseconds) == 0x000004, "Wrong size on SnapNetClient_SetPredictedMaxMilliseconds");
static_assert(offsetof(SnapNetClient_SetPredictedMaxMilliseconds, Milliseconds) == 0x000000, "Member 'SnapNetClient_SetPredictedMaxMilliseconds::Milliseconds' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetRenderInterpolationMethod
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_SetRenderInterpolationMethod final
{
public:
	ESnapNetRenderInterpolationMethod             RenderInterpolationMethod;                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetRenderInterpolationMethod) == 0x000001, "Wrong alignment on SnapNetClient_SetRenderInterpolationMethod");
static_assert(sizeof(SnapNetClient_SetRenderInterpolationMethod) == 0x000001, "Wrong size on SnapNetClient_SetRenderInterpolationMethod");
static_assert(offsetof(SnapNetClient_SetRenderInterpolationMethod, RenderInterpolationMethod) == 0x000000, "Member 'SnapNetClient_SetRenderInterpolationMethod::RenderInterpolationMethod' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetSpectatedPlayerIndexForReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_SetSpectatedPlayerIndexForReplay final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetSpectatedPlayerIndexForReplay) == 0x000004, "Wrong alignment on SnapNetClient_SetSpectatedPlayerIndexForReplay");
static_assert(sizeof(SnapNetClient_SetSpectatedPlayerIndexForReplay) == 0x000004, "Wrong size on SnapNetClient_SetSpectatedPlayerIndexForReplay");
static_assert(offsetof(SnapNetClient_SetSpectatedPlayerIndexForReplay, PlayerIndex) == 0x000000, "Member 'SnapNetClient_SetSpectatedPlayerIndexForReplay::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetClient.SetTransportClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_SetTransportClass final
{
public:
	TSubclassOf<class USnapNetTransport>          TransportClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_SetTransportClass) == 0x000008, "Wrong alignment on SnapNetClient_SetTransportClass");
static_assert(sizeof(SnapNetClient_SetTransportClass) == 0x000008, "Wrong size on SnapNetClient_SetTransportClass");
static_assert(offsetof(SnapNetClient_SetTransportClass, TransportClass) == 0x000000, "Member 'SnapNetClient_SetTransportClass::TransportClass' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetAdditionalJitterBufferMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetAdditionalJitterBufferMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetAdditionalJitterBufferMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_GetAdditionalJitterBufferMilliseconds");
static_assert(sizeof(SnapNetClient_GetAdditionalJitterBufferMilliseconds) == 0x000004, "Wrong size on SnapNetClient_GetAdditionalJitterBufferMilliseconds");
static_assert(offsetof(SnapNetClient_GetAdditionalJitterBufferMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetAdditionalJitterBufferMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetBufferedRemoteInputs
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetBufferedRemoteInputs final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetBufferedRemoteInputs) == 0x000004, "Wrong alignment on SnapNetClient_GetBufferedRemoteInputs");
static_assert(sizeof(SnapNetClient_GetBufferedRemoteInputs) == 0x000004, "Wrong size on SnapNetClient_GetBufferedRemoteInputs");
static_assert(offsetof(SnapNetClient_GetBufferedRemoteInputs, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetBufferedRemoteInputs::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetConnectionStatus
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_GetConnectionStatus final
{
public:
	ESnapNetClientConnectionStatus                ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetConnectionStatus) == 0x000001, "Wrong alignment on SnapNetClient_GetConnectionStatus");
static_assert(sizeof(SnapNetClient_GetConnectionStatus) == 0x000001, "Wrong size on SnapNetClient_GetConnectionStatus");
static_assert(offsetof(SnapNetClient_GetConnectionStatus, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetConnectionStatus::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetInputDelayBeforePredictionMaxMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds");
static_assert(sizeof(SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds) == 0x000004, "Wrong size on SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds");
static_assert(offsetof(SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetInputDelayBeforePredictionMaxMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetInputDelayBeforePredictionMinMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds");
static_assert(sizeof(SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds) == 0x000004, "Wrong size on SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds");
static_assert(offsetof(SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetInputDelayBeforePredictionMinMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetInputDelayFrames
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetInputDelayFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetInputDelayFrames) == 0x000004, "Wrong alignment on SnapNetClient_GetInputDelayFrames");
static_assert(sizeof(SnapNetClient_GetInputDelayFrames) == 0x000004, "Wrong size on SnapNetClient_GetInputDelayFrames");
static_assert(offsetof(SnapNetClient_GetInputDelayFrames, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetInputDelayFrames::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetInstantReplayContextEntityIndex
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetInstantReplayContextEntityIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetInstantReplayContextEntityIndex) == 0x000004, "Wrong alignment on SnapNetClient_GetInstantReplayContextEntityIndex");
static_assert(sizeof(SnapNetClient_GetInstantReplayContextEntityIndex) == 0x000004, "Wrong size on SnapNetClient_GetInstantReplayContextEntityIndex");
static_assert(offsetof(SnapNetClient_GetInstantReplayContextEntityIndex, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetInstantReplayContextEntityIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetInstantReplaySlotIndex
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetInstantReplaySlotIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetInstantReplaySlotIndex) == 0x000004, "Wrong alignment on SnapNetClient_GetInstantReplaySlotIndex");
static_assert(sizeof(SnapNetClient_GetInstantReplaySlotIndex) == 0x000004, "Wrong size on SnapNetClient_GetInstantReplaySlotIndex");
static_assert(offsetof(SnapNetClient_GetInstantReplaySlotIndex, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetInstantReplaySlotIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetJitterBufferSeconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetJitterBufferSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetJitterBufferSeconds) == 0x000004, "Wrong alignment on SnapNetClient_GetJitterBufferSeconds");
static_assert(sizeof(SnapNetClient_GetJitterBufferSeconds) == 0x000004, "Wrong size on SnapNetClient_GetJitterBufferSeconds");
static_assert(offsetof(SnapNetClient_GetJitterBufferSeconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetJitterBufferSeconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetKbpsReceived
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetKbpsReceived final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetKbpsReceived) == 0x000004, "Wrong alignment on SnapNetClient_GetKbpsReceived");
static_assert(sizeof(SnapNetClient_GetKbpsReceived) == 0x000004, "Wrong size on SnapNetClient_GetKbpsReceived");
static_assert(offsetof(SnapNetClient_GetKbpsReceived, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetKbpsReceived::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetKbpsSent
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetKbpsSent final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetKbpsSent) == 0x000004, "Wrong alignment on SnapNetClient_GetKbpsSent");
static_assert(sizeof(SnapNetClient_GetKbpsSent) == 0x000004, "Wrong size on SnapNetClient_GetKbpsSent");
static_assert(offsetof(SnapNetClient_GetKbpsSent, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetKbpsSent::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetLocalPlayerIndexForLocalPlayer
// 0x0010 (0x0010 - 0x0000)
struct SnapNetClient_GetLocalPlayerIndexForLocalPlayer final
{
public:
	class ULocalPlayer*                           LocalPlayer;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetClient_GetLocalPlayerIndexForLocalPlayer) == 0x000008, "Wrong alignment on SnapNetClient_GetLocalPlayerIndexForLocalPlayer");
static_assert(sizeof(SnapNetClient_GetLocalPlayerIndexForLocalPlayer) == 0x000010, "Wrong size on SnapNetClient_GetLocalPlayerIndexForLocalPlayer");
static_assert(offsetof(SnapNetClient_GetLocalPlayerIndexForLocalPlayer, LocalPlayer) == 0x000000, "Member 'SnapNetClient_GetLocalPlayerIndexForLocalPlayer::LocalPlayer' has a wrong offset!");
static_assert(offsetof(SnapNetClient_GetLocalPlayerIndexForLocalPlayer, ReturnValue) == 0x000008, "Member 'SnapNetClient_GetLocalPlayerIndexForLocalPlayer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetLocalPlayerIndexForPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetLocalPlayerIndexForPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetLocalPlayerIndexForPlayerIndex) == 0x000004, "Wrong alignment on SnapNetClient_GetLocalPlayerIndexForPlayerIndex");
static_assert(sizeof(SnapNetClient_GetLocalPlayerIndexForPlayerIndex) == 0x000008, "Wrong size on SnapNetClient_GetLocalPlayerIndexForPlayerIndex");
static_assert(offsetof(SnapNetClient_GetLocalPlayerIndexForPlayerIndex, PlayerIndex) == 0x000000, "Member 'SnapNetClient_GetLocalPlayerIndexForPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_GetLocalPlayerIndexForPlayerIndex, ReturnValue) == 0x000004, "Member 'SnapNetClient_GetLocalPlayerIndexForPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPacketCodec
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetPacketCodec final
{
public:
	class USnapNetPacketCodec*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPacketCodec) == 0x000008, "Wrong alignment on SnapNetClient_GetPacketCodec");
static_assert(sizeof(SnapNetClient_GetPacketCodec) == 0x000008, "Wrong size on SnapNetClient_GetPacketCodec");
static_assert(offsetof(SnapNetClient_GetPacketCodec, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPacketCodec::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPacketJitterSeconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetPacketJitterSeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPacketJitterSeconds) == 0x000004, "Wrong alignment on SnapNetClient_GetPacketJitterSeconds");
static_assert(sizeof(SnapNetClient_GetPacketJitterSeconds) == 0x000004, "Wrong size on SnapNetClient_GetPacketJitterSeconds");
static_assert(offsetof(SnapNetClient_GetPacketJitterSeconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPacketJitterSeconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPacketLatencySeconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetPacketLatencySeconds final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPacketLatencySeconds) == 0x000004, "Wrong alignment on SnapNetClient_GetPacketLatencySeconds");
static_assert(sizeof(SnapNetClient_GetPacketLatencySeconds) == 0x000004, "Wrong size on SnapNetClient_GetPacketLatencySeconds");
static_assert(offsetof(SnapNetClient_GetPacketLatencySeconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPacketLatencySeconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPacketLossFraction
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetPacketLossFraction final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPacketLossFraction) == 0x000004, "Wrong alignment on SnapNetClient_GetPacketLossFraction");
static_assert(sizeof(SnapNetClient_GetPacketLossFraction) == 0x000004, "Wrong size on SnapNetClient_GetPacketLossFraction");
static_assert(offsetof(SnapNetClient_GetPacketLossFraction, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPacketLossFraction::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPlayerControllerForPlayerIndex
// 0x0010 (0x0010 - 0x0000)
struct SnapNetClient_GetPlayerControllerForPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class APlayerController*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPlayerControllerForPlayerIndex) == 0x000008, "Wrong alignment on SnapNetClient_GetPlayerControllerForPlayerIndex");
static_assert(sizeof(SnapNetClient_GetPlayerControllerForPlayerIndex) == 0x000010, "Wrong size on SnapNetClient_GetPlayerControllerForPlayerIndex");
static_assert(offsetof(SnapNetClient_GetPlayerControllerForPlayerIndex, PlayerIndex) == 0x000000, "Member 'SnapNetClient_GetPlayerControllerForPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_GetPlayerControllerForPlayerIndex, ReturnValue) == 0x000008, "Member 'SnapNetClient_GetPlayerControllerForPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetPlayerIndex final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPlayerIndex) == 0x000004, "Wrong alignment on SnapNetClient_GetPlayerIndex");
static_assert(sizeof(SnapNetClient_GetPlayerIndex) == 0x000008, "Wrong size on SnapNetClient_GetPlayerIndex");
static_assert(offsetof(SnapNetClient_GetPlayerIndex, LocalPlayerIndex) == 0x000000, "Member 'SnapNetClient_GetPlayerIndex::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_GetPlayerIndex, ReturnValue) == 0x000004, "Member 'SnapNetClient_GetPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPredictedFrames
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetPredictedFrames final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPredictedFrames) == 0x000004, "Wrong alignment on SnapNetClient_GetPredictedFrames");
static_assert(sizeof(SnapNetClient_GetPredictedFrames) == 0x000004, "Wrong size on SnapNetClient_GetPredictedFrames");
static_assert(offsetof(SnapNetClient_GetPredictedFrames, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPredictedFrames::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetPredictedMaxMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetPredictedMaxMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetPredictedMaxMilliseconds) == 0x000004, "Wrong alignment on SnapNetClient_GetPredictedMaxMilliseconds");
static_assert(sizeof(SnapNetClient_GetPredictedMaxMilliseconds) == 0x000004, "Wrong size on SnapNetClient_GetPredictedMaxMilliseconds");
static_assert(offsetof(SnapNetClient_GetPredictedMaxMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetPredictedMaxMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetSimulation
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetSimulation final
{
public:
	class USnapNetSimulation*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetSimulation) == 0x000008, "Wrong alignment on SnapNetClient_GetSimulation");
static_assert(sizeof(SnapNetClient_GetSimulation) == 0x000008, "Wrong size on SnapNetClient_GetSimulation");
static_assert(offsetof(SnapNetClient_GetSimulation, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetSimulation::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetSimulationTimeScale
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetSimulationTimeScale final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetSimulationTimeScale) == 0x000004, "Wrong alignment on SnapNetClient_GetSimulationTimeScale");
static_assert(sizeof(SnapNetClient_GetSimulationTimeScale) == 0x000004, "Wrong size on SnapNetClient_GetSimulationTimeScale");
static_assert(offsetof(SnapNetClient_GetSimulationTimeScale, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetSimulationTimeScale::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetSpectatedPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetSpectatedPlayerIndex final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetSpectatedPlayerIndex) == 0x000004, "Wrong alignment on SnapNetClient_GetSpectatedPlayerIndex");
static_assert(sizeof(SnapNetClient_GetSpectatedPlayerIndex) == 0x000008, "Wrong size on SnapNetClient_GetSpectatedPlayerIndex");
static_assert(offsetof(SnapNetClient_GetSpectatedPlayerIndex, LocalPlayerIndex) == 0x000000, "Member 'SnapNetClient_GetSpectatedPlayerIndex::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_GetSpectatedPlayerIndex, ReturnValue) == 0x000004, "Member 'SnapNetClient_GetSpectatedPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetSpectatedPlayerIndexForReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetClient_GetSpectatedPlayerIndexForReplay final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetSpectatedPlayerIndexForReplay) == 0x000004, "Wrong alignment on SnapNetClient_GetSpectatedPlayerIndexForReplay");
static_assert(sizeof(SnapNetClient_GetSpectatedPlayerIndexForReplay) == 0x000004, "Wrong size on SnapNetClient_GetSpectatedPlayerIndexForReplay");
static_assert(offsetof(SnapNetClient_GetSpectatedPlayerIndexForReplay, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetSpectatedPlayerIndexForReplay::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.GetTransport
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_GetTransport final
{
public:
	class USnapNetTransport*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_GetTransport) == 0x000008, "Wrong alignment on SnapNetClient_GetTransport");
static_assert(sizeof(SnapNetClient_GetTransport) == 0x000008, "Wrong size on SnapNetClient_GetTransport");
static_assert(offsetof(SnapNetClient_GetTransport, ReturnValue) == 0x000000, "Member 'SnapNetClient_GetTransport::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsConnectionInterrupted
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_IsConnectionInterrupted final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_IsConnectionInterrupted) == 0x000001, "Wrong alignment on SnapNetClient_IsConnectionInterrupted");
static_assert(sizeof(SnapNetClient_IsConnectionInterrupted) == 0x000001, "Wrong size on SnapNetClient_IsConnectionInterrupted");
static_assert(offsetof(SnapNetClient_IsConnectionInterrupted, ReturnValue) == 0x000000, "Member 'SnapNetClient_IsConnectionInterrupted::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsLoopback
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_IsLoopback final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_IsLoopback) == 0x000001, "Wrong alignment on SnapNetClient_IsLoopback");
static_assert(sizeof(SnapNetClient_IsLoopback) == 0x000001, "Wrong size on SnapNetClient_IsLoopback");
static_assert(offsetof(SnapNetClient_IsLoopback, ReturnValue) == 0x000000, "Member 'SnapNetClient_IsLoopback::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsNetworkSimulationEnabled
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_IsNetworkSimulationEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_IsNetworkSimulationEnabled) == 0x000001, "Wrong alignment on SnapNetClient_IsNetworkSimulationEnabled");
static_assert(sizeof(SnapNetClient_IsNetworkSimulationEnabled) == 0x000001, "Wrong size on SnapNetClient_IsNetworkSimulationEnabled");
static_assert(offsetof(SnapNetClient_IsNetworkSimulationEnabled, ReturnValue) == 0x000000, "Member 'SnapNetClient_IsNetworkSimulationEnabled::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsPlayerIndexLocal
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_IsPlayerIndexLocal final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetClient_IsPlayerIndexLocal) == 0x000004, "Wrong alignment on SnapNetClient_IsPlayerIndexLocal");
static_assert(sizeof(SnapNetClient_IsPlayerIndexLocal) == 0x000008, "Wrong size on SnapNetClient_IsPlayerIndexLocal");
static_assert(offsetof(SnapNetClient_IsPlayerIndexLocal, PlayerIndex) == 0x000000, "Member 'SnapNetClient_IsPlayerIndexLocal::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_IsPlayerIndexLocal, ReturnValue) == 0x000004, "Member 'SnapNetClient_IsPlayerIndexLocal::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsPlayerIndexSpectatedLocally
// 0x0008 (0x0008 - 0x0000)
struct SnapNetClient_IsPlayerIndexSpectatedLocally final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetClient_IsPlayerIndexSpectatedLocally) == 0x000004, "Wrong alignment on SnapNetClient_IsPlayerIndexSpectatedLocally");
static_assert(sizeof(SnapNetClient_IsPlayerIndexSpectatedLocally) == 0x000008, "Wrong size on SnapNetClient_IsPlayerIndexSpectatedLocally");
static_assert(offsetof(SnapNetClient_IsPlayerIndexSpectatedLocally, PlayerIndex) == 0x000000, "Member 'SnapNetClient_IsPlayerIndexSpectatedLocally::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetClient_IsPlayerIndexSpectatedLocally, ReturnValue) == 0x000004, "Member 'SnapNetClient_IsPlayerIndexSpectatedLocally::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsPlayingInstantReplay
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_IsPlayingInstantReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_IsPlayingInstantReplay) == 0x000001, "Wrong alignment on SnapNetClient_IsPlayingInstantReplay");
static_assert(sizeof(SnapNetClient_IsPlayingInstantReplay) == 0x000001, "Wrong size on SnapNetClient_IsPlayingInstantReplay");
static_assert(offsetof(SnapNetClient_IsPlayingInstantReplay, ReturnValue) == 0x000000, "Member 'SnapNetClient_IsPlayingInstantReplay::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClient.IsPlayingReplay
// 0x0001 (0x0001 - 0x0000)
struct SnapNetClient_IsPlayingReplay final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClient_IsPlayingReplay) == 0x000001, "Wrong alignment on SnapNetClient_IsPlayingReplay");
static_assert(sizeof(SnapNetClient_IsPlayingReplay) == 0x000001, "Wrong size on SnapNetClient_IsPlayingReplay");
static_assert(offsetof(SnapNetClient_IsPlayingReplay, ReturnValue) == 0x000000, "Member 'SnapNetClient_IsPlayingReplay::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetClientConnectAsyncAction.Connect
// 0x0010 (0x0010 - 0x0000)
struct SnapNetClientConnectAsyncAction_Connect final
{
public:
	class USnapNetClient*                         Client;                                            // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetClientConnectAsyncAction*       ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetClientConnectAsyncAction_Connect) == 0x000008, "Wrong alignment on SnapNetClientConnectAsyncAction_Connect");
static_assert(sizeof(SnapNetClientConnectAsyncAction_Connect) == 0x000010, "Wrong size on SnapNetClientConnectAsyncAction_Connect");
static_assert(offsetof(SnapNetClientConnectAsyncAction_Connect, Client) == 0x000000, "Member 'SnapNetClientConnectAsyncAction_Connect::Client' has a wrong offset!");
static_assert(offsetof(SnapNetClientConnectAsyncAction_Connect, ReturnValue) == 0x000008, "Member 'SnapNetClientConnectAsyncAction_Connect::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetCustomInput.BlueprintPopulate
// 0x0008 (0x0008 - 0x0000)
struct SnapNetCustomInput_BlueprintPopulate final
{
public:
	class APlayerController*                      LocalPlayerController;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetCustomInput_BlueprintPopulate) == 0x000008, "Wrong alignment on SnapNetCustomInput_BlueprintPopulate");
static_assert(sizeof(SnapNetCustomInput_BlueprintPopulate) == 0x000008, "Wrong size on SnapNetCustomInput_BlueprintPopulate");
static_assert(offsetof(SnapNetCustomInput_BlueprintPopulate, LocalPlayerController) == 0x000000, "Member 'SnapNetCustomInput_BlueprintPopulate::LocalPlayerController' has a wrong offset!");

// Function SnapNet.SnapNetTransport.SetTimeout
// 0x0004 (0x0004 - 0x0000)
struct SnapNetTransport_SetTimeout final
{
public:
	int32                                         TimeoutSeconds;                                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetTransport_SetTimeout) == 0x000004, "Wrong alignment on SnapNetTransport_SetTimeout");
static_assert(sizeof(SnapNetTransport_SetTimeout) == 0x000004, "Wrong size on SnapNetTransport_SetTimeout");
static_assert(offsetof(SnapNetTransport_SetTimeout, TimeoutSeconds) == 0x000000, "Member 'SnapNetTransport_SetTimeout::TimeoutSeconds' has a wrong offset!");

// Function SnapNet.SnapNetTransport.SetupClientByUrl
// 0x0010 (0x0010 - 0x0000)
struct SnapNetTransport_SetupClientByUrl final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetTransport_SetupClientByUrl) == 0x000008, "Wrong alignment on SnapNetTransport_SetupClientByUrl");
static_assert(sizeof(SnapNetTransport_SetupClientByUrl) == 0x000010, "Wrong size on SnapNetTransport_SetupClientByUrl");
static_assert(offsetof(SnapNetTransport_SetupClientByUrl, URL) == 0x000000, "Member 'SnapNetTransport_SetupClientByUrl::URL' has a wrong offset!");

// Function SnapNet.SnapNetDTLSTransport.SetServerPort
// 0x0004 (0x0004 - 0x0000)
struct SnapNetDTLSTransport_SetServerPort final
{
public:
	int32                                         Port;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetDTLSTransport_SetServerPort) == 0x000004, "Wrong alignment on SnapNetDTLSTransport_SetServerPort");
static_assert(sizeof(SnapNetDTLSTransport_SetServerPort) == 0x000004, "Wrong size on SnapNetDTLSTransport_SetServerPort");
static_assert(offsetof(SnapNetDTLSTransport_SetServerPort, Port) == 0x000000, "Member 'SnapNetDTLSTransport_SetServerPort::Port' has a wrong offset!");

// Function SnapNet.SnapNetDTLSTransport.SetSessionId
// 0x0010 (0x0010 - 0x0000)
struct SnapNetDTLSTransport_SetSessionId final
{
public:
	class FString                                 SessionId;                                         // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetDTLSTransport_SetSessionId) == 0x000008, "Wrong alignment on SnapNetDTLSTransport_SetSessionId");
static_assert(sizeof(SnapNetDTLSTransport_SetSessionId) == 0x000010, "Wrong size on SnapNetDTLSTransport_SetSessionId");
static_assert(offsetof(SnapNetDTLSTransport_SetSessionId, SessionId) == 0x000000, "Member 'SnapNetDTLSTransport_SetSessionId::SessionId' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SendToPlayer
// 0x0008 (0x0008 - 0x0000)
struct SnapNetEntityComponent_SendToPlayer final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Send;                                              // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetEntityComponent_SendToPlayer) == 0x000004, "Wrong alignment on SnapNetEntityComponent_SendToPlayer");
static_assert(sizeof(SnapNetEntityComponent_SendToPlayer) == 0x000008, "Wrong size on SnapNetEntityComponent_SendToPlayer");
static_assert(offsetof(SnapNetEntityComponent_SendToPlayer, PlayerIndex) == 0x000000, "Member 'SnapNetEntityComponent_SendToPlayer::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetEntityComponent_SendToPlayer, Send) == 0x000004, "Member 'SnapNetEntityComponent_SendToPlayer::Send' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SetInstantReplayBehavior
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_SetInstantReplayBehavior final
{
public:
	ESnapNetEntityInstantReplayBehavior           Behavior;                                          // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_SetInstantReplayBehavior) == 0x000001, "Wrong alignment on SnapNetEntityComponent_SetInstantReplayBehavior");
static_assert(sizeof(SnapNetEntityComponent_SetInstantReplayBehavior) == 0x000001, "Wrong size on SnapNetEntityComponent_SetInstantReplayBehavior");
static_assert(offsetof(SnapNetEntityComponent_SetInstantReplayBehavior, Behavior) == 0x000000, "Member 'SnapNetEntityComponent_SetInstantReplayBehavior::Behavior' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SetOwnerPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetEntityComponent_SetOwnerPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetEntityComponent_SetOwnerPlayerIndex) == 0x000004, "Wrong alignment on SnapNetEntityComponent_SetOwnerPlayerIndex");
static_assert(sizeof(SnapNetEntityComponent_SetOwnerPlayerIndex) == 0x000008, "Wrong size on SnapNetEntityComponent_SetOwnerPlayerIndex");
static_assert(offsetof(SnapNetEntityComponent_SetOwnerPlayerIndex, PlayerIndex) == 0x000000, "Member 'SnapNetEntityComponent_SetOwnerPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetEntityComponent_SetOwnerPlayerIndex, ReturnValue) == 0x000004, "Member 'SnapNetEntityComponent_SetOwnerPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SetPredictedForAllPlayers
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_SetPredictedForAllPlayers final
{
public:
	bool                                          Predicted;                                         // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_SetPredictedForAllPlayers) == 0x000001, "Wrong alignment on SnapNetEntityComponent_SetPredictedForAllPlayers");
static_assert(sizeof(SnapNetEntityComponent_SetPredictedForAllPlayers) == 0x000001, "Wrong size on SnapNetEntityComponent_SetPredictedForAllPlayers");
static_assert(offsetof(SnapNetEntityComponent_SetPredictedForAllPlayers, Predicted) == 0x000000, "Member 'SnapNetEntityComponent_SetPredictedForAllPlayers::Predicted' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SetPredictedForPlayer
// 0x0008 (0x0008 - 0x0000)
struct SnapNetEntityComponent_SetPredictedForPlayer final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Predicted;                                         // 0x0004(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetEntityComponent_SetPredictedForPlayer) == 0x000004, "Wrong alignment on SnapNetEntityComponent_SetPredictedForPlayer");
static_assert(sizeof(SnapNetEntityComponent_SetPredictedForPlayer) == 0x000008, "Wrong size on SnapNetEntityComponent_SetPredictedForPlayer");
static_assert(offsetof(SnapNetEntityComponent_SetPredictedForPlayer, PlayerIndex) == 0x000000, "Member 'SnapNetEntityComponent_SetPredictedForPlayer::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetEntityComponent_SetPredictedForPlayer, Predicted) == 0x000004, "Member 'SnapNetEntityComponent_SetPredictedForPlayer::Predicted' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.SetRequiresOwnerInput
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_SetRequiresOwnerInput final
{
public:
	bool                                          RequiresOwnerInput_0;                              // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_SetRequiresOwnerInput) == 0x000001, "Wrong alignment on SnapNetEntityComponent_SetRequiresOwnerInput");
static_assert(sizeof(SnapNetEntityComponent_SetRequiresOwnerInput) == 0x000001, "Wrong size on SnapNetEntityComponent_SetRequiresOwnerInput");
static_assert(offsetof(SnapNetEntityComponent_SetRequiresOwnerInput, RequiresOwnerInput_0) == 0x000000, "Member 'SnapNetEntityComponent_SetRequiresOwnerInput::RequiresOwnerInput_0' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.GeneratePerFrameSeed
// 0x0008 (0x0008 - 0x0000)
struct SnapNetEntityComponent_GeneratePerFrameSeed final
{
public:
	int32                                         FixedSeed;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_GeneratePerFrameSeed) == 0x000004, "Wrong alignment on SnapNetEntityComponent_GeneratePerFrameSeed");
static_assert(sizeof(SnapNetEntityComponent_GeneratePerFrameSeed) == 0x000008, "Wrong size on SnapNetEntityComponent_GeneratePerFrameSeed");
static_assert(offsetof(SnapNetEntityComponent_GeneratePerFrameSeed, FixedSeed) == 0x000000, "Member 'SnapNetEntityComponent_GeneratePerFrameSeed::FixedSeed' has a wrong offset!");
static_assert(offsetof(SnapNetEntityComponent_GeneratePerFrameSeed, ReturnValue) == 0x000004, "Member 'SnapNetEntityComponent_GeneratePerFrameSeed::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.GetEntityRendererClass
// 0x0028 (0x0028 - 0x0000)
struct SnapNetEntityComponent_GetEntityRendererClass final
{
public:
	TSoftClassPtr<class UClass>                   ReturnValue;                                       // 0x0000(0x0028)(Parm, OutParm, ReturnParm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_GetEntityRendererClass) == 0x000008, "Wrong alignment on SnapNetEntityComponent_GetEntityRendererClass");
static_assert(sizeof(SnapNetEntityComponent_GetEntityRendererClass) == 0x000028, "Wrong size on SnapNetEntityComponent_GetEntityRendererClass");
static_assert(offsetof(SnapNetEntityComponent_GetEntityRendererClass, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_GetEntityRendererClass::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.GetOwnerPlayerIndex
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityComponent_GetOwnerPlayerIndex final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_GetOwnerPlayerIndex) == 0x000004, "Wrong alignment on SnapNetEntityComponent_GetOwnerPlayerIndex");
static_assert(sizeof(SnapNetEntityComponent_GetOwnerPlayerIndex) == 0x000004, "Wrong size on SnapNetEntityComponent_GetOwnerPlayerIndex");
static_assert(offsetof(SnapNetEntityComponent_GetOwnerPlayerIndex, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_GetOwnerPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.GetTimeMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityComponent_GetTimeMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_GetTimeMilliseconds) == 0x000004, "Wrong alignment on SnapNetEntityComponent_GetTimeMilliseconds");
static_assert(sizeof(SnapNetEntityComponent_GetTimeMilliseconds) == 0x000004, "Wrong size on SnapNetEntityComponent_GetTimeMilliseconds");
static_assert(offsetof(SnapNetEntityComponent_GetTimeMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_GetTimeMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.HasSimulatedState
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_HasSimulatedState final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_HasSimulatedState) == 0x000001, "Wrong alignment on SnapNetEntityComponent_HasSimulatedState");
static_assert(sizeof(SnapNetEntityComponent_HasSimulatedState) == 0x000001, "Wrong size on SnapNetEntityComponent_HasSimulatedState");
static_assert(offsetof(SnapNetEntityComponent_HasSimulatedState, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_HasSimulatedState::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.IsOwnerPlayerLocal
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_IsOwnerPlayerLocal final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_IsOwnerPlayerLocal) == 0x000001, "Wrong alignment on SnapNetEntityComponent_IsOwnerPlayerLocal");
static_assert(sizeof(SnapNetEntityComponent_IsOwnerPlayerLocal) == 0x000001, "Wrong size on SnapNetEntityComponent_IsOwnerPlayerLocal");
static_assert(offsetof(SnapNetEntityComponent_IsOwnerPlayerLocal, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_IsOwnerPlayerLocal::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityComponent.IsSimulated
// 0x0001 (0x0001 - 0x0000)
struct SnapNetEntityComponent_IsSimulated final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityComponent_IsSimulated) == 0x000001, "Wrong alignment on SnapNetEntityComponent_IsSimulated");
static_assert(sizeof(SnapNetEntityComponent_IsSimulated) == 0x000001, "Wrong size on SnapNetEntityComponent_IsSimulated");
static_assert(offsetof(SnapNetEntityComponent_IsSimulated, ReturnValue) == 0x000000, "Member 'SnapNetEntityComponent_IsSimulated::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetRewindAsyncAction.RewindSimulation
// 0x0010 (0x0010 - 0x0000)
struct SnapNetRewindAsyncAction_RewindSimulation final
{
public:
	class USnapNetEntityComponent*                EntityComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetRewindAsyncAction*              ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetRewindAsyncAction_RewindSimulation) == 0x000008, "Wrong alignment on SnapNetRewindAsyncAction_RewindSimulation");
static_assert(sizeof(SnapNetRewindAsyncAction_RewindSimulation) == 0x000010, "Wrong size on SnapNetRewindAsyncAction_RewindSimulation");
static_assert(offsetof(SnapNetRewindAsyncAction_RewindSimulation, EntityComponent) == 0x000000, "Member 'SnapNetRewindAsyncAction_RewindSimulation::EntityComponent' has a wrong offset!");
static_assert(offsetof(SnapNetRewindAsyncAction_RewindSimulation, ReturnValue) == 0x000008, "Member 'SnapNetRewindAsyncAction_RewindSimulation::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetRewindAsyncAction.RewindSimulationSubset
// 0x0020 (0x0020 - 0x0000)
struct SnapNetRewindAsyncAction_RewindSimulationSubset final
{
public:
	class USnapNetEntityComponent*                EntityComponent;                                   // 0x0000(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TArray<int32>                                 EntityIndicesToRewind;                             // 0x0008(0x0010)(Parm, ZeroConstructor, NativeAccessSpecifierPublic)
	class USnapNetRewindAsyncAction*              ReturnValue;                                       // 0x0018(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetRewindAsyncAction_RewindSimulationSubset) == 0x000008, "Wrong alignment on SnapNetRewindAsyncAction_RewindSimulationSubset");
static_assert(sizeof(SnapNetRewindAsyncAction_RewindSimulationSubset) == 0x000020, "Wrong size on SnapNetRewindAsyncAction_RewindSimulationSubset");
static_assert(offsetof(SnapNetRewindAsyncAction_RewindSimulationSubset, EntityComponent) == 0x000000, "Member 'SnapNetRewindAsyncAction_RewindSimulationSubset::EntityComponent' has a wrong offset!");
static_assert(offsetof(SnapNetRewindAsyncAction_RewindSimulationSubset, EntityIndicesToRewind) == 0x000008, "Member 'SnapNetRewindAsyncAction_RewindSimulationSubset::EntityIndicesToRewind' has a wrong offset!");
static_assert(offsetof(SnapNetRewindAsyncAction_RewindSimulationSubset, ReturnValue) == 0x000018, "Member 'SnapNetRewindAsyncAction_RewindSimulationSubset::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityRendererComponent.SetPredictionErrorReductionRate
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityRendererComponent_SetPredictionErrorReductionRate final
{
public:
	float                                         PredictionErrorReductionRate_0;                    // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityRendererComponent_SetPredictionErrorReductionRate) == 0x000004, "Wrong alignment on SnapNetEntityRendererComponent_SetPredictionErrorReductionRate");
static_assert(sizeof(SnapNetEntityRendererComponent_SetPredictionErrorReductionRate) == 0x000004, "Wrong size on SnapNetEntityRendererComponent_SetPredictionErrorReductionRate");
static_assert(offsetof(SnapNetEntityRendererComponent_SetPredictionErrorReductionRate, PredictionErrorReductionRate_0) == 0x000000, "Member 'SnapNetEntityRendererComponent_SetPredictionErrorReductionRate::PredictionErrorReductionRate_0' has a wrong offset!");

// Function SnapNet.SnapNetEntityRendererComponent.SetPredictionErrorThreshold
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityRendererComponent_SetPredictionErrorThreshold final
{
public:
	float                                         PredictionErrorThreshold_0;                        // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityRendererComponent_SetPredictionErrorThreshold) == 0x000004, "Wrong alignment on SnapNetEntityRendererComponent_SetPredictionErrorThreshold");
static_assert(sizeof(SnapNetEntityRendererComponent_SetPredictionErrorThreshold) == 0x000004, "Wrong size on SnapNetEntityRendererComponent_SetPredictionErrorThreshold");
static_assert(offsetof(SnapNetEntityRendererComponent_SetPredictionErrorThreshold, PredictionErrorThreshold_0) == 0x000000, "Member 'SnapNetEntityRendererComponent_SetPredictionErrorThreshold::PredictionErrorThreshold_0' has a wrong offset!");

// Function SnapNet.SnapNetEntityRendererComponent.GetPositionSmoothingRate
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityRendererComponent_GetPositionSmoothingRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityRendererComponent_GetPositionSmoothingRate) == 0x000004, "Wrong alignment on SnapNetEntityRendererComponent_GetPositionSmoothingRate");
static_assert(sizeof(SnapNetEntityRendererComponent_GetPositionSmoothingRate) == 0x000004, "Wrong size on SnapNetEntityRendererComponent_GetPositionSmoothingRate");
static_assert(offsetof(SnapNetEntityRendererComponent_GetPositionSmoothingRate, ReturnValue) == 0x000000, "Member 'SnapNetEntityRendererComponent_GetPositionSmoothingRate::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetEntityRendererComponent.GetRotationSmoothingRate
// 0x0004 (0x0004 - 0x0000)
struct SnapNetEntityRendererComponent_GetRotationSmoothingRate final
{
public:
	float                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetEntityRendererComponent_GetRotationSmoothingRate) == 0x000004, "Wrong alignment on SnapNetEntityRendererComponent_GetRotationSmoothingRate");
static_assert(sizeof(SnapNetEntityRendererComponent_GetRotationSmoothingRate) == 0x000004, "Wrong size on SnapNetEntityRendererComponent_GetRotationSmoothingRate");
static_assert(offsetof(SnapNetEntityRendererComponent_GetRotationSmoothingRate, ReturnValue) == 0x000000, "Member 'SnapNetEntityRendererComponent_GetRotationSmoothingRate::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.AdvanceSingleSnapNetFrame
// 0x0004 (0x0004 - 0x0000)
struct SnapNetGameInstance_AdvanceSingleSnapNetFrame final
{
public:
	int32                                         Enabled;                                           // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_AdvanceSingleSnapNetFrame) == 0x000004, "Wrong alignment on SnapNetGameInstance_AdvanceSingleSnapNetFrame");
static_assert(sizeof(SnapNetGameInstance_AdvanceSingleSnapNetFrame) == 0x000004, "Wrong size on SnapNetGameInstance_AdvanceSingleSnapNetFrame");
static_assert(offsetof(SnapNetGameInstance_AdvanceSingleSnapNetFrame, Enabled) == 0x000000, "Member 'SnapNetGameInstance_AdvanceSingleSnapNetFrame::Enabled' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.ConnectSnapNetClient
// 0x0010 (0x0010 - 0x0000)
struct SnapNetGameInstance_ConnectSnapNetClient final
{
public:
	class FString                                 URL;                                               // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_ConnectSnapNetClient) == 0x000008, "Wrong alignment on SnapNetGameInstance_ConnectSnapNetClient");
static_assert(sizeof(SnapNetGameInstance_ConnectSnapNetClient) == 0x000010, "Wrong size on SnapNetGameInstance_ConnectSnapNetClient");
static_assert(offsetof(SnapNetGameInstance_ConnectSnapNetClient, URL) == 0x000000, "Member 'SnapNetGameInstance_ConnectSnapNetClient::URL' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.PlaySnapNetReplay
// 0x0010 (0x0010 - 0x0000)
struct SnapNetGameInstance_PlaySnapNetReplay final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_PlaySnapNetReplay) == 0x000008, "Wrong alignment on SnapNetGameInstance_PlaySnapNetReplay");
static_assert(sizeof(SnapNetGameInstance_PlaySnapNetReplay) == 0x000010, "Wrong size on SnapNetGameInstance_PlaySnapNetReplay");
static_assert(offsetof(SnapNetGameInstance_PlaySnapNetReplay, Name_0) == 0x000000, "Member 'SnapNetGameInstance_PlaySnapNetReplay::Name_0' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.SaveSnapNetReplay
// 0x0010 (0x0010 - 0x0000)
struct SnapNetGameInstance_SaveSnapNetReplay final
{
public:
	class FString                                 Name_0;                                            // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_SaveSnapNetReplay) == 0x000008, "Wrong alignment on SnapNetGameInstance_SaveSnapNetReplay");
static_assert(sizeof(SnapNetGameInstance_SaveSnapNetReplay) == 0x000010, "Wrong size on SnapNetGameInstance_SaveSnapNetReplay");
static_assert(offsetof(SnapNetGameInstance_SaveSnapNetReplay, Name_0) == 0x000000, "Member 'SnapNetGameInstance_SaveSnapNetReplay::Name_0' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.SeekSnapNetReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetGameInstance_SeekSnapNetReplay final
{
public:
	int32                                         Time;                                              // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_SeekSnapNetReplay) == 0x000004, "Wrong alignment on SnapNetGameInstance_SeekSnapNetReplay");
static_assert(sizeof(SnapNetGameInstance_SeekSnapNetReplay) == 0x000004, "Wrong size on SnapNetGameInstance_SeekSnapNetReplay");
static_assert(offsetof(SnapNetGameInstance_SeekSnapNetReplay, Time) == 0x000000, "Member 'SnapNetGameInstance_SeekSnapNetReplay::Time' has a wrong offset!");

// Function SnapNet.SnapNetGameInstance.SpectateSnapNetReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetGameInstance_SpectateSnapNetReplay final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetGameInstance_SpectateSnapNetReplay) == 0x000004, "Wrong alignment on SnapNetGameInstance_SpectateSnapNetReplay");
static_assert(sizeof(SnapNetGameInstance_SpectateSnapNetReplay) == 0x000004, "Wrong size on SnapNetGameInstance_SpectateSnapNetReplay");
static_assert(offsetof(SnapNetGameInstance_SpectateSnapNetReplay, PlayerIndex) == 0x000000, "Member 'SnapNetGameInstance_SpectateSnapNetReplay::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetPlayerJoinRequest.BlueprintPopulate
// 0x0008 (0x0008 - 0x0000)
struct SnapNetPlayerJoinRequest_BlueprintPopulate final
{
public:
	class APlayerController*                      LocalPlayerController;                             // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPlayerJoinRequest_BlueprintPopulate) == 0x000008, "Wrong alignment on SnapNetPlayerJoinRequest_BlueprintPopulate");
static_assert(sizeof(SnapNetPlayerJoinRequest_BlueprintPopulate) == 0x000008, "Wrong size on SnapNetPlayerJoinRequest_BlueprintPopulate");
static_assert(offsetof(SnapNetPlayerJoinRequest_BlueprintPopulate, LocalPlayerController) == 0x000000, "Member 'SnapNetPlayerJoinRequest_BlueprintPopulate::LocalPlayerController' has a wrong offset!");

// Function SnapNet.SnapNetPlayerJoinRequest.CompletePlayerJoin
// 0x0004 (0x0004 - 0x0000)
struct SnapNetPlayerJoinRequest_CompletePlayerJoin final
{
public:
	int32                                         ErrorCode;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPlayerJoinRequest_CompletePlayerJoin) == 0x000004, "Wrong alignment on SnapNetPlayerJoinRequest_CompletePlayerJoin");
static_assert(sizeof(SnapNetPlayerJoinRequest_CompletePlayerJoin) == 0x000004, "Wrong size on SnapNetPlayerJoinRequest_CompletePlayerJoin");
static_assert(offsetof(SnapNetPlayerJoinRequest_CompletePlayerJoin, ErrorCode) == 0x000000, "Member 'SnapNetPlayerJoinRequest_CompletePlayerJoin::ErrorCode' has a wrong offset!");

// Function SnapNet.SnapNetPropertyBooleanFunctionLibrary.Conv_SnapNetPropertyBooleanToBool
// 0x0020 (0x0020 - 0x0000)
struct SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool final
{
public:
	struct FSnapNetPropertyBoolean                SnapNetPropertyBoolean;                            // 0x0000(0x0018)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0018(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool) == 0x000008, "Wrong alignment on SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool");
static_assert(sizeof(SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool) == 0x000020, "Wrong size on SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool");
static_assert(offsetof(SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool, SnapNetPropertyBoolean) == 0x000000, "Member 'SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool::SnapNetPropertyBoolean' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool, ReturnValue) == 0x000018, "Member 'SnapNetPropertyBooleanFunctionLibrary_Conv_SnapNetPropertyBooleanToBool::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyBooleanFunctionLibrary.SetValue
// 0x0020 (0x0020 - 0x0000)
struct SnapNetPropertyBooleanFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyBoolean                SnapNetPropertyBoolean;                            // 0x0000(0x0018)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	bool                                          Value;                                             // 0x0018(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_19[0x7];                                       // 0x0019(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyBooleanFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyBooleanFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyBooleanFunctionLibrary_SetValue) == 0x000020, "Wrong size on SnapNetPropertyBooleanFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyBooleanFunctionLibrary_SetValue, SnapNetPropertyBoolean) == 0x000000, "Member 'SnapNetPropertyBooleanFunctionLibrary_SetValue::SnapNetPropertyBoolean' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyBooleanFunctionLibrary_SetValue, Value) == 0x000018, "Member 'SnapNetPropertyBooleanFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyClientIndexFunctionLibrary.Conv_SnapNetPropertyClientIndexToInt
// 0x0038 (0x0038 - 0x0000)
struct SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt final
{
public:
	struct FSnapNetPropertyClientIndex            SnapNetPropertyClientIndex;                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt) == 0x000008, "Wrong alignment on SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt");
static_assert(sizeof(SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt) == 0x000038, "Wrong size on SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt");
static_assert(offsetof(SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt, SnapNetPropertyClientIndex) == 0x000000, "Member 'SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt::SnapNetPropertyClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt, ReturnValue) == 0x000030, "Member 'SnapNetPropertyClientIndexFunctionLibrary_Conv_SnapNetPropertyClientIndexToInt::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyClientIndexFunctionLibrary.SetValue
// 0x0038 (0x0038 - 0x0000)
struct SnapNetPropertyClientIndexFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyClientIndex            SnapNetPropertyClientIndex;                        // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyClientIndexFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyClientIndexFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyClientIndexFunctionLibrary_SetValue) == 0x000038, "Wrong size on SnapNetPropertyClientIndexFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyClientIndexFunctionLibrary_SetValue, SnapNetPropertyClientIndex) == 0x000000, "Member 'SnapNetPropertyClientIndexFunctionLibrary_SetValue::SnapNetPropertyClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyClientIndexFunctionLibrary_SetValue, Value) == 0x000030, "Member 'SnapNetPropertyClientIndexFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyDoubleFunctionLibrary.Conv_SnapNetPropertyDoubleToDouble
// 0x0060 (0x0060 - 0x0000)
struct SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble final
{
public:
	struct FSnapNetPropertyDouble                 SnapNetPropertyDouble;                             // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble) == 0x000008, "Wrong alignment on SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble");
static_assert(sizeof(SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble) == 0x000060, "Wrong size on SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble");
static_assert(offsetof(SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble, SnapNetPropertyDouble) == 0x000000, "Member 'SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble::SnapNetPropertyDouble' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble, ReturnValue) == 0x000058, "Member 'SnapNetPropertyDoubleFunctionLibrary_Conv_SnapNetPropertyDoubleToDouble::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyDoubleFunctionLibrary.SetValue
// 0x0068 (0x0068 - 0x0000)
struct SnapNetPropertyDoubleFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyDouble                 SnapNetPropertyDouble;                             // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	double                                        Value;                                             // 0x0058(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyDoubleFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyDoubleFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyDoubleFunctionLibrary_SetValue) == 0x000068, "Wrong size on SnapNetPropertyDoubleFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyDoubleFunctionLibrary_SetValue, SnapNetPropertyDouble) == 0x000000, "Member 'SnapNetPropertyDoubleFunctionLibrary_SetValue::SnapNetPropertyDouble' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyDoubleFunctionLibrary_SetValue, Value) == 0x000058, "Member 'SnapNetPropertyDoubleFunctionLibrary_SetValue::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyDoubleFunctionLibrary_SetValue, Interpolation) == 0x000060, "Member 'SnapNetPropertyDoubleFunctionLibrary_SetValue::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.Conv_SnapNetPropertyEntityIndexToInt
// 0x0070 (0x0070 - 0x0000)
struct SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt final
{
public:
	struct FSnapNetPropertyEntityIndex            SnapNetPropertyEntityIndex;                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0068(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt) == 0x000008, "Wrong alignment on SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt");
static_assert(sizeof(SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt) == 0x000070, "Wrong size on SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt, SnapNetPropertyEntityIndex) == 0x000000, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt::SnapNetPropertyEntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt, ReturnValue) == 0x000068, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_Conv_SnapNetPropertyEntityIndexToInt::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.GetEntityComponent
// 0x0078 (0x0078 - 0x0000)
struct SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent final
{
public:
	struct FSnapNetPropertyEntityIndex            SnapNetPropertyEntityIndex;                        // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USnapNetSimulation*                     Simulation;                                        // 0x0068(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetEntityComponent*                ReturnValue;                                       // 0x0070(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent) == 0x000008, "Wrong alignment on SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent");
static_assert(sizeof(SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent) == 0x000078, "Wrong size on SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent, SnapNetPropertyEntityIndex) == 0x000000, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent::SnapNetPropertyEntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent, Simulation) == 0x000068, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent::Simulation' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent, ReturnValue) == 0x000070, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_GetEntityComponent::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.SetValue
// 0x0070 (0x0070 - 0x0000)
struct SnapNetPropertyEntityIndexFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyEntityIndex            SnapNetPropertyEntityIndex;                        // 0x0000(0x0068)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0068(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_6C[0x4];                                       // 0x006C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEntityIndexFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyEntityIndexFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyEntityIndexFunctionLibrary_SetValue) == 0x000070, "Wrong size on SnapNetPropertyEntityIndexFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_SetValue, SnapNetPropertyEntityIndex) == 0x000000, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_SetValue::SnapNetPropertyEntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_SetValue, Value) == 0x000068, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEntityIndexFunctionLibrary.SetValueByEntityReference
// 0x0070 (0x0070 - 0x0000)
struct SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference final
{
public:
	struct FSnapNetPropertyEntityIndex            SnapNetPropertyEntityIndex;                        // 0x0000(0x0068)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class USnapNetEntityComponent*                EntityComponent;                                   // 0x0068(0x0008)(Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference) == 0x000008, "Wrong alignment on SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference");
static_assert(sizeof(SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference) == 0x000070, "Wrong size on SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference, SnapNetPropertyEntityIndex) == 0x000000, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference::SnapNetPropertyEntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference, EntityComponent) == 0x000068, "Member 'SnapNetPropertyEntityIndexFunctionLibrary_SetValueByEntityReference::EntityComponent' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.Conv_SnapNetPropertyEnumToByte
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte final
{
public:
	struct FSnapNetPropertyEnum                   SnapNetPropertyEnum;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         ReturnValue;                                       // 0x0048(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte) == 0x000008, "Wrong alignment on SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte");
static_assert(sizeof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte) == 0x000050, "Wrong size on SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte, SnapNetPropertyEnum) == 0x000000, "Member 'SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte::SnapNetPropertyEnum' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte, ReturnValue) == 0x000048, "Member 'SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToByte::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.Conv_SnapNetPropertyEnumToInt
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt final
{
public:
	struct FSnapNetPropertyEnum                   SnapNetPropertyEnum;                               // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0048(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt) == 0x000008, "Wrong alignment on SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt");
static_assert(sizeof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt) == 0x000050, "Wrong size on SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt, SnapNetPropertyEnum) == 0x000000, "Member 'SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt::SnapNetPropertyEnum' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt, ReturnValue) == 0x000048, "Member 'SnapNetPropertyEnumFunctionLibrary_Conv_SnapNetPropertyEnumToInt::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.SetValueByte
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyEnumFunctionLibrary_SetValueByte final
{
public:
	struct FSnapNetPropertyEnum                   SnapNetPropertyEnum;                               // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	uint8                                         Value;                                             // 0x0048(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_49[0x7];                                       // 0x0049(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEnumFunctionLibrary_SetValueByte) == 0x000008, "Wrong alignment on SnapNetPropertyEnumFunctionLibrary_SetValueByte");
static_assert(sizeof(SnapNetPropertyEnumFunctionLibrary_SetValueByte) == 0x000050, "Wrong size on SnapNetPropertyEnumFunctionLibrary_SetValueByte");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_SetValueByte, SnapNetPropertyEnum) == 0x000000, "Member 'SnapNetPropertyEnumFunctionLibrary_SetValueByte::SnapNetPropertyEnum' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_SetValueByte, Value) == 0x000048, "Member 'SnapNetPropertyEnumFunctionLibrary_SetValueByte::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyEnumFunctionLibrary.SetValueInt
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyEnumFunctionLibrary_SetValueInt final
{
public:
	struct FSnapNetPropertyEnum                   SnapNetPropertyEnum;                               // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0048(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4C[0x4];                                       // 0x004C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyEnumFunctionLibrary_SetValueInt) == 0x000008, "Wrong alignment on SnapNetPropertyEnumFunctionLibrary_SetValueInt");
static_assert(sizeof(SnapNetPropertyEnumFunctionLibrary_SetValueInt) == 0x000050, "Wrong size on SnapNetPropertyEnumFunctionLibrary_SetValueInt");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_SetValueInt, SnapNetPropertyEnum) == 0x000000, "Member 'SnapNetPropertyEnumFunctionLibrary_SetValueInt::SnapNetPropertyEnum' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyEnumFunctionLibrary_SetValueInt, Value) == 0x000048, "Member 'SnapNetPropertyEnumFunctionLibrary_SetValueInt::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyFloatFunctionLibrary.Conv_SnapNetPropertyFloatToFloat
// 0x0048 (0x0048 - 0x0000)
struct SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat final
{
public:
	struct FSnapNetPropertyFloat                  SnapNetPropertyFloat;                              // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0040(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_44[0x4];                                       // 0x0044(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat) == 0x000008, "Wrong alignment on SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat");
static_assert(sizeof(SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat) == 0x000048, "Wrong size on SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat");
static_assert(offsetof(SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat, SnapNetPropertyFloat) == 0x000000, "Member 'SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat::SnapNetPropertyFloat' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat, ReturnValue) == 0x000040, "Member 'SnapNetPropertyFloatFunctionLibrary_Conv_SnapNetPropertyFloatToFloat::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyFloatFunctionLibrary.SetValue
// 0x0048 (0x0048 - 0x0000)
struct SnapNetPropertyFloatFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyFloat                  SnapNetPropertyFloat;                              // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	float                                         Value;                                             // 0x0040(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0044(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_45[0x3];                                       // 0x0045(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyFloatFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyFloatFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyFloatFunctionLibrary_SetValue) == 0x000048, "Wrong size on SnapNetPropertyFloatFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyFloatFunctionLibrary_SetValue, SnapNetPropertyFloat) == 0x000000, "Member 'SnapNetPropertyFloatFunctionLibrary_SetValue::SnapNetPropertyFloat' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyFloatFunctionLibrary_SetValue, Value) == 0x000040, "Member 'SnapNetPropertyFloatFunctionLibrary_SetValue::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyFloatFunctionLibrary_SetValue, Interpolation) == 0x000044, "Member 'SnapNetPropertyFloatFunctionLibrary_SetValue::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyInt32FunctionLibrary.Conv_SnapNetPropertyInt32ToInt
// 0x0040 (0x0040 - 0x0000)
struct SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt final
{
public:
	struct FSnapNetPropertyInt32                  SnapNetPropertyInt32;                              // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0038(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3C[0x4];                                       // 0x003C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt) == 0x000008, "Wrong alignment on SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt");
static_assert(sizeof(SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt) == 0x000040, "Wrong size on SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt");
static_assert(offsetof(SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt, SnapNetPropertyInt32) == 0x000000, "Member 'SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt::SnapNetPropertyInt32' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt, ReturnValue) == 0x000038, "Member 'SnapNetPropertyInt32FunctionLibrary_Conv_SnapNetPropertyInt32ToInt::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyInt32FunctionLibrary.SetValue
// 0x0040 (0x0040 - 0x0000)
struct SnapNetPropertyInt32FunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyInt32                  SnapNetPropertyInt32;                              // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0038(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x003C(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3D[0x3];                                       // 0x003D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyInt32FunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyInt32FunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyInt32FunctionLibrary_SetValue) == 0x000040, "Wrong size on SnapNetPropertyInt32FunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyInt32FunctionLibrary_SetValue, SnapNetPropertyInt32) == 0x000000, "Member 'SnapNetPropertyInt32FunctionLibrary_SetValue::SnapNetPropertyInt32' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyInt32FunctionLibrary_SetValue, Value) == 0x000038, "Member 'SnapNetPropertyInt32FunctionLibrary_SetValue::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyInt32FunctionLibrary_SetValue, Interpolation) == 0x00003C, "Member 'SnapNetPropertyInt32FunctionLibrary_SetValue::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyPlayerIndexFunctionLibrary.Conv_SnapNetPropertyPlayerIndexToInt
// 0x0038 (0x0038 - 0x0000)
struct SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt final
{
public:
	struct FSnapNetPropertyPlayerIndex            SnapNetPropertyPlayerIndex;                        // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0030(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt) == 0x000008, "Wrong alignment on SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt");
static_assert(sizeof(SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt) == 0x000038, "Wrong size on SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt");
static_assert(offsetof(SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt, SnapNetPropertyPlayerIndex) == 0x000000, "Member 'SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt::SnapNetPropertyPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt, ReturnValue) == 0x000030, "Member 'SnapNetPropertyPlayerIndexFunctionLibrary_Conv_SnapNetPropertyPlayerIndexToInt::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyPlayerIndexFunctionLibrary.SetValue
// 0x0038 (0x0038 - 0x0000)
struct SnapNetPropertyPlayerIndexFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyPlayerIndex            SnapNetPropertyPlayerIndex;                        // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	int32                                         Value;                                             // 0x0030(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_34[0x4];                                       // 0x0034(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyPlayerIndexFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyPlayerIndexFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyPlayerIndexFunctionLibrary_SetValue) == 0x000038, "Wrong size on SnapNetPropertyPlayerIndexFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyPlayerIndexFunctionLibrary_SetValue, SnapNetPropertyPlayerIndex) == 0x000000, "Member 'SnapNetPropertyPlayerIndexFunctionLibrary_SetValue::SnapNetPropertyPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyPlayerIndexFunctionLibrary_SetValue, Value) == 0x000030, "Member 'SnapNetPropertyPlayerIndexFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.GetObject
// 0x0060 (0x0060 - 0x0000)
struct SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject final
{
public:
	struct FSnapNetPropertyPrimaryAsset           SnapNetPropertyPrimaryAsset;                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0058(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject) == 0x000008, "Wrong alignment on SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject");
static_assert(sizeof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject) == 0x000060, "Wrong size on SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject, SnapNetPropertyPrimaryAsset) == 0x000000, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject::SnapNetPropertyPrimaryAsset' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject, ReturnValue) == 0x000058, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_GetObject::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.GetValue_GetPrimaryAssetId
// 0x0068 (0x0068 - 0x0000)
struct SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId final
{
public:
	struct FSnapNetPropertyPrimaryAsset           SnapNetPropertyPrimaryAsset;                       // 0x0000(0x0058)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        ReturnValue;                                       // 0x0058(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId) == 0x000008, "Wrong alignment on SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId");
static_assert(sizeof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId) == 0x000068, "Wrong size on SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId, SnapNetPropertyPrimaryAsset) == 0x000000, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId::SnapNetPropertyPrimaryAsset' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId, ReturnValue) == 0x000058, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_GetValue_GetPrimaryAssetId::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyPrimaryAssetFunctionLibrary.SetPrimaryAssetId
// 0x0068 (0x0068 - 0x0000)
struct SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId final
{
public:
	struct FSnapNetPropertyPrimaryAsset           SnapNetPropertyPrimaryAsset;                       // 0x0000(0x0058)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FPrimaryAssetId                        PrimaryAssetId;                                    // 0x0058(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId) == 0x000008, "Wrong alignment on SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId");
static_assert(sizeof(SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId) == 0x000068, "Wrong size on SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId, SnapNetPropertyPrimaryAsset) == 0x000000, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId::SnapNetPropertyPrimaryAsset' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId, PrimaryAssetId) == 0x000058, "Member 'SnapNetPropertyPrimaryAssetFunctionLibrary_SetPrimaryAssetId::PrimaryAssetId' has a wrong offset!");

// Function SnapNet.SnapNetPropertyQuaternionFunctionLibrary.Conv_SnapNetPropertyQuaternionToQuat
// 0x0060 (0x0060 - 0x0000)
struct SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat final
{
public:
	struct FSnapNetPropertyQuaternion             SnapNetPropertyQuaternion;                         // 0x0000(0x0040)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FQuat                                  ReturnValue;                                       // 0x0040(0x0020)(Parm, OutParm, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat) == 0x000010, "Wrong alignment on SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat");
static_assert(sizeof(SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat) == 0x000060, "Wrong size on SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat");
static_assert(offsetof(SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat, SnapNetPropertyQuaternion) == 0x000000, "Member 'SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat::SnapNetPropertyQuaternion' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat, ReturnValue) == 0x000040, "Member 'SnapNetPropertyQuaternionFunctionLibrary_Conv_SnapNetPropertyQuaternionToQuat::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyQuaternionFunctionLibrary.SetValue
// 0x0070 (0x0070 - 0x0000)
struct SnapNetPropertyQuaternionFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyQuaternion             SnapNetPropertyQuaternion;                         // 0x0000(0x0040)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FQuat                                  Value;                                             // 0x0040(0x0020)(ConstParm, Parm, OutParm, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0xF];                                       // 0x0061(0x000F)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyQuaternionFunctionLibrary_SetValue) == 0x000010, "Wrong alignment on SnapNetPropertyQuaternionFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyQuaternionFunctionLibrary_SetValue) == 0x000070, "Wrong size on SnapNetPropertyQuaternionFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyQuaternionFunctionLibrary_SetValue, SnapNetPropertyQuaternion) == 0x000000, "Member 'SnapNetPropertyQuaternionFunctionLibrary_SetValue::SnapNetPropertyQuaternion' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyQuaternionFunctionLibrary_SetValue, Value) == 0x000040, "Member 'SnapNetPropertyQuaternionFunctionLibrary_SetValue::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyQuaternionFunctionLibrary_SetValue, Interpolation) == 0x000060, "Member 'SnapNetPropertyQuaternionFunctionLibrary_SetValue::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyRotatorFunctionLibrary.Conv_SnapNetPropertyRotatorToRotator
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator final
{
public:
	struct FSnapNetPropertyRotator                SnapNetPropertyRotator;                            // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator) == 0x000008, "Wrong alignment on SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator");
static_assert(sizeof(SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator) == 0x000050, "Wrong size on SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator");
static_assert(offsetof(SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator, SnapNetPropertyRotator) == 0x000000, "Member 'SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator::SnapNetPropertyRotator' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator, ReturnValue) == 0x000038, "Member 'SnapNetPropertyRotatorFunctionLibrary_Conv_SnapNetPropertyRotatorToRotator::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyRotatorFunctionLibrary.SetValue
// 0x0058 (0x0058 - 0x0000)
struct SnapNetPropertyRotatorFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyRotator                SnapNetPropertyRotator;                            // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FRotator                               Value;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyRotatorFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyRotatorFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyRotatorFunctionLibrary_SetValue) == 0x000058, "Wrong size on SnapNetPropertyRotatorFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyRotatorFunctionLibrary_SetValue, SnapNetPropertyRotator) == 0x000000, "Member 'SnapNetPropertyRotatorFunctionLibrary_SetValue::SnapNetPropertyRotator' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyRotatorFunctionLibrary_SetValue, Value) == 0x000038, "Member 'SnapNetPropertyRotatorFunctionLibrary_SetValue::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyRotatorFunctionLibrary_SetValue, Interpolation) == 0x000050, "Member 'SnapNetPropertyRotatorFunctionLibrary_SetValue::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.Conv_SnapNetPropertySoftObjectPathToSoftObjectPath
// 0x0088 (0x0088 - 0x0000)
struct SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath final
{
public:
	struct FSnapNetPropertySoftObjectPath         SnapNetPropertySoftObjectPath;                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        ReturnValue;                                       // 0x0068(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath) == 0x000008, "Wrong alignment on SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath");
static_assert(sizeof(SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath) == 0x000088, "Wrong size on SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath, SnapNetPropertySoftObjectPath) == 0x000000, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath::SnapNetPropertySoftObjectPath' has a wrong offset!");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath, ReturnValue) == 0x000068, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_Conv_SnapNetPropertySoftObjectPathToSoftObjectPath::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.ResolveObject
// 0x0070 (0x0070 - 0x0000)
struct SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject final
{
public:
	struct FSnapNetPropertySoftObjectPath         SnapNetPropertySoftObjectPath;                     // 0x0000(0x0068)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class UObject*                                ReturnValue;                                       // 0x0068(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject) == 0x000008, "Wrong alignment on SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject");
static_assert(sizeof(SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject) == 0x000070, "Wrong size on SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject, SnapNetPropertySoftObjectPath) == 0x000000, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject::SnapNetPropertySoftObjectPath' has a wrong offset!");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject, ReturnValue) == 0x000068, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_ResolveObject::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertySoftObjectPathFunctionLibrary.SetValue
// 0x0088 (0x0088 - 0x0000)
struct SnapNetPropertySoftObjectPathFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertySoftObjectPath         SnapNetPropertySoftObjectPath;                     // 0x0000(0x0068)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FSoftObjectPath                        Value;                                             // 0x0068(0x0020)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertySoftObjectPathFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertySoftObjectPathFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertySoftObjectPathFunctionLibrary_SetValue) == 0x000088, "Wrong size on SnapNetPropertySoftObjectPathFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_SetValue, SnapNetPropertySoftObjectPath) == 0x000000, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_SetValue::SnapNetPropertySoftObjectPath' has a wrong offset!");
static_assert(offsetof(SnapNetPropertySoftObjectPathFunctionLibrary_SetValue, Value) == 0x000068, "Member 'SnapNetPropertySoftObjectPathFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyStringFunctionLibrary.Conv_SnapNetPropertyStringToString
// 0x0040 (0x0040 - 0x0000)
struct SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString final
{
public:
	struct FSnapNetPropertyString                 SnapNetPropertyString;                             // 0x0000(0x0030)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 ReturnValue;                                       // 0x0030(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString) == 0x000008, "Wrong alignment on SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString");
static_assert(sizeof(SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString) == 0x000040, "Wrong size on SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString");
static_assert(offsetof(SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString, SnapNetPropertyString) == 0x000000, "Member 'SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString::SnapNetPropertyString' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString, ReturnValue) == 0x000030, "Member 'SnapNetPropertyStringFunctionLibrary_Conv_SnapNetPropertyStringToString::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyStringFunctionLibrary.SetValue
// 0x0040 (0x0040 - 0x0000)
struct SnapNetPropertyStringFunctionLibrary_SetValue final
{
public:
	struct FSnapNetPropertyString                 SnapNetPropertyString;                             // 0x0000(0x0030)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0030(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyStringFunctionLibrary_SetValue) == 0x000008, "Wrong alignment on SnapNetPropertyStringFunctionLibrary_SetValue");
static_assert(sizeof(SnapNetPropertyStringFunctionLibrary_SetValue) == 0x000040, "Wrong size on SnapNetPropertyStringFunctionLibrary_SetValue");
static_assert(offsetof(SnapNetPropertyStringFunctionLibrary_SetValue, SnapNetPropertyString) == 0x000000, "Member 'SnapNetPropertyStringFunctionLibrary_SetValue::SnapNetPropertyString' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyStringFunctionLibrary_SetValue, Value) == 0x000030, "Member 'SnapNetPropertyStringFunctionLibrary_SetValue::Value' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyAngularVelocityToVector
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector final
{
public:
	struct FSnapNetPropertyAngularVelocity        SnapNetPropertyAngularVelocity;                    // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector) == 0x000050, "Wrong size on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector, SnapNetPropertyAngularVelocity) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector::SnapNetPropertyAngularVelocity' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector, ReturnValue) == 0x000038, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyAngularVelocityToVector::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyPositionToVector
// 0x0060 (0x0060 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector final
{
public:
	struct FSnapNetPropertyPosition               SnapNetPropertyPosition;                           // 0x0000(0x0048)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0048(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector) == 0x000060, "Wrong size on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector, SnapNetPropertyPosition) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector::SnapNetPropertyPosition' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector, ReturnValue) == 0x000048, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyPositionToVector::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyVectorToVector
// 0x0098 (0x0098 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector final
{
public:
	struct FSnapNetPropertyVector                 SnapNetPropertyVector;                             // 0x0000(0x0080)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0080(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector) == 0x000098, "Wrong size on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector, SnapNetPropertyVector) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector::SnapNetPropertyVector' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector, ReturnValue) == 0x000080, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVectorToVector::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.Conv_SnapNetPropertyVelocityToVector
// 0x0050 (0x0050 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector final
{
public:
	struct FSnapNetPropertyVelocity               SnapNetPropertyVelocity;                           // 0x0000(0x0038)(ConstParm, Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                ReturnValue;                                       // 0x0038(0x0018)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector) == 0x000050, "Wrong size on SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector, SnapNetPropertyVelocity) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector::SnapNetPropertyVelocity' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector, ReturnValue) == 0x000038, "Member 'SnapNetPropertyVectorFunctionLibrary_Conv_SnapNetPropertyVelocityToVector::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_AngularVelocity
// 0x0058 (0x0058 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity final
{
public:
	struct FSnapNetPropertyAngularVelocity        SnapNetPropertyAngularVelocity;                    // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity) == 0x000058, "Wrong size on SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity, SnapNetPropertyAngularVelocity) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity::SnapNetPropertyAngularVelocity' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity, Value) == 0x000038, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity, Interpolation) == 0x000050, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_AngularVelocity::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Position
// 0x0068 (0x0068 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_SetValue_Position final
{
public:
	struct FSnapNetPropertyPosition               SnapNetPropertyPosition;                           // 0x0000(0x0048)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0048(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0060(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_61[0x7];                                       // 0x0061(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_SetValue_Position) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_SetValue_Position");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_SetValue_Position) == 0x000068, "Wrong size on SnapNetPropertyVectorFunctionLibrary_SetValue_Position");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Position, SnapNetPropertyPosition) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Position::SnapNetPropertyPosition' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Position, Value) == 0x000048, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Position::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Position, Interpolation) == 0x000060, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Position::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Vector
// 0x00A0 (0x00A0 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_SetValue_Vector final
{
public:
	struct FSnapNetPropertyVector                 SnapNetPropertyVector;                             // 0x0000(0x0080)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0080(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0098(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_99[0x7];                                       // 0x0099(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_SetValue_Vector) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_SetValue_Vector");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_SetValue_Vector) == 0x0000A0, "Wrong size on SnapNetPropertyVectorFunctionLibrary_SetValue_Vector");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Vector, SnapNetPropertyVector) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Vector::SnapNetPropertyVector' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Vector, Value) == 0x000080, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Vector::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Vector, Interpolation) == 0x000098, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Vector::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetPropertyVectorFunctionLibrary.SetValue_Velocity
// 0x0058 (0x0058 - 0x0000)
struct SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity final
{
public:
	struct FSnapNetPropertyVelocity               SnapNetPropertyVelocity;                           // 0x0000(0x0038)(Parm, OutParm, ReferenceParm, NativeAccessSpecifierPublic)
	struct FVector                                Value;                                             // 0x0038(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	ESnapNetInterpolation                         Interpolation;                                     // 0x0050(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_51[0x7];                                       // 0x0051(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity) == 0x000008, "Wrong alignment on SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity");
static_assert(sizeof(SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity) == 0x000058, "Wrong size on SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity, SnapNetPropertyVelocity) == 0x000000, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity::SnapNetPropertyVelocity' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity, Value) == 0x000038, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity::Value' has a wrong offset!");
static_assert(offsetof(SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity, Interpolation) == 0x000050, "Member 'SnapNetPropertyVectorFunctionLibrary_SetValue_Velocity::Interpolation' has a wrong offset!");

// Function SnapNet.SnapNetReliableMessage.BlueprintOnReceivedFromClient
// 0x0004 (0x0004 - 0x0000)
struct SnapNetReliableMessage_BlueprintOnReceivedFromClient final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetReliableMessage_BlueprintOnReceivedFromClient) == 0x000004, "Wrong alignment on SnapNetReliableMessage_BlueprintOnReceivedFromClient");
static_assert(sizeof(SnapNetReliableMessage_BlueprintOnReceivedFromClient) == 0x000004, "Wrong size on SnapNetReliableMessage_BlueprintOnReceivedFromClient");
static_assert(offsetof(SnapNetReliableMessage_BlueprintOnReceivedFromClient, PlayerIndex) == 0x000000, "Member 'SnapNetReliableMessage_BlueprintOnReceivedFromClient::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetReliableMessage.BlueprintOnReceivedFromServer
// 0x0004 (0x0004 - 0x0000)
struct SnapNetReliableMessage_BlueprintOnReceivedFromServer final
{
public:
	int32                                         LocalPlayerIndex;                                  // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetReliableMessage_BlueprintOnReceivedFromServer) == 0x000004, "Wrong alignment on SnapNetReliableMessage_BlueprintOnReceivedFromServer");
static_assert(sizeof(SnapNetReliableMessage_BlueprintOnReceivedFromServer) == 0x000004, "Wrong size on SnapNetReliableMessage_BlueprintOnReceivedFromServer");
static_assert(offsetof(SnapNetReliableMessage_BlueprintOnReceivedFromServer, LocalPlayerIndex) == 0x000000, "Member 'SnapNetReliableMessage_BlueprintOnReceivedFromServer::LocalPlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.Get
// 0x0010 (0x0010 - 0x0000)
struct SnapNetServer_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetServer*                         ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_Get) == 0x000008, "Wrong alignment on SnapNetServer_Get");
static_assert(sizeof(SnapNetServer_Get) == 0x000010, "Wrong size on SnapNetServer_Get");
static_assert(offsetof(SnapNetServer_Get, WorldContextObject) == 0x000000, "Member 'SnapNetServer_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetServer_Get, ReturnValue) == 0x000008, "Member 'SnapNetServer_Get::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.RegisterString
// 0x0020 (0x0020 - 0x0000)
struct SnapNetServer_RegisterString final
{
public:
	class FName                                   StringPoolName;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_RegisterString) == 0x000008, "Wrong alignment on SnapNetServer_RegisterString");
static_assert(sizeof(SnapNetServer_RegisterString) == 0x000020, "Wrong size on SnapNetServer_RegisterString");
static_assert(offsetof(SnapNetServer_RegisterString, StringPoolName) == 0x000000, "Member 'SnapNetServer_RegisterString::StringPoolName' has a wrong offset!");
static_assert(offsetof(SnapNetServer_RegisterString, Value) == 0x000008, "Member 'SnapNetServer_RegisterString::Value' has a wrong offset!");
static_assert(offsetof(SnapNetServer_RegisterString, ReturnValue) == 0x000018, "Member 'SnapNetServer_RegisterString::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.RemovePlayer
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServer_RemovePlayer final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_RemovePlayer) == 0x000004, "Wrong alignment on SnapNetServer_RemovePlayer");
static_assert(sizeof(SnapNetServer_RemovePlayer) == 0x000004, "Wrong size on SnapNetServer_RemovePlayer");
static_assert(offsetof(SnapNetServer_RemovePlayer, PlayerIndex) == 0x000000, "Member 'SnapNetServer_RemovePlayer::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.SaveInstantReplay
// 0x000C (0x000C - 0x0000)
struct SnapNetServer_SaveInstantReplay final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SaveInstantReplay) == 0x000004, "Wrong alignment on SnapNetServer_SaveInstantReplay");
static_assert(sizeof(SnapNetServer_SaveInstantReplay) == 0x00000C, "Wrong size on SnapNetServer_SaveInstantReplay");
static_assert(offsetof(SnapNetServer_SaveInstantReplay, SlotIndex) == 0x000000, "Member 'SnapNetServer_SaveInstantReplay::SlotIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SaveInstantReplay, StartTime) == 0x000004, "Member 'SnapNetServer_SaveInstantReplay::StartTime' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SaveInstantReplay, EndTime) == 0x000008, "Member 'SnapNetServer_SaveInstantReplay::EndTime' has a wrong offset!");

// Function SnapNet.SnapNetServer.SaveReplayFile
// 0x0010 (0x0010 - 0x0000)
struct SnapNetServer_SaveReplayFile final
{
public:
	class FString                                 Filename;                                          // 0x0000(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SaveReplayFile) == 0x000008, "Wrong alignment on SnapNetServer_SaveReplayFile");
static_assert(sizeof(SnapNetServer_SaveReplayFile) == 0x000010, "Wrong size on SnapNetServer_SaveReplayFile");
static_assert(offsetof(SnapNetServer_SaveReplayFile, Filename) == 0x000000, "Member 'SnapNetServer_SaveReplayFile::Filename' has a wrong offset!");

// Function SnapNet.SnapNetServer.SendEntityToAllPlayers
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServer_SendEntityToAllPlayers final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SendEntityToAllPlayers) == 0x000004, "Wrong alignment on SnapNetServer_SendEntityToAllPlayers");
static_assert(sizeof(SnapNetServer_SendEntityToAllPlayers) == 0x000004, "Wrong size on SnapNetServer_SendEntityToAllPlayers");
static_assert(offsetof(SnapNetServer_SendEntityToAllPlayers, EntityIndex) == 0x000000, "Member 'SnapNetServer_SendEntityToAllPlayers::EntityIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.SendEntityToNoPlayers
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServer_SendEntityToNoPlayers final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SendEntityToNoPlayers) == 0x000004, "Wrong alignment on SnapNetServer_SendEntityToNoPlayers");
static_assert(sizeof(SnapNetServer_SendEntityToNoPlayers) == 0x000004, "Wrong size on SnapNetServer_SendEntityToNoPlayers");
static_assert(offsetof(SnapNetServer_SendEntityToNoPlayers, EntityIndex) == 0x000000, "Member 'SnapNetServer_SendEntityToNoPlayers::EntityIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.SendEntityToPlayer
// 0x000C (0x000C - 0x0000)
struct SnapNetServer_SendEntityToPlayer final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Send;                                              // 0x0008(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_SendEntityToPlayer) == 0x000004, "Wrong alignment on SnapNetServer_SendEntityToPlayer");
static_assert(sizeof(SnapNetServer_SendEntityToPlayer) == 0x00000C, "Wrong size on SnapNetServer_SendEntityToPlayer");
static_assert(offsetof(SnapNetServer_SendEntityToPlayer, EntityIndex) == 0x000000, "Member 'SnapNetServer_SendEntityToPlayer::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SendEntityToPlayer, PlayerIndex) == 0x000004, "Member 'SnapNetServer_SendEntityToPlayer::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SendEntityToPlayer, Send) == 0x000008, "Member 'SnapNetServer_SendEntityToPlayer::Send' has a wrong offset!");

// Function SnapNet.SnapNetServer.SendReliableMessage
// 0x0010 (0x0010 - 0x0000)
struct SnapNetServer_SendReliableMessage final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetReliableMessage*                Message;                                           // 0x0008(0x0008)(Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SendReliableMessage) == 0x000008, "Wrong alignment on SnapNetServer_SendReliableMessage");
static_assert(sizeof(SnapNetServer_SendReliableMessage) == 0x000010, "Wrong size on SnapNetServer_SendReliableMessage");
static_assert(offsetof(SnapNetServer_SendReliableMessage, PlayerIndex) == 0x000000, "Member 'SnapNetServer_SendReliableMessage::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SendReliableMessage, Message) == 0x000008, "Member 'SnapNetServer_SendReliableMessage::Message' has a wrong offset!");

// Function SnapNet.SnapNetServer.SetPacketCodecClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_SetPacketCodecClass final
{
public:
	TSubclassOf<class USnapNetPacketCodec>        PacketCodecClass;                                  // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SetPacketCodecClass) == 0x000008, "Wrong alignment on SnapNetServer_SetPacketCodecClass");
static_assert(sizeof(SnapNetServer_SetPacketCodecClass) == 0x000008, "Wrong size on SnapNetServer_SetPacketCodecClass");
static_assert(offsetof(SnapNetServer_SetPacketCodecClass, PacketCodecClass) == 0x000000, "Member 'SnapNetServer_SetPacketCodecClass::PacketCodecClass' has a wrong offset!");

// Function SnapNet.SnapNetServer.SetSpectatedPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_SetSpectatedPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatedPlayerIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SetSpectatedPlayerIndex) == 0x000004, "Wrong alignment on SnapNetServer_SetSpectatedPlayerIndex");
static_assert(sizeof(SnapNetServer_SetSpectatedPlayerIndex) == 0x000008, "Wrong size on SnapNetServer_SetSpectatedPlayerIndex");
static_assert(offsetof(SnapNetServer_SetSpectatedPlayerIndex, PlayerIndex) == 0x000000, "Member 'SnapNetServer_SetSpectatedPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_SetSpectatedPlayerIndex, SpectatedPlayerIndex) == 0x000004, "Member 'SnapNetServer_SetSpectatedPlayerIndex::SpectatedPlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.SetTransportClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_SetTransportClass final
{
public:
	TSubclassOf<class USnapNetTransport>          TransportClass;                                    // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_SetTransportClass) == 0x000008, "Wrong alignment on SnapNetServer_SetTransportClass");
static_assert(sizeof(SnapNetServer_SetTransportClass) == 0x000008, "Wrong size on SnapNetServer_SetTransportClass");
static_assert(offsetof(SnapNetServer_SetTransportClass, TransportClass) == 0x000000, "Member 'SnapNetServer_SetTransportClass::TransportClass' has a wrong offset!");

// Function SnapNet.SnapNetServer.StartInstantReplay
// 0x0014 (0x0014 - 0x0000)
struct SnapNetServer_StartInstantReplay final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatedPlayerIndex;                              // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContextEntityIndex;                                // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StartTime;                                         // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         EndTime;                                           // 0x0010(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_StartInstantReplay) == 0x000004, "Wrong alignment on SnapNetServer_StartInstantReplay");
static_assert(sizeof(SnapNetServer_StartInstantReplay) == 0x000014, "Wrong size on SnapNetServer_StartInstantReplay");
static_assert(offsetof(SnapNetServer_StartInstantReplay, ClientIndex) == 0x000000, "Member 'SnapNetServer_StartInstantReplay::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartInstantReplay, SpectatedPlayerIndex) == 0x000004, "Member 'SnapNetServer_StartInstantReplay::SpectatedPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartInstantReplay, ContextEntityIndex) == 0x000008, "Member 'SnapNetServer_StartInstantReplay::ContextEntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartInstantReplay, StartTime) == 0x00000C, "Member 'SnapNetServer_StartInstantReplay::StartTime' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartInstantReplay, EndTime) == 0x000010, "Member 'SnapNetServer_StartInstantReplay::EndTime' has a wrong offset!");

// Function SnapNet.SnapNetServer.StartSavedInstantReplay
// 0x0010 (0x0010 - 0x0000)
struct SnapNetServer_StartSavedInstantReplay final
{
public:
	int32                                         SlotIndex;                                         // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ClientIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         SpectatedPlayerIndex;                              // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ContextEntityIndex;                                // 0x000C(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_StartSavedInstantReplay) == 0x000004, "Wrong alignment on SnapNetServer_StartSavedInstantReplay");
static_assert(sizeof(SnapNetServer_StartSavedInstantReplay) == 0x000010, "Wrong size on SnapNetServer_StartSavedInstantReplay");
static_assert(offsetof(SnapNetServer_StartSavedInstantReplay, SlotIndex) == 0x000000, "Member 'SnapNetServer_StartSavedInstantReplay::SlotIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartSavedInstantReplay, ClientIndex) == 0x000004, "Member 'SnapNetServer_StartSavedInstantReplay::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartSavedInstantReplay, SpectatedPlayerIndex) == 0x000008, "Member 'SnapNetServer_StartSavedInstantReplay::SpectatedPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_StartSavedInstantReplay, ContextEntityIndex) == 0x00000C, "Member 'SnapNetServer_StartSavedInstantReplay::ContextEntityIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.StartServer
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_StartServer final
{
public:
	TSubclassOf<class USnapNetServerScript>       ServerScriptClass;                                 // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_StartServer) == 0x000008, "Wrong alignment on SnapNetServer_StartServer");
static_assert(sizeof(SnapNetServer_StartServer) == 0x000008, "Wrong size on SnapNetServer_StartServer");
static_assert(offsetof(SnapNetServer_StartServer, ServerScriptClass) == 0x000000, "Member 'SnapNetServer_StartServer::ServerScriptClass' has a wrong offset!");

// Function SnapNet.SnapNetServer.StopInstantReplay
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServer_StopInstantReplay final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_StopInstantReplay) == 0x000004, "Wrong alignment on SnapNetServer_StopInstantReplay");
static_assert(sizeof(SnapNetServer_StopInstantReplay) == 0x000004, "Wrong size on SnapNetServer_StopInstantReplay");
static_assert(offsetof(SnapNetServer_StopInstantReplay, ClientIndex) == 0x000000, "Member 'SnapNetServer_StopInstantReplay::ClientIndex' has a wrong offset!");

// Function SnapNet.SnapNetServer.DoesEntityRequireOwnerInput
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_DoesEntityRequireOwnerInput final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_DoesEntityRequireOwnerInput) == 0x000004, "Wrong alignment on SnapNetServer_DoesEntityRequireOwnerInput");
static_assert(sizeof(SnapNetServer_DoesEntityRequireOwnerInput) == 0x000008, "Wrong size on SnapNetServer_DoesEntityRequireOwnerInput");
static_assert(offsetof(SnapNetServer_DoesEntityRequireOwnerInput, EntityIndex) == 0x000000, "Member 'SnapNetServer_DoesEntityRequireOwnerInput::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_DoesEntityRequireOwnerInput, ReturnValue) == 0x000004, "Member 'SnapNetServer_DoesEntityRequireOwnerInput::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetClientIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetClientIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetClientIndex) == 0x000004, "Wrong alignment on SnapNetServer_GetClientIndex");
static_assert(sizeof(SnapNetServer_GetClientIndex) == 0x000008, "Wrong size on SnapNetServer_GetClientIndex");
static_assert(offsetof(SnapNetServer_GetClientIndex, PlayerIndex) == 0x000000, "Member 'SnapNetServer_GetClientIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetClientIndex, ReturnValue) == 0x000004, "Member 'SnapNetServer_GetClientIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetPacketCodec
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetPacketCodec final
{
public:
	class USnapNetPacketCodec*                    ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetPacketCodec) == 0x000008, "Wrong alignment on SnapNetServer_GetPacketCodec");
static_assert(sizeof(SnapNetServer_GetPacketCodec) == 0x000008, "Wrong size on SnapNetServer_GetPacketCodec");
static_assert(offsetof(SnapNetServer_GetPacketCodec, ReturnValue) == 0x000000, "Member 'SnapNetServer_GetPacketCodec::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetPacketLatencySeconds
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetPacketLatencySeconds final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetPacketLatencySeconds) == 0x000004, "Wrong alignment on SnapNetServer_GetPacketLatencySeconds");
static_assert(sizeof(SnapNetServer_GetPacketLatencySeconds) == 0x000008, "Wrong size on SnapNetServer_GetPacketLatencySeconds");
static_assert(offsetof(SnapNetServer_GetPacketLatencySeconds, ClientIndex) == 0x000000, "Member 'SnapNetServer_GetPacketLatencySeconds::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetPacketLatencySeconds, ReturnValue) == 0x000004, "Member 'SnapNetServer_GetPacketLatencySeconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetPlayerIndex
// 0x000C (0x000C - 0x0000)
struct SnapNetServer_GetPlayerIndex final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         LocalPlayerIndex;                                  // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetPlayerIndex) == 0x000004, "Wrong alignment on SnapNetServer_GetPlayerIndex");
static_assert(sizeof(SnapNetServer_GetPlayerIndex) == 0x00000C, "Wrong size on SnapNetServer_GetPlayerIndex");
static_assert(offsetof(SnapNetServer_GetPlayerIndex, ClientIndex) == 0x000000, "Member 'SnapNetServer_GetPlayerIndex::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetPlayerIndex, LocalPlayerIndex) == 0x000004, "Member 'SnapNetServer_GetPlayerIndex::LocalPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetPlayerIndex, ReturnValue) == 0x000008, "Member 'SnapNetServer_GetPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetPlayerInterpolationTimeMilliseconds
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetPlayerInterpolationTimeMilliseconds final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetPlayerInterpolationTimeMilliseconds) == 0x000004, "Wrong alignment on SnapNetServer_GetPlayerInterpolationTimeMilliseconds");
static_assert(sizeof(SnapNetServer_GetPlayerInterpolationTimeMilliseconds) == 0x000008, "Wrong size on SnapNetServer_GetPlayerInterpolationTimeMilliseconds");
static_assert(offsetof(SnapNetServer_GetPlayerInterpolationTimeMilliseconds, PlayerIndex) == 0x000000, "Member 'SnapNetServer_GetPlayerInterpolationTimeMilliseconds::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetPlayerInterpolationTimeMilliseconds, ReturnValue) == 0x000004, "Member 'SnapNetServer_GetPlayerInterpolationTimeMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetServerScript
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetServerScript final
{
public:
	class USnapNetServerScript*                   ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetServerScript) == 0x000008, "Wrong alignment on SnapNetServer_GetServerScript");
static_assert(sizeof(SnapNetServer_GetServerScript) == 0x000008, "Wrong size on SnapNetServer_GetServerScript");
static_assert(offsetof(SnapNetServer_GetServerScript, ReturnValue) == 0x000000, "Member 'SnapNetServer_GetServerScript::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetSimulation
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetSimulation final
{
public:
	class USnapNetSimulation*                     ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetSimulation) == 0x000008, "Wrong alignment on SnapNetServer_GetSimulation");
static_assert(sizeof(SnapNetServer_GetSimulation) == 0x000008, "Wrong size on SnapNetServer_GetSimulation");
static_assert(offsetof(SnapNetServer_GetSimulation, ReturnValue) == 0x000000, "Member 'SnapNetServer_GetSimulation::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetSpectatedPlayerIndex
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetSpectatedPlayerIndex final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetSpectatedPlayerIndex) == 0x000004, "Wrong alignment on SnapNetServer_GetSpectatedPlayerIndex");
static_assert(sizeof(SnapNetServer_GetSpectatedPlayerIndex) == 0x000008, "Wrong size on SnapNetServer_GetSpectatedPlayerIndex");
static_assert(offsetof(SnapNetServer_GetSpectatedPlayerIndex, PlayerIndex) == 0x000000, "Member 'SnapNetServer_GetSpectatedPlayerIndex::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_GetSpectatedPlayerIndex, ReturnValue) == 0x000004, "Member 'SnapNetServer_GetSpectatedPlayerIndex::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetTimeMilliseconds
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServer_GetTimeMilliseconds final
{
public:
	int32                                         ReturnValue;                                       // 0x0000(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetTimeMilliseconds) == 0x000004, "Wrong alignment on SnapNetServer_GetTimeMilliseconds");
static_assert(sizeof(SnapNetServer_GetTimeMilliseconds) == 0x000004, "Wrong size on SnapNetServer_GetTimeMilliseconds");
static_assert(offsetof(SnapNetServer_GetTimeMilliseconds, ReturnValue) == 0x000000, "Member 'SnapNetServer_GetTimeMilliseconds::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.GetTransport
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_GetTransport final
{
public:
	class USnapNetTransport*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_GetTransport) == 0x000008, "Wrong alignment on SnapNetServer_GetTransport");
static_assert(sizeof(SnapNetServer_GetTransport) == 0x000008, "Wrong size on SnapNetServer_GetTransport");
static_assert(offsetof(SnapNetServer_GetTransport, ReturnValue) == 0x000000, "Member 'SnapNetServer_GetTransport::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsBot
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_IsBot final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_IsBot) == 0x000004, "Wrong alignment on SnapNetServer_IsBot");
static_assert(sizeof(SnapNetServer_IsBot) == 0x000008, "Wrong size on SnapNetServer_IsBot");
static_assert(offsetof(SnapNetServer_IsBot, PlayerIndex) == 0x000000, "Member 'SnapNetServer_IsBot::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsBot, ReturnValue) == 0x000004, "Member 'SnapNetServer_IsBot::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsClientConnected
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_IsClientConnected final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_IsClientConnected) == 0x000004, "Wrong alignment on SnapNetServer_IsClientConnected");
static_assert(sizeof(SnapNetServer_IsClientConnected) == 0x000008, "Wrong size on SnapNetServer_IsClientConnected");
static_assert(offsetof(SnapNetServer_IsClientConnected, ClientIndex) == 0x000000, "Member 'SnapNetServer_IsClientConnected::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsClientConnected, ReturnValue) == 0x000004, "Member 'SnapNetServer_IsClientConnected::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsEntityPredictedForPlayer
// 0x000C (0x000C - 0x0000)
struct SnapNetServer_IsEntityPredictedForPlayer final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_IsEntityPredictedForPlayer) == 0x000004, "Wrong alignment on SnapNetServer_IsEntityPredictedForPlayer");
static_assert(sizeof(SnapNetServer_IsEntityPredictedForPlayer) == 0x00000C, "Wrong size on SnapNetServer_IsEntityPredictedForPlayer");
static_assert(offsetof(SnapNetServer_IsEntityPredictedForPlayer, EntityIndex) == 0x000000, "Member 'SnapNetServer_IsEntityPredictedForPlayer::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsEntityPredictedForPlayer, PlayerIndex) == 0x000004, "Member 'SnapNetServer_IsEntityPredictedForPlayer::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsEntityPredictedForPlayer, ReturnValue) == 0x000008, "Member 'SnapNetServer_IsEntityPredictedForPlayer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsEntitySentToPlayer
// 0x000C (0x000C - 0x0000)
struct SnapNetServer_IsEntitySentToPlayer final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         PlayerIndex;                                       // 0x0004(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x3];                                        // 0x0009(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_IsEntitySentToPlayer) == 0x000004, "Wrong alignment on SnapNetServer_IsEntitySentToPlayer");
static_assert(sizeof(SnapNetServer_IsEntitySentToPlayer) == 0x00000C, "Wrong size on SnapNetServer_IsEntitySentToPlayer");
static_assert(offsetof(SnapNetServer_IsEntitySentToPlayer, EntityIndex) == 0x000000, "Member 'SnapNetServer_IsEntitySentToPlayer::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsEntitySentToPlayer, PlayerIndex) == 0x000004, "Member 'SnapNetServer_IsEntitySentToPlayer::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsEntitySentToPlayer, ReturnValue) == 0x000008, "Member 'SnapNetServer_IsEntitySentToPlayer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsPlayingInstantReplay
// 0x0008 (0x0008 - 0x0000)
struct SnapNetServer_IsPlayingInstantReplay final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0004(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_5[0x3];                                        // 0x0005(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetServer_IsPlayingInstantReplay) == 0x000004, "Wrong alignment on SnapNetServer_IsPlayingInstantReplay");
static_assert(sizeof(SnapNetServer_IsPlayingInstantReplay) == 0x000008, "Wrong size on SnapNetServer_IsPlayingInstantReplay");
static_assert(offsetof(SnapNetServer_IsPlayingInstantReplay, ClientIndex) == 0x000000, "Member 'SnapNetServer_IsPlayingInstantReplay::ClientIndex' has a wrong offset!");
static_assert(offsetof(SnapNetServer_IsPlayingInstantReplay, ReturnValue) == 0x000004, "Member 'SnapNetServer_IsPlayingInstantReplay::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsRewinding
// 0x0001 (0x0001 - 0x0000)
struct SnapNetServer_IsRewinding final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_IsRewinding) == 0x000001, "Wrong alignment on SnapNetServer_IsRewinding");
static_assert(sizeof(SnapNetServer_IsRewinding) == 0x000001, "Wrong size on SnapNetServer_IsRewinding");
static_assert(offsetof(SnapNetServer_IsRewinding, ReturnValue) == 0x000000, "Member 'SnapNetServer_IsRewinding::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServer.IsRunning
// 0x0001 (0x0001 - 0x0000)
struct SnapNetServer_IsRunning final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServer_IsRunning) == 0x000001, "Wrong alignment on SnapNetServer_IsRunning");
static_assert(sizeof(SnapNetServer_IsRunning) == 0x000001, "Wrong size on SnapNetServer_IsRunning");
static_assert(offsetof(SnapNetServer_IsRunning, ReturnValue) == 0x000000, "Member 'SnapNetServer_IsRunning::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.Get
// 0x0010 (0x0010 - 0x0000)
struct SnapNetServerScript_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetServerScript*                   ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_Get) == 0x000008, "Wrong alignment on SnapNetServerScript_Get");
static_assert(sizeof(SnapNetServerScript_Get) == 0x000010, "Wrong size on SnapNetServerScript_Get");
static_assert(offsetof(SnapNetServerScript_Get, WorldContextObject) == 0x000000, "Member 'SnapNetServerScript_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetServerScript_Get, ReturnValue) == 0x000008, "Member 'SnapNetServerScript_Get::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.BlueprintClientConnected
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServerScript_BlueprintClientConnected final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_BlueprintClientConnected) == 0x000004, "Wrong alignment on SnapNetServerScript_BlueprintClientConnected");
static_assert(sizeof(SnapNetServerScript_BlueprintClientConnected) == 0x000004, "Wrong size on SnapNetServerScript_BlueprintClientConnected");
static_assert(offsetof(SnapNetServerScript_BlueprintClientConnected, ClientIndex) == 0x000000, "Member 'SnapNetServerScript_BlueprintClientConnected::ClientIndex' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.BlueprintClientDisconnected
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServerScript_BlueprintClientDisconnected final
{
public:
	int32                                         ClientIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_BlueprintClientDisconnected) == 0x000004, "Wrong alignment on SnapNetServerScript_BlueprintClientDisconnected");
static_assert(sizeof(SnapNetServerScript_BlueprintClientDisconnected) == 0x000004, "Wrong size on SnapNetServerScript_BlueprintClientDisconnected");
static_assert(offsetof(SnapNetServerScript_BlueprintClientDisconnected, ClientIndex) == 0x000000, "Member 'SnapNetServerScript_BlueprintClientDisconnected::ClientIndex' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.BlueprintPlayerJoined
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServerScript_BlueprintPlayerJoined final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_BlueprintPlayerJoined) == 0x000004, "Wrong alignment on SnapNetServerScript_BlueprintPlayerJoined");
static_assert(sizeof(SnapNetServerScript_BlueprintPlayerJoined) == 0x000004, "Wrong size on SnapNetServerScript_BlueprintPlayerJoined");
static_assert(offsetof(SnapNetServerScript_BlueprintPlayerJoined, PlayerIndex) == 0x000000, "Member 'SnapNetServerScript_BlueprintPlayerJoined::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.BlueprintPlayerRemoved
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServerScript_BlueprintPlayerRemoved final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_BlueprintPlayerRemoved) == 0x000004, "Wrong alignment on SnapNetServerScript_BlueprintPlayerRemoved");
static_assert(sizeof(SnapNetServerScript_BlueprintPlayerRemoved) == 0x000004, "Wrong size on SnapNetServerScript_BlueprintPlayerRemoved");
static_assert(offsetof(SnapNetServerScript_BlueprintPlayerRemoved, PlayerIndex) == 0x000000, "Member 'SnapNetServerScript_BlueprintPlayerRemoved::PlayerIndex' has a wrong offset!");

// Function SnapNet.SnapNetServerScript.BlueprintTick
// 0x0004 (0x0004 - 0x0000)
struct SnapNetServerScript_BlueprintTick final
{
public:
	float                                         DeltaSeconds;                                      // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetServerScript_BlueprintTick) == 0x000004, "Wrong alignment on SnapNetServerScript_BlueprintTick");
static_assert(sizeof(SnapNetServerScript_BlueprintTick) == 0x000004, "Wrong size on SnapNetServerScript_BlueprintTick");
static_assert(offsetof(SnapNetServerScript_BlueprintTick, DeltaSeconds) == 0x000000, "Member 'SnapNetServerScript_BlueprintTick::DeltaSeconds' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.Get
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetSimulation*                     ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_Get) == 0x000008, "Wrong alignment on SnapNetSimulation_Get");
static_assert(sizeof(SnapNetSimulation_Get) == 0x000010, "Wrong size on SnapNetSimulation_Get");
static_assert(offsetof(SnapNetSimulation_Get, WorldContextObject) == 0x000000, "Member 'SnapNetSimulation_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_Get, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_Get::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.DestroyEntity
// 0x0004 (0x0004 - 0x0000)
struct SnapNetSimulation_DestroyEntity final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_DestroyEntity) == 0x000004, "Wrong alignment on SnapNetSimulation_DestroyEntity");
static_assert(sizeof(SnapNetSimulation_DestroyEntity) == 0x000004, "Wrong size on SnapNetSimulation_DestroyEntity");
static_assert(offsetof(SnapNetSimulation_DestroyEntity, EntityIndex) == 0x000000, "Member 'SnapNetSimulation_DestroyEntity::EntityIndex' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.RequestEntityRendererUpdate
// 0x0004 (0x0004 - 0x0000)
struct SnapNetSimulation_RequestEntityRendererUpdate final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_RequestEntityRendererUpdate) == 0x000004, "Wrong alignment on SnapNetSimulation_RequestEntityRendererUpdate");
static_assert(sizeof(SnapNetSimulation_RequestEntityRendererUpdate) == 0x000004, "Wrong size on SnapNetSimulation_RequestEntityRendererUpdate");
static_assert(offsetof(SnapNetSimulation_RequestEntityRendererUpdate, EntityIndex) == 0x000000, "Member 'SnapNetSimulation_RequestEntityRendererUpdate::EntityIndex' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.SpawnEntity
// 0x0018 (0x0018 - 0x0000)
struct SnapNetSimulation_SpawnEntity final
{
public:
	TSubclassOf<class AActor>                     EntityClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         OwnerPlayerIndex;                                  // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_SpawnEntity) == 0x000008, "Wrong alignment on SnapNetSimulation_SpawnEntity");
static_assert(sizeof(SnapNetSimulation_SpawnEntity) == 0x000018, "Wrong size on SnapNetSimulation_SpawnEntity");
static_assert(offsetof(SnapNetSimulation_SpawnEntity, EntityClass) == 0x000000, "Member 'SnapNetSimulation_SpawnEntity::EntityClass' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_SpawnEntity, OwnerPlayerIndex) == 0x000008, "Member 'SnapNetSimulation_SpawnEntity::OwnerPlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_SpawnEntity, ReturnValue) == 0x000010, "Member 'SnapNetSimulation_SpawnEntity::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.SpawnEvent
// 0x0018 (0x0018 - 0x0000)
struct SnapNetSimulation_SpawnEvent final
{
public:
	TSubclassOf<class USnapNetEvent>              EventClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	const class USnapNetEntityComponent*          EntityComponent;                                   // 0x0008(0x0008)(ConstParm, Parm, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetEvent*                          ReturnValue;                                       // 0x0010(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_SpawnEvent) == 0x000008, "Wrong alignment on SnapNetSimulation_SpawnEvent");
static_assert(sizeof(SnapNetSimulation_SpawnEvent) == 0x000018, "Wrong size on SnapNetSimulation_SpawnEvent");
static_assert(offsetof(SnapNetSimulation_SpawnEvent, EventClass) == 0x000000, "Member 'SnapNetSimulation_SpawnEvent::EventClass' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_SpawnEvent, EntityComponent) == 0x000008, "Member 'SnapNetSimulation_SpawnEvent::EntityComponent' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_SpawnEvent, ReturnValue) == 0x000010, "Member 'SnapNetSimulation_SpawnEvent::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.FindString
// 0x0020 (0x0020 - 0x0000)
struct SnapNetSimulation_FindString final
{
public:
	class FName                                   StringPoolName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FString                                 Value;                                             // 0x0008(0x0010)(Parm, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0018(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1C[0x4];                                       // 0x001C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSimulation_FindString) == 0x000008, "Wrong alignment on SnapNetSimulation_FindString");
static_assert(sizeof(SnapNetSimulation_FindString) == 0x000020, "Wrong size on SnapNetSimulation_FindString");
static_assert(offsetof(SnapNetSimulation_FindString, StringPoolName) == 0x000000, "Member 'SnapNetSimulation_FindString::StringPoolName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_FindString, Value) == 0x000008, "Member 'SnapNetSimulation_FindString::Value' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_FindString, ReturnValue) == 0x000018, "Member 'SnapNetSimulation_FindString::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetClient
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSimulation_GetClient final
{
public:
	class USnapNetClient*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetClient) == 0x000008, "Wrong alignment on SnapNetSimulation_GetClient");
static_assert(sizeof(SnapNetSimulation_GetClient) == 0x000008, "Wrong size on SnapNetSimulation_GetClient");
static_assert(offsetof(SnapNetSimulation_GetClient, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_GetClient::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetControlRotation
// 0x0020 (0x0020 - 0x0000)
struct SnapNetSimulation_GetControlRotation final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRotator                               ReturnValue;                                       // 0x0008(0x0018)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, ReferenceParm, IsPlainOldData, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetControlRotation) == 0x000008, "Wrong alignment on SnapNetSimulation_GetControlRotation");
static_assert(sizeof(SnapNetSimulation_GetControlRotation) == 0x000020, "Wrong size on SnapNetSimulation_GetControlRotation");
static_assert(offsetof(SnapNetSimulation_GetControlRotation, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetControlRotation::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetControlRotation, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetControlRotation::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetCustomInput
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetCustomInput final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USnapNetCustomInput*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetCustomInput) == 0x000008, "Wrong alignment on SnapNetSimulation_GetCustomInput");
static_assert(sizeof(SnapNetSimulation_GetCustomInput) == 0x000010, "Wrong size on SnapNetSimulation_GetCustomInput");
static_assert(offsetof(SnapNetSimulation_GetCustomInput, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetCustomInput::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetCustomInput, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetCustomInput::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetEntity
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetEntity final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetEntity) == 0x000008, "Wrong alignment on SnapNetSimulation_GetEntity");
static_assert(sizeof(SnapNetSimulation_GetEntity) == 0x000010, "Wrong size on SnapNetSimulation_GetEntity");
static_assert(offsetof(SnapNetSimulation_GetEntity, EntityIndex) == 0x000000, "Member 'SnapNetSimulation_GetEntity::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetEntity, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetEntity::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetEntityComponent
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetEntityComponent final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetEntityComponent*                ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetEntityComponent) == 0x000008, "Wrong alignment on SnapNetSimulation_GetEntityComponent");
static_assert(sizeof(SnapNetSimulation_GetEntityComponent) == 0x000010, "Wrong size on SnapNetSimulation_GetEntityComponent");
static_assert(offsetof(SnapNetSimulation_GetEntityComponent, EntityIndex) == 0x000000, "Member 'SnapNetSimulation_GetEntityComponent::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetEntityComponent, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetEntityComponent::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetEntityRenderer
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetEntityRenderer final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetEntityRendererComponent*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetEntityRenderer) == 0x000008, "Wrong alignment on SnapNetSimulation_GetEntityRenderer");
static_assert(sizeof(SnapNetSimulation_GetEntityRenderer) == 0x000010, "Wrong size on SnapNetSimulation_GetEntityRenderer");
static_assert(offsetof(SnapNetSimulation_GetEntityRenderer, EntityIndex) == 0x000000, "Member 'SnapNetSimulation_GetEntityRenderer::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetEntityRenderer, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetEntityRenderer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetFrameType
// 0x0001 (0x0001 - 0x0000)
struct SnapNetSimulation_GetFrameType final
{
public:
	ESnapNetSimulationFrameType                   ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetFrameType) == 0x000001, "Wrong alignment on SnapNetSimulation_GetFrameType");
static_assert(sizeof(SnapNetSimulation_GetFrameType) == 0x000001, "Wrong size on SnapNetSimulation_GetFrameType");
static_assert(offsetof(SnapNetSimulation_GetFrameType, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_GetFrameType::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetInputAge
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSimulation_GetInputAge final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0004(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetInputAge) == 0x000004, "Wrong alignment on SnapNetSimulation_GetInputAge");
static_assert(sizeof(SnapNetSimulation_GetInputAge) == 0x000008, "Wrong size on SnapNetSimulation_GetInputAge");
static_assert(offsetof(SnapNetSimulation_GetInputAge, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetInputAge::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetInputAge, ReturnValue) == 0x000004, "Member 'SnapNetSimulation_GetInputAge::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetInputAxis
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetInputAxis final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetInputAxis) == 0x000004, "Wrong alignment on SnapNetSimulation_GetInputAxis");
static_assert(sizeof(SnapNetSimulation_GetInputAxis) == 0x000010, "Wrong size on SnapNetSimulation_GetInputAxis");
static_assert(offsetof(SnapNetSimulation_GetInputAxis, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetInputAxis::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetInputAxis, AxisName) == 0x000004, "Member 'SnapNetSimulation_GetInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetInputAxis, ReturnValue) == 0x00000C, "Member 'SnapNetSimulation_GetInputAxis::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetPreviousCustomInput
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetPreviousCustomInput final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	const class USnapNetCustomInput*              ReturnValue;                                       // 0x0008(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetPreviousCustomInput) == 0x000008, "Wrong alignment on SnapNetSimulation_GetPreviousCustomInput");
static_assert(sizeof(SnapNetSimulation_GetPreviousCustomInput) == 0x000010, "Wrong size on SnapNetSimulation_GetPreviousCustomInput");
static_assert(offsetof(SnapNetSimulation_GetPreviousCustomInput, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetPreviousCustomInput::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetPreviousCustomInput, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetPreviousCustomInput::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetPreviousInputAxis
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_GetPreviousInputAxis final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   AxisName;                                          // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ReturnValue;                                       // 0x000C(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetPreviousInputAxis) == 0x000004, "Wrong alignment on SnapNetSimulation_GetPreviousInputAxis");
static_assert(sizeof(SnapNetSimulation_GetPreviousInputAxis) == 0x000010, "Wrong size on SnapNetSimulation_GetPreviousInputAxis");
static_assert(offsetof(SnapNetSimulation_GetPreviousInputAxis, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_GetPreviousInputAxis::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetPreviousInputAxis, AxisName) == 0x000004, "Member 'SnapNetSimulation_GetPreviousInputAxis::AxisName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetPreviousInputAxis, ReturnValue) == 0x00000C, "Member 'SnapNetSimulation_GetPreviousInputAxis::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetServer
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSimulation_GetServer final
{
public:
	class USnapNetServer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetServer) == 0x000008, "Wrong alignment on SnapNetSimulation_GetServer");
static_assert(sizeof(SnapNetSimulation_GetServer) == 0x000008, "Wrong size on SnapNetSimulation_GetServer");
static_assert(offsetof(SnapNetSimulation_GetServer, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_GetServer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetString
// 0x0020 (0x0020 - 0x0000)
struct SnapNetSimulation_GetString final
{
public:
	class FName                                   StringPoolName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         StringIndex;                                       // 0x0008(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_C[0x4];                                        // 0x000C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class FString                                 ReturnValue;                                       // 0x0010(0x0010)(Parm, OutParm, ZeroConstructor, ReturnParm, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetString) == 0x000008, "Wrong alignment on SnapNetSimulation_GetString");
static_assert(sizeof(SnapNetSimulation_GetString) == 0x000020, "Wrong size on SnapNetSimulation_GetString");
static_assert(offsetof(SnapNetSimulation_GetString, StringPoolName) == 0x000000, "Member 'SnapNetSimulation_GetString::StringPoolName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetString, StringIndex) == 0x000008, "Member 'SnapNetSimulation_GetString::StringIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetString, ReturnValue) == 0x000010, "Member 'SnapNetSimulation_GetString::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetStringCount
// 0x000C (0x000C - 0x0000)
struct SnapNetSimulation_GetStringCount final
{
public:
	class FName                                   StringPoolName;                                    // 0x0000(0x0008)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	int32                                         ReturnValue;                                       // 0x0008(0x0004)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetStringCount) == 0x000004, "Wrong alignment on SnapNetSimulation_GetStringCount");
static_assert(sizeof(SnapNetSimulation_GetStringCount) == 0x00000C, "Wrong size on SnapNetSimulation_GetStringCount");
static_assert(offsetof(SnapNetSimulation_GetStringCount, StringPoolName) == 0x000000, "Member 'SnapNetSimulation_GetStringCount::StringPoolName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_GetStringCount, ReturnValue) == 0x000008, "Member 'SnapNetSimulation_GetStringCount::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.GetSubsystem
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSimulation_GetSubsystem final
{
public:
	class USnapNetSubsystem*                      ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_GetSubsystem) == 0x000008, "Wrong alignment on SnapNetSimulation_GetSubsystem");
static_assert(sizeof(SnapNetSimulation_GetSubsystem) == 0x000008, "Wrong size on SnapNetSimulation_GetSubsystem");
static_assert(offsetof(SnapNetSimulation_GetSubsystem, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_GetSubsystem::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.IsClient
// 0x0001 (0x0001 - 0x0000)
struct SnapNetSimulation_IsClient final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_IsClient) == 0x000001, "Wrong alignment on SnapNetSimulation_IsClient");
static_assert(sizeof(SnapNetSimulation_IsClient) == 0x000001, "Wrong size on SnapNetSimulation_IsClient");
static_assert(offsetof(SnapNetSimulation_IsClient, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_IsClient::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.IsInputActionDown
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_IsInputActionDown final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSimulation_IsInputActionDown) == 0x000004, "Wrong alignment on SnapNetSimulation_IsInputActionDown");
static_assert(sizeof(SnapNetSimulation_IsInputActionDown) == 0x000010, "Wrong size on SnapNetSimulation_IsInputActionDown");
static_assert(offsetof(SnapNetSimulation_IsInputActionDown, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_IsInputActionDown::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_IsInputActionDown, ActionName) == 0x000004, "Member 'SnapNetSimulation_IsInputActionDown::ActionName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_IsInputActionDown, ReturnValue) == 0x00000C, "Member 'SnapNetSimulation_IsInputActionDown::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.IsServer
// 0x0001 (0x0001 - 0x0000)
struct SnapNetSimulation_IsServer final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSimulation_IsServer) == 0x000001, "Wrong alignment on SnapNetSimulation_IsServer");
static_assert(sizeof(SnapNetSimulation_IsServer) == 0x000001, "Wrong size on SnapNetSimulation_IsServer");
static_assert(offsetof(SnapNetSimulation_IsServer, ReturnValue) == 0x000000, "Member 'SnapNetSimulation_IsServer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.WasInputActionPressed
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_WasInputActionPressed final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSimulation_WasInputActionPressed) == 0x000004, "Wrong alignment on SnapNetSimulation_WasInputActionPressed");
static_assert(sizeof(SnapNetSimulation_WasInputActionPressed) == 0x000010, "Wrong size on SnapNetSimulation_WasInputActionPressed");
static_assert(offsetof(SnapNetSimulation_WasInputActionPressed, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_WasInputActionPressed::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_WasInputActionPressed, ActionName) == 0x000004, "Member 'SnapNetSimulation_WasInputActionPressed::ActionName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_WasInputActionPressed, ReturnValue) == 0x00000C, "Member 'SnapNetSimulation_WasInputActionPressed::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSimulation.WasInputActionReleased
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSimulation_WasInputActionReleased final
{
public:
	int32                                         PlayerIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class FName                                   ActionName;                                        // 0x0004(0x0008)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x000C(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_D[0x3];                                        // 0x000D(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSimulation_WasInputActionReleased) == 0x000004, "Wrong alignment on SnapNetSimulation_WasInputActionReleased");
static_assert(sizeof(SnapNetSimulation_WasInputActionReleased) == 0x000010, "Wrong size on SnapNetSimulation_WasInputActionReleased");
static_assert(offsetof(SnapNetSimulation_WasInputActionReleased, PlayerIndex) == 0x000000, "Member 'SnapNetSimulation_WasInputActionReleased::PlayerIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_WasInputActionReleased, ActionName) == 0x000004, "Member 'SnapNetSimulation_WasInputActionReleased::ActionName' has a wrong offset!");
static_assert(offsetof(SnapNetSimulation_WasInputActionReleased, ReturnValue) == 0x00000C, "Member 'SnapNetSimulation_WasInputActionReleased::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.Get
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_Get final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	class USnapNetSubsystem*                      ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_Get) == 0x000008, "Wrong alignment on SnapNetSubsystem_Get");
static_assert(sizeof(SnapNetSubsystem_Get) == 0x000010, "Wrong size on SnapNetSubsystem_Get");
static_assert(offsetof(SnapNetSubsystem_Get, WorldContextObject) == 0x000000, "Member 'SnapNetSubsystem_Get::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetSubsystem_Get, ReturnValue) == 0x000008, "Member 'SnapNetSubsystem_Get::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.IsSnapNetClient
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_IsSnapNetClient final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSubsystem_IsSnapNetClient) == 0x000008, "Wrong alignment on SnapNetSubsystem_IsSnapNetClient");
static_assert(sizeof(SnapNetSubsystem_IsSnapNetClient) == 0x000010, "Wrong size on SnapNetSubsystem_IsSnapNetClient");
static_assert(offsetof(SnapNetSubsystem_IsSnapNetClient, WorldContextObject) == 0x000000, "Member 'SnapNetSubsystem_IsSnapNetClient::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetSubsystem_IsSnapNetClient, ReturnValue) == 0x000008, "Member 'SnapNetSubsystem_IsSnapNetClient::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.IsSnapNetServer
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_IsSnapNetServer final
{
public:
	const class UObject*                          WorldContextObject;                                // 0x0000(0x0008)(ConstParm, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          ReturnValue;                                       // 0x0008(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_9[0x7];                                        // 0x0009(0x0007)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(SnapNetSubsystem_IsSnapNetServer) == 0x000008, "Wrong alignment on SnapNetSubsystem_IsSnapNetServer");
static_assert(sizeof(SnapNetSubsystem_IsSnapNetServer) == 0x000010, "Wrong size on SnapNetSubsystem_IsSnapNetServer");
static_assert(offsetof(SnapNetSubsystem_IsSnapNetServer, WorldContextObject) == 0x000000, "Member 'SnapNetSubsystem_IsSnapNetServer::WorldContextObject' has a wrong offset!");
static_assert(offsetof(SnapNetSubsystem_IsSnapNetServer, ReturnValue) == 0x000008, "Member 'SnapNetSubsystem_IsSnapNetServer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterEntityClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_RegisterEntityClass final
{
public:
	TSubclassOf<class AActor>                     EntityClass;                                       // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterEntityClass) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterEntityClass");
static_assert(sizeof(SnapNetSubsystem_RegisterEntityClass) == 0x000008, "Wrong size on SnapNetSubsystem_RegisterEntityClass");
static_assert(offsetof(SnapNetSubsystem_RegisterEntityClass, EntityClass) == 0x000000, "Member 'SnapNetSubsystem_RegisterEntityClass::EntityClass' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterEntityClasses
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_RegisterEntityClasses final
{
public:
	TArray<TSubclassOf<class AActor>>             EntityClasses;                                     // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterEntityClasses) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterEntityClasses");
static_assert(sizeof(SnapNetSubsystem_RegisterEntityClasses) == 0x000010, "Wrong size on SnapNetSubsystem_RegisterEntityClasses");
static_assert(offsetof(SnapNetSubsystem_RegisterEntityClasses, EntityClasses) == 0x000000, "Member 'SnapNetSubsystem_RegisterEntityClasses::EntityClasses' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterEventClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_RegisterEventClass final
{
public:
	TSubclassOf<class USnapNetEvent>              EventClass;                                        // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterEventClass) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterEventClass");
static_assert(sizeof(SnapNetSubsystem_RegisterEventClass) == 0x000008, "Wrong size on SnapNetSubsystem_RegisterEventClass");
static_assert(offsetof(SnapNetSubsystem_RegisterEventClass, EventClass) == 0x000000, "Member 'SnapNetSubsystem_RegisterEventClass::EventClass' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterEventClasses
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_RegisterEventClasses final
{
public:
	TArray<TSubclassOf<class USnapNetEvent>>      EventClasses;                                      // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterEventClasses) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterEventClasses");
static_assert(sizeof(SnapNetSubsystem_RegisterEventClasses) == 0x000010, "Wrong size on SnapNetSubsystem_RegisterEventClasses");
static_assert(offsetof(SnapNetSubsystem_RegisterEventClasses, EventClasses) == 0x000000, "Member 'SnapNetSubsystem_RegisterEventClasses::EventClasses' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterMap
// 0x0028 (0x0028 - 0x0000)
struct SnapNetSubsystem_RegisterMap final
{
public:
	TSoftObjectPtr<class UWorld>                  Map;                                               // 0x0000(0x0028)(Parm, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterMap) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterMap");
static_assert(sizeof(SnapNetSubsystem_RegisterMap) == 0x000028, "Wrong size on SnapNetSubsystem_RegisterMap");
static_assert(offsetof(SnapNetSubsystem_RegisterMap, Map) == 0x000000, "Member 'SnapNetSubsystem_RegisterMap::Map' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterMaps
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_RegisterMaps final
{
public:
	TArray<TSoftObjectPtr<class UWorld>>          Maps;                                              // 0x0000(0x0010)(Parm, ZeroConstructor, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterMaps) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterMaps");
static_assert(sizeof(SnapNetSubsystem_RegisterMaps) == 0x000010, "Wrong size on SnapNetSubsystem_RegisterMaps");
static_assert(offsetof(SnapNetSubsystem_RegisterMaps, Maps) == 0x000000, "Member 'SnapNetSubsystem_RegisterMaps::Maps' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterReliableMessageClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_RegisterReliableMessageClass final
{
public:
	TSubclassOf<class USnapNetReliableMessage>    ReliableMessageClass;                              // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterReliableMessageClass) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterReliableMessageClass");
static_assert(sizeof(SnapNetSubsystem_RegisterReliableMessageClass) == 0x000008, "Wrong size on SnapNetSubsystem_RegisterReliableMessageClass");
static_assert(offsetof(SnapNetSubsystem_RegisterReliableMessageClass, ReliableMessageClass) == 0x000000, "Member 'SnapNetSubsystem_RegisterReliableMessageClass::ReliableMessageClass' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterReliableMessageClasses
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_RegisterReliableMessageClasses final
{
public:
	TArray<TSubclassOf<class USnapNetReliableMessage>> ReliableMessageClasses;                            // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, UObjectWrapper, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterReliableMessageClasses) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterReliableMessageClasses");
static_assert(sizeof(SnapNetSubsystem_RegisterReliableMessageClasses) == 0x000010, "Wrong size on SnapNetSubsystem_RegisterReliableMessageClasses");
static_assert(offsetof(SnapNetSubsystem_RegisterReliableMessageClasses, ReliableMessageClasses) == 0x000000, "Member 'SnapNetSubsystem_RegisterReliableMessageClasses::ReliableMessageClasses' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterStringPool
// 0x000C (0x000C - 0x0000)
struct SnapNetSubsystem_RegisterStringPool final
{
public:
	struct FSnapNetStringPool                     StringPool;                                        // 0x0000(0x000C)(ConstParm, Parm, OutParm, ReferenceParm, NoDestructor, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterStringPool) == 0x000004, "Wrong alignment on SnapNetSubsystem_RegisterStringPool");
static_assert(sizeof(SnapNetSubsystem_RegisterStringPool) == 0x00000C, "Wrong size on SnapNetSubsystem_RegisterStringPool");
static_assert(offsetof(SnapNetSubsystem_RegisterStringPool, StringPool) == 0x000000, "Member 'SnapNetSubsystem_RegisterStringPool::StringPool' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.RegisterStringPools
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_RegisterStringPools final
{
public:
	TArray<struct FSnapNetStringPool>             StringPools;                                       // 0x0000(0x0010)(ConstParm, Parm, OutParm, ZeroConstructor, ReferenceParm, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_RegisterStringPools) == 0x000008, "Wrong alignment on SnapNetSubsystem_RegisterStringPools");
static_assert(sizeof(SnapNetSubsystem_RegisterStringPools) == 0x000010, "Wrong size on SnapNetSubsystem_RegisterStringPools");
static_assert(offsetof(SnapNetSubsystem_RegisterStringPools, StringPools) == 0x000000, "Member 'SnapNetSubsystem_RegisterStringPools::StringPools' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.SetPlayerJoinRequestClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_SetPlayerJoinRequestClass final
{
public:
	TSubclassOf<class USnapNetPlayerJoinRequest>  PlayerJoinRequestClass_0;                          // 0x0000(0x0008)(Parm, ZeroConstructor, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_SetPlayerJoinRequestClass) == 0x000008, "Wrong alignment on SnapNetSubsystem_SetPlayerJoinRequestClass");
static_assert(sizeof(SnapNetSubsystem_SetPlayerJoinRequestClass) == 0x000008, "Wrong size on SnapNetSubsystem_SetPlayerJoinRequestClass");
static_assert(offsetof(SnapNetSubsystem_SetPlayerJoinRequestClass, PlayerJoinRequestClass_0) == 0x000000, "Member 'SnapNetSubsystem_SetPlayerJoinRequestClass::PlayerJoinRequestClass_0' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.SetSingleFrameAdvanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SnapNetSubsystem_SetSingleFrameAdvanceEnabled final
{
public:
	bool                                          Enabled;                                           // 0x0000(0x0001)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_SetSingleFrameAdvanceEnabled) == 0x000001, "Wrong alignment on SnapNetSubsystem_SetSingleFrameAdvanceEnabled");
static_assert(sizeof(SnapNetSubsystem_SetSingleFrameAdvanceEnabled) == 0x000001, "Wrong size on SnapNetSubsystem_SetSingleFrameAdvanceEnabled");
static_assert(offsetof(SnapNetSubsystem_SetSingleFrameAdvanceEnabled, Enabled) == 0x000000, "Member 'SnapNetSubsystem_SetSingleFrameAdvanceEnabled::Enabled' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.GetClient
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_GetClient final
{
public:
	class USnapNetClient*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_GetClient) == 0x000008, "Wrong alignment on SnapNetSubsystem_GetClient");
static_assert(sizeof(SnapNetSubsystem_GetClient) == 0x000008, "Wrong size on SnapNetSubsystem_GetClient");
static_assert(offsetof(SnapNetSubsystem_GetClient, ReturnValue) == 0x000000, "Member 'SnapNetSubsystem_GetClient::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.GetEntityRenderer
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_GetEntityRenderer final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class AActor*                                 ReturnValue;                                       // 0x0008(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_GetEntityRenderer) == 0x000008, "Wrong alignment on SnapNetSubsystem_GetEntityRenderer");
static_assert(sizeof(SnapNetSubsystem_GetEntityRenderer) == 0x000010, "Wrong size on SnapNetSubsystem_GetEntityRenderer");
static_assert(offsetof(SnapNetSubsystem_GetEntityRenderer, EntityIndex) == 0x000000, "Member 'SnapNetSubsystem_GetEntityRenderer::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSubsystem_GetEntityRenderer, ReturnValue) == 0x000008, "Member 'SnapNetSubsystem_GetEntityRenderer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.GetEntityRendererComponent
// 0x0010 (0x0010 - 0x0000)
struct SnapNetSubsystem_GetEntityRendererComponent final
{
public:
	int32                                         EntityIndex;                                       // 0x0000(0x0004)(Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_4[0x4];                                        // 0x0004(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	class USnapNetEntityRendererComponent*        ReturnValue;                                       // 0x0008(0x0008)(ExportObject, Parm, OutParm, ZeroConstructor, ReturnParm, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_GetEntityRendererComponent) == 0x000008, "Wrong alignment on SnapNetSubsystem_GetEntityRendererComponent");
static_assert(sizeof(SnapNetSubsystem_GetEntityRendererComponent) == 0x000010, "Wrong size on SnapNetSubsystem_GetEntityRendererComponent");
static_assert(offsetof(SnapNetSubsystem_GetEntityRendererComponent, EntityIndex) == 0x000000, "Member 'SnapNetSubsystem_GetEntityRendererComponent::EntityIndex' has a wrong offset!");
static_assert(offsetof(SnapNetSubsystem_GetEntityRendererComponent, ReturnValue) == 0x000008, "Member 'SnapNetSubsystem_GetEntityRendererComponent::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.GetPlayerJoinRequestClass
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_GetPlayerJoinRequestClass final
{
public:
	TSubclassOf<class USnapNetPlayerJoinRequest>  ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_GetPlayerJoinRequestClass) == 0x000008, "Wrong alignment on SnapNetSubsystem_GetPlayerJoinRequestClass");
static_assert(sizeof(SnapNetSubsystem_GetPlayerJoinRequestClass) == 0x000008, "Wrong size on SnapNetSubsystem_GetPlayerJoinRequestClass");
static_assert(offsetof(SnapNetSubsystem_GetPlayerJoinRequestClass, ReturnValue) == 0x000000, "Member 'SnapNetSubsystem_GetPlayerJoinRequestClass::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.GetServer
// 0x0008 (0x0008 - 0x0000)
struct SnapNetSubsystem_GetServer final
{
public:
	class USnapNetServer*                         ReturnValue;                                       // 0x0000(0x0008)(Parm, OutParm, ZeroConstructor, ReturnParm, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_GetServer) == 0x000008, "Wrong alignment on SnapNetSubsystem_GetServer");
static_assert(sizeof(SnapNetSubsystem_GetServer) == 0x000008, "Wrong size on SnapNetSubsystem_GetServer");
static_assert(offsetof(SnapNetSubsystem_GetServer, ReturnValue) == 0x000000, "Member 'SnapNetSubsystem_GetServer::ReturnValue' has a wrong offset!");

// Function SnapNet.SnapNetSubsystem.IsSingleFrameAdvanceEnabled
// 0x0001 (0x0001 - 0x0000)
struct SnapNetSubsystem_IsSingleFrameAdvanceEnabled final
{
public:
	bool                                          ReturnValue;                                       // 0x0000(0x0001)(Parm, OutParm, ZeroConstructor, ReturnParm, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(SnapNetSubsystem_IsSingleFrameAdvanceEnabled) == 0x000001, "Wrong alignment on SnapNetSubsystem_IsSingleFrameAdvanceEnabled");
static_assert(sizeof(SnapNetSubsystem_IsSingleFrameAdvanceEnabled) == 0x000001, "Wrong size on SnapNetSubsystem_IsSingleFrameAdvanceEnabled");
static_assert(offsetof(SnapNetSubsystem_IsSingleFrameAdvanceEnabled, ReturnValue) == 0x000000, "Member 'SnapNetSubsystem_IsSingleFrameAdvanceEnabled::ReturnValue' has a wrong offset!");

}

