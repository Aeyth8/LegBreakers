#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: BUF_Item_GlitchMarkPassive

#include "Basic.hpp"

#include "Matcha_structs.hpp"


namespace SDK::Params
{

// Function BUF_Item_GlitchMarkPassive.BUF_Item_GlitchMarkPassive_C.OnPostApplyOutgoingHit
// 0x00A8 (0x00A8 - 0x0000)
struct BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit final
{
public:
	class AMatchaSnapNetCharacterEntity*          BuffedCharacter;                                   // 0x0000(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 TargetHit;                                         // 0x0008(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	class AActor*                                 PreviousTargetHit;                                 // 0x0010(0x0008)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	struct FMatchaHitData                         HitData;                                           // 0x0018(0x0078)(ConstParm, BlueprintVisible, BlueprintReadOnly, Parm, OutParm, ReferenceParm)
	uint8                                         AppliedHitFlags;                                   // 0x0090(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EMatchaCharacterMontageType                   MontageDuringHit;                                  // 0x0091(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	EObjectRarity                                 BuffRarity;                                        // 0x0092(0x0001)(BlueprintVisible, BlueprintReadOnly, Parm, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_93[0x5];                                       // 0x0093(0x0005)(Fixing Size After Last Property [ Dumper-7 ])
	class AMatchaSnapNetCharacterEntity*          K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity; // 0x0098(0x0008)(ZeroConstructor, NoDestructor, HasGetValueTypeHash)
	bool                                          K2Node_DynamicCast_bSuccess;                       // 0x00A0(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_A1[0x3];                                       // 0x00A1(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         CallFunc_ApplyGlitchMark_DurationSeconds_ImplicitCast; // 0x00A4(0x0004)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
};
static_assert(alignof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit) == 0x000008, "Wrong alignment on BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit");
static_assert(sizeof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit) == 0x0000A8, "Wrong size on BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, BuffedCharacter) == 0x000000, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::BuffedCharacter' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, TargetHit) == 0x000008, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::TargetHit' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, PreviousTargetHit) == 0x000010, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::PreviousTargetHit' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, HitData) == 0x000018, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::HitData' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, AppliedHitFlags) == 0x000090, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::AppliedHitFlags' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, MontageDuringHit) == 0x000091, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::MontageDuringHit' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, BuffRarity) == 0x000092, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::BuffRarity' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity) == 0x000098, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::K2Node_DynamicCast_AsMatcha_Snap_Net_Character_Entity' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, K2Node_DynamicCast_bSuccess) == 0x0000A0, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::K2Node_DynamicCast_bSuccess' has a wrong offset!");
static_assert(offsetof(BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit, CallFunc_ApplyGlitchMark_DurationSeconds_ImplicitCast) == 0x0000A4, "Member 'BUF_Item_GlitchMarkPassive_C_OnPostApplyOutgoingHit::CallFunc_ApplyGlitchMark_DurationSeconds_ImplicitCast' has a wrong offset!");

}

