#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: OdyUI

#include "Basic.hpp"

#include "CoreUObject_structs.hpp"
#include "GameplayTags_structs.hpp"
#include "Engine_structs.hpp"


namespace SDK
{

// Enum OdyUI.EOdyWidgetDisplayState
// NumValues: 0x0005
enum class EOdyWidgetDisplayState : uint8
{
	NotShowing                               = 0,
	AnimatingIn                              = 1,
	Showing                                  = 2,
	AnimatingOut                             = 3,
	EOdyWidgetDisplayState_MAX               = 4,
};

// Enum OdyUI.EInputMethod
// NumValues: 0x0004
enum class EInputMethod : uint8
{
	MouseAndKeyboard                         = 0,
	Gamepad                                  = 1,
	Touch                                    = 2,
	EInputMethod_MAX                         = 3,
};

// Enum OdyUI.EMenuInputMode
// NumValues: 0x0005
enum class EMenuInputMode : uint8
{
	Unset                                    = 0,
	UI                                       = 1,
	Game                                     = 2,
	GameAndUI                                = 3,
	EMenuInputMode_MAX                       = 4,
};

// Enum OdyUI.EOdyNavigationDirection
// NumValues: 0x0003
enum class EOdyNavigationDirection : uint8
{
	Forward                                  = 0,
	Backward                                 = 1,
	EOdyNavigationDirection_MAX              = 2,
};

// Enum OdyUI.ESubInputMethod
// NumValues: 0x0004
enum class ESubInputMethod : uint8
{
	None                                     = 0,
	Mouse                                    = 1,
	Keyboard                                 = 2,
	ESubInputMethod_MAX                      = 3,
};

// Enum OdyUI.EOdyAnalogCursorMode
// NumValues: 0x0004
enum class EOdyAnalogCursorMode : uint8
{
	None                                     = 0,
	Free                                     = 1,
	Target                                   = 2,
	EOdyAnalogCursorMode_MAX                 = 3,
};

// Enum OdyUI.ERouterSettingBool
// NumValues: 0x0004
enum class ERouterSettingBool : uint8
{
	UseRouterSetting                         = 0,
	ForceOff                                 = 1,
	ForceOn                                  = 2,
	ERouterSettingBool_MAX                   = 3,
};

// Enum OdyUI.EMenuMouseClickAction
// NumValues: 0x0004
enum class EMenuMouseClickAction : uint8
{
	None                                     = 0,
	ConsumeLeftClick                         = 1,
	ConsumeAll                               = 2,
	EMenuMouseClickAction_MAX                = 3,
};

// Enum OdyUI.EOdyAnalogCursorSetting
// NumValues: 0x0004
enum class EOdyAnalogCursorSetting : uint8
{
	Unset                                    = 0,
	Off                                      = 1,
	On                                       = 2,
	EOdyAnalogCursorSetting_MAX              = 3,
};

// Enum OdyUI.EOdySpringPreset
// NumValues: 0x0007
enum class EOdySpringPreset : uint8
{
	Default                                  = 0,
	Gentle                                   = 1,
	Wobbly                                   = 2,
	Stiff                                    = 3,
	Slow                                     = 4,
	Molasses                                 = 5,
	EOdySpringPreset_MAX                     = 6,
};

// Enum OdyUI.EOdyModalPriority
// NumValues: 0x0007
enum class EOdyModalPriority : uint8
{
	Unset                                    = 0,
	Low                                      = 1,
	Normal                                   = 2,
	High                                     = 3,
	Highest                                  = 4,
	Movie                                    = 5,
	EOdyModalPriority_MAX                    = 6,
};

// Enum OdyUI.EOdyInputContextPriority
// NumValues: 0x0006
enum class EOdyInputContextPriority : uint8
{
	None                                     = 0,
	Game                                     = 1,
	Menu                                     = 2,
	Modal                                    = 3,
	HoveredWidget                            = 4,
	EOdyInputContextPriority_MAX             = 5,
};

// Enum OdyUI.EOdyUIDataLifetimeState
// NumValues: 0x0004
enum class EOdyUIDataLifetimeState : uint8
{
	Uninitialized                            = 0,
	Initialized                              = 1,
	Shutdown                                 = 2,
	EOdyUIDataLifetimeState_MAX              = 3,
};

// Enum OdyUI.EMaterialBindingMode
// NumValues: 0x0003
enum class EMaterialBindingMode : uint8
{
	Material                                 = 0,
	SoftMaterial                             = 1,
	EMaterialBindingMode_MAX                 = 2,
};

// Enum OdyUI.EUIRouterNavigationOptions
// NumValues: 0x0007
enum class EUIRouterNavigationOptions : uint8
{
	None                                     = 0,
	HiddenByDefault                          = 1,
	RefreshSlotOnShow                        = 2,
	AlwaysWantsInput                         = 4,
	NeverWantsInput                          = 8,
	SkipOnCloseAll                           = 16,
	EUIRouterNavigationOptions_MAX           = 17,
};

// Enum OdyUI.EUIRouterMenuSearchOptions
// NumValues: 0x0005
enum class EUIRouterMenuSearchOptions : uint8
{
	None                                     = 0,
	Visible                                  = 1,
	Focusable                                = 2,
	AllowsInput                              = 4,
	EUIRouterMenuSearchOptions_MAX           = 5,
};

// Enum OdyUI.ETextureBindingMode
// NumValues: 0x0004
enum class ETextureBindingMode : uint8
{
	Texture                                  = 0,
	SoftTexture                              = 1,
	Download                                 = 2,
	ETextureBindingMode_MAX                  = 3,
};

// Enum OdyUI.EOdyTimeDirection
// NumValues: 0x0003
enum class EOdyTimeDirection : uint8
{
	Down                                     = 0,
	Up                                       = 1,
	EOdyTimeDirection_MAX                    = 2,
};

// Enum OdyUI.ETimespanBindingDisplayOption
// NumValues: 0x0007
enum class ETimespanBindingDisplayOption : uint8
{
	Days                                     = 0,
	Hours                                    = 1,
	Minutes                                  = 2,
	Seconds                                  = 3,
	ZeroOrNegative                           = 4,
	Count                                    = 5,
	ETimespanBindingDisplayOption_MAX        = 6,
};

// Enum OdyUI.EOdyWidgetBindDataOn
// NumValues: 0x0006
enum class EOdyWidgetBindDataOn : uint8
{
	None                                     = 0,
	Initialize                               = 1,
	LocalPlayerStateSet                      = 2,
	NetOwnerSet                              = 3,
	UIDataSet                                = 4,
	EOdyWidgetBindDataOn_MAX                 = 5,
};

// ScriptStruct OdyUI.OdyUIBoolBinding
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FOdyUIBoolBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	bool                                          InitialValue;                                      // 0x0008(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_9[0x17];                                       // 0x0009(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIBoolBinding) == 0x000008, "Wrong alignment on FOdyUIBoolBinding");
static_assert(sizeof(FOdyUIBoolBinding) == 0x000020, "Wrong size on FOdyUIBoolBinding");
static_assert(offsetof(FOdyUIBoolBinding, InitialValue) == 0x000008, "Member 'FOdyUIBoolBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.MenuMouseClickActionSetting
// 0x0002 (0x0002 - 0x0000)
struct FMenuMouseClickActionSetting final
{
public:
	bool                                          bUseRouterSetting;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuMouseClickAction                         Setting;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FMenuMouseClickActionSetting) == 0x000001, "Wrong alignment on FMenuMouseClickActionSetting");
static_assert(sizeof(FMenuMouseClickActionSetting) == 0x000002, "Wrong size on FMenuMouseClickActionSetting");
static_assert(offsetof(FMenuMouseClickActionSetting, bUseRouterSetting) == 0x000000, "Member 'FMenuMouseClickActionSetting::bUseRouterSetting' has a wrong offset!");
static_assert(offsetof(FMenuMouseClickActionSetting, Setting) == 0x000001, "Member 'FMenuMouseClickActionSetting::Setting' has a wrong offset!");

// ScriptStruct OdyUI.OdyAnalogCursorSettings
// 0x0058 (0x0058 - 0x0000)
struct FOdyAnalogCursorSettings final
{
public:
	float                                         Acceleration;                                      // 0x0000(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         MaxSpeed;                                          // 0x0004(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StickySlowdown;                                    // 0x0008(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         DeadZone;                                          // 0x000C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAccelerationEnabled;                              // 0x0010(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_11[0x7];                                       // 0x0011(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FVector2D                              TargetWidgetOffset;                                // 0x0018(0x0010)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         CursorRadius;                                      // 0x0028(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         ScrollMultiplier;                                  // 0x002C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bNavFromFocusedWidget;                             // 0x0030(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_31[0x3];                                       // 0x0031(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         NavDistanceWeight;                                 // 0x0034(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavAngleWeight;                                    // 0x0038(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavCenterToCenterAngleWeight;                      // 0x003C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavOverlapBaseScore;                               // 0x0040(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavOverlapAreaWeight;                              // 0x0044(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavOverlapAxisWeight;                              // 0x0048(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavOverlapCenterToCenterAngleWeight;               // 0x004C(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavFrustumAngleDegrees;                            // 0x0050(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         NavFrustumEdgeProtrusionPercentage;                // 0x0054(0x0004)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdyAnalogCursorSettings) == 0x000008, "Wrong alignment on FOdyAnalogCursorSettings");
static_assert(sizeof(FOdyAnalogCursorSettings) == 0x000058, "Wrong size on FOdyAnalogCursorSettings");
static_assert(offsetof(FOdyAnalogCursorSettings, Acceleration) == 0x000000, "Member 'FOdyAnalogCursorSettings::Acceleration' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, MaxSpeed) == 0x000004, "Member 'FOdyAnalogCursorSettings::MaxSpeed' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, StickySlowdown) == 0x000008, "Member 'FOdyAnalogCursorSettings::StickySlowdown' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, DeadZone) == 0x00000C, "Member 'FOdyAnalogCursorSettings::DeadZone' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, bAccelerationEnabled) == 0x000010, "Member 'FOdyAnalogCursorSettings::bAccelerationEnabled' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, TargetWidgetOffset) == 0x000018, "Member 'FOdyAnalogCursorSettings::TargetWidgetOffset' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, CursorRadius) == 0x000028, "Member 'FOdyAnalogCursorSettings::CursorRadius' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, ScrollMultiplier) == 0x00002C, "Member 'FOdyAnalogCursorSettings::ScrollMultiplier' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, bNavFromFocusedWidget) == 0x000030, "Member 'FOdyAnalogCursorSettings::bNavFromFocusedWidget' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavDistanceWeight) == 0x000034, "Member 'FOdyAnalogCursorSettings::NavDistanceWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavAngleWeight) == 0x000038, "Member 'FOdyAnalogCursorSettings::NavAngleWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavCenterToCenterAngleWeight) == 0x00003C, "Member 'FOdyAnalogCursorSettings::NavCenterToCenterAngleWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavOverlapBaseScore) == 0x000040, "Member 'FOdyAnalogCursorSettings::NavOverlapBaseScore' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavOverlapAreaWeight) == 0x000044, "Member 'FOdyAnalogCursorSettings::NavOverlapAreaWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavOverlapAxisWeight) == 0x000048, "Member 'FOdyAnalogCursorSettings::NavOverlapAxisWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavOverlapCenterToCenterAngleWeight) == 0x00004C, "Member 'FOdyAnalogCursorSettings::NavOverlapCenterToCenterAngleWeight' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavFrustumAngleDegrees) == 0x000050, "Member 'FOdyAnalogCursorSettings::NavFrustumAngleDegrees' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorSettings, NavFrustumEdgeProtrusionPercentage) == 0x000054, "Member 'FOdyAnalogCursorSettings::NavFrustumEdgeProtrusionPercentage' has a wrong offset!");

// ScriptStruct OdyUI.MenuInputModeSetting
// 0x0005 (0x0005 - 0x0000)
struct FMenuInputModeSetting final
{
public:
	bool                                          bUseRouterSetting;                                 // 0x0000(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuInputMode                                Setting;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EMenuInputMode                                GamepadSetting;                                    // 0x0002(0x0001)(Edit, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_3[0x2];                                        // 0x0003(0x0002)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FMenuInputModeSetting) == 0x000001, "Wrong alignment on FMenuInputModeSetting");
static_assert(sizeof(FMenuInputModeSetting) == 0x000005, "Wrong size on FMenuInputModeSetting");
static_assert(offsetof(FMenuInputModeSetting, bUseRouterSetting) == 0x000000, "Member 'FMenuInputModeSetting::bUseRouterSetting' has a wrong offset!");
static_assert(offsetof(FMenuInputModeSetting, Setting) == 0x000001, "Member 'FMenuInputModeSetting::Setting' has a wrong offset!");
static_assert(offsetof(FMenuInputModeSetting, GamepadSetting) == 0x000002, "Member 'FMenuInputModeSetting::GamepadSetting' has a wrong offset!");

// ScriptStruct OdyUI.OdySpringConfiguration
// 0x0018 (0x0018 - 0x0000)
struct FOdySpringConfiguration final
{
public:
	float                                         Mass;                                              // 0x0000(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Tension;                                           // 0x0004(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Friction;                                          // 0x0008(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         Precision;                                         // 0x000C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	float                                         StartVelocity;                                     // 0x0010(0x0004)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          Clamp;                                             // 0x0014(0x0001)(Edit, BlueprintVisible, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_15[0x3];                                       // 0x0015(0x0003)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdySpringConfiguration) == 0x000004, "Wrong alignment on FOdySpringConfiguration");
static_assert(sizeof(FOdySpringConfiguration) == 0x000018, "Wrong size on FOdySpringConfiguration");
static_assert(offsetof(FOdySpringConfiguration, Mass) == 0x000000, "Member 'FOdySpringConfiguration::Mass' has a wrong offset!");
static_assert(offsetof(FOdySpringConfiguration, Tension) == 0x000004, "Member 'FOdySpringConfiguration::Tension' has a wrong offset!");
static_assert(offsetof(FOdySpringConfiguration, Friction) == 0x000008, "Member 'FOdySpringConfiguration::Friction' has a wrong offset!");
static_assert(offsetof(FOdySpringConfiguration, Precision) == 0x00000C, "Member 'FOdySpringConfiguration::Precision' has a wrong offset!");
static_assert(offsetof(FOdySpringConfiguration, StartVelocity) == 0x000010, "Member 'FOdySpringConfiguration::StartVelocity' has a wrong offset!");
static_assert(offsetof(FOdySpringConfiguration, Clamp) == 0x000014, "Member 'FOdySpringConfiguration::Clamp' has a wrong offset!");

// ScriptStruct OdyUI.OdySpringStateFloat
// 0x0018 (0x0018 - 0x0000)
struct alignas(0x04) FOdySpringStateFloat final
{
public:
	uint8                                         Pad_0[0x18];                                       // 0x0000(0x0018)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdySpringStateFloat) == 0x000004, "Wrong alignment on FOdySpringStateFloat");
static_assert(sizeof(FOdySpringStateFloat) == 0x000018, "Wrong size on FOdySpringStateFloat");

// ScriptStruct OdyUI.OdySpringStateVector2D
// 0x0030 (0x0030 - 0x0000)
struct alignas(0x04) FOdySpringStateVector2D final
{
public:
	uint8                                         Pad_0[0x30];                                       // 0x0000(0x0030)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdySpringStateVector2D) == 0x000004, "Wrong alignment on FOdySpringStateVector2D");
static_assert(sizeof(FOdySpringStateVector2D) == 0x000030, "Wrong size on FOdySpringStateVector2D");

// ScriptStruct OdyUI.OdySpringStateVector
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x04) FOdySpringStateVector final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdySpringStateVector) == 0x000004, "Wrong alignment on FOdySpringStateVector");
static_assert(sizeof(FOdySpringStateVector) == 0x000048, "Wrong size on FOdySpringStateVector");

// ScriptStruct OdyUI.OdySpringStateRotator
// 0x0048 (0x0048 - 0x0000)
struct alignas(0x04) FOdySpringStateRotator final
{
public:
	uint8                                         Pad_0[0x48];                                       // 0x0000(0x0048)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdySpringStateRotator) == 0x000004, "Wrong alignment on FOdySpringStateRotator");
static_assert(sizeof(FOdySpringStateRotator) == 0x000048, "Wrong size on FOdySpringStateRotator");

// ScriptStruct OdyUI.OdyUIColorBinding
// 0x0028 (0x0028 - 0x0000)
struct alignas(0x08) FOdyUIColorBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FLinearColor                           InitialValue;                                      // 0x0008(0x0010)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIColorBinding) == 0x000008, "Wrong alignment on FOdyUIColorBinding");
static_assert(sizeof(FOdyUIColorBinding) == 0x000028, "Wrong size on FOdyUIColorBinding");
static_assert(offsetof(FOdyUIColorBinding, InitialValue) == 0x000008, "Member 'FOdyUIColorBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyMenuNavData
// 0x0068 (0x0068 - 0x0000)
struct FOdyMenuNavData final
{
public:
	class UOdyMenuData*                           Menu;                                              // 0x0000(0x0008)(Edit, BlueprintVisible, ZeroConstructor, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Args;                                              // 0x0008(0x0050)(Edit, BlueprintVisible, NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0058(0x0010)(Edit, BlueprintVisible, ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdyMenuNavData) == 0x000008, "Wrong alignment on FOdyMenuNavData");
static_assert(sizeof(FOdyMenuNavData) == 0x000068, "Wrong size on FOdyMenuNavData");
static_assert(offsetof(FOdyMenuNavData, Menu) == 0x000000, "Member 'FOdyMenuNavData::Menu' has a wrong offset!");
static_assert(offsetof(FOdyMenuNavData, Args) == 0x000008, "Member 'FOdyMenuNavData::Args' has a wrong offset!");
static_assert(offsetof(FOdyMenuNavData, Action) == 0x000058, "Member 'FOdyMenuNavData::Action' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIDateTimeBinding
// 0x0020 (0x0020 - 0x0000)
struct FOdyUIDateTimeBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FDateTime                              InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIDateTimeBinding) == 0x000008, "Wrong alignment on FOdyUIDateTimeBinding");
static_assert(sizeof(FOdyUIDateTimeBinding) == 0x000020, "Wrong size on FOdyUIDateTimeBinding");
static_assert(offsetof(FOdyUIDateTimeBinding, InitialValue) == 0x000008, "Member 'FOdyUIDateTimeBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIDPIScalingSettings
// 0x0090 (0x0090 - 0x0000)
struct FOdyUIDPIScalingSettings final
{
public:
	EUIScalingRule                                UIScaleRule;                                       // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_1[0x7];                                        // 0x0001(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	struct FRuntimeFloatCurve                     UIScaleCurve;                                      // 0x0008(0x0088)(Edit, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdyUIDPIScalingSettings) == 0x000008, "Wrong alignment on FOdyUIDPIScalingSettings");
static_assert(sizeof(FOdyUIDPIScalingSettings) == 0x000090, "Wrong size on FOdyUIDPIScalingSettings");
static_assert(offsetof(FOdyUIDPIScalingSettings, UIScaleRule) == 0x000000, "Member 'FOdyUIDPIScalingSettings::UIScaleRule' has a wrong offset!");
static_assert(offsetof(FOdyUIDPIScalingSettings, UIScaleCurve) == 0x000008, "Member 'FOdyUIDPIScalingSettings::UIScaleCurve' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIFloatBinding
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FOdyUIFloatBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	float                                         InitialValue;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIFloatBinding) == 0x000008, "Wrong alignment on FOdyUIFloatBinding");
static_assert(sizeof(FOdyUIFloatBinding) == 0x000020, "Wrong size on FOdyUIFloatBinding");
static_assert(offsetof(FOdyUIFloatBinding, InitialValue) == 0x000008, "Member 'FOdyUIFloatBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIGameplayTagBinding
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FOdyUIGameplayTagBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FGameplayTag                           InitialValue;                                      // 0x0008(0x0008)(Edit, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIGameplayTagBinding) == 0x000008, "Wrong alignment on FOdyUIGameplayTagBinding");
static_assert(sizeof(FOdyUIGameplayTagBinding) == 0x000020, "Wrong size on FOdyUIGameplayTagBinding");
static_assert(offsetof(FOdyUIGameplayTagBinding, InitialValue) == 0x000008, "Member 'FOdyUIGameplayTagBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIIntBinding
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FOdyUIIntBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         InitialValue;                                      // 0x0008(0x0004)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_C[0x14];                                       // 0x000C(0x0014)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIIntBinding) == 0x000008, "Wrong alignment on FOdyUIIntBinding");
static_assert(sizeof(FOdyUIIntBinding) == 0x000020, "Wrong size on FOdyUIIntBinding");
static_assert(offsetof(FOdyUIIntBinding, InitialValue) == 0x000008, "Member 'FOdyUIIntBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIMaterialBinding
// 0x0050 (0x0050 - 0x0000)
struct FOdyUIMaterialBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UMaterialInterface*                     InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UMaterialInterface>      InitialSoftValue;                                  // 0x0010(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	EMaterialBindingMode                          InitialMaterialBindingMode;                        // 0x0038(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_39[0x17];                                      // 0x0039(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIMaterialBinding) == 0x000008, "Wrong alignment on FOdyUIMaterialBinding");
static_assert(sizeof(FOdyUIMaterialBinding) == 0x000050, "Wrong size on FOdyUIMaterialBinding");
static_assert(offsetof(FOdyUIMaterialBinding, InitialValue) == 0x000008, "Member 'FOdyUIMaterialBinding::InitialValue' has a wrong offset!");
static_assert(offsetof(FOdyUIMaterialBinding, InitialSoftValue) == 0x000010, "Member 'FOdyUIMaterialBinding::InitialSoftValue' has a wrong offset!");
static_assert(offsetof(FOdyUIMaterialBinding, InitialMaterialBindingMode) == 0x000038, "Member 'FOdyUIMaterialBinding::InitialMaterialBindingMode' has a wrong offset!");

// ScriptStruct OdyUI.OdyUINameBinding
// 0x0020 (0x0020 - 0x0000)
struct alignas(0x08) FOdyUINameBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FName                                   InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUINameBinding) == 0x000008, "Wrong alignment on FOdyUINameBinding");
static_assert(sizeof(FOdyUINameBinding) == 0x000020, "Wrong size on FOdyUINameBinding");
static_assert(offsetof(FOdyUINameBinding, InitialValue) == 0x000008, "Member 'FOdyUINameBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUIObjectBinding
// 0x0020 (0x0020 - 0x0000)
struct FOdyUIObjectBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UObject*                                InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUIObjectBinding) == 0x000008, "Wrong alignment on FOdyUIObjectBinding");
static_assert(sizeof(FOdyUIObjectBinding) == 0x000020, "Wrong size on FOdyUIObjectBinding");
static_assert(offsetof(FOdyUIObjectBinding, InitialValue) == 0x000008, "Member 'FOdyUIObjectBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyMenuInstData
// 0x0080 (0x0080 - 0x0000)
struct FOdyMenuInstData final
{
public:
	class UOdyMenu*                               Menu;                                              // 0x0000(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	struct FGameplayTag                           MenuId;                                            // 0x0008(0x0008)(NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	TMap<class FString, class FString>            Args;                                              // 0x0010(0x0050)(NativeAccessSpecifierPublic)
	class FString                                 Action;                                            // 0x0060(0x0010)(ZeroConstructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	EUIRouterNavigationOptions                    NavigationOptions;                                 // 0x0070(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_71[0x3];                                       // 0x0071(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ACameraActor>            MenuCamera;                                        // 0x0074(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_7C[0x4];                                       // 0x007C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyMenuInstData) == 0x000008, "Wrong alignment on FOdyMenuInstData");
static_assert(sizeof(FOdyMenuInstData) == 0x000080, "Wrong size on FOdyMenuInstData");
static_assert(offsetof(FOdyMenuInstData, Menu) == 0x000000, "Member 'FOdyMenuInstData::Menu' has a wrong offset!");
static_assert(offsetof(FOdyMenuInstData, MenuId) == 0x000008, "Member 'FOdyMenuInstData::MenuId' has a wrong offset!");
static_assert(offsetof(FOdyMenuInstData, Args) == 0x000010, "Member 'FOdyMenuInstData::Args' has a wrong offset!");
static_assert(offsetof(FOdyMenuInstData, Action) == 0x000060, "Member 'FOdyMenuInstData::Action' has a wrong offset!");
static_assert(offsetof(FOdyMenuInstData, NavigationOptions) == 0x000070, "Member 'FOdyMenuInstData::NavigationOptions' has a wrong offset!");
static_assert(offsetof(FOdyMenuInstData, MenuCamera) == 0x000074, "Member 'FOdyMenuInstData::MenuCamera' has a wrong offset!");

// ScriptStruct OdyUI.OdyMenuStack
// 0x0030 (0x0030 - 0x0000)
struct FOdyMenuStack final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	TArray<struct FOdyMenuInstData>               Stack;                                             // 0x0008(0x0010)(ZeroConstructor, ContainsInstancedReference, NativeAccessSpecifierPublic)
	class UCanvasPanel*                           Panel;                                             // 0x0018(0x0008)(ExportObject, ZeroConstructor, InstancedReference, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bAllowsEmptyStack;                                 // 0x0020(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bIsModal;                                          // 0x0021(0x0001)(ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_22[0x2];                                       // 0x0022(0x0002)(Fixing Size After Last Property [ Dumper-7 ])
	TWeakObjectPtr<class ACameraActor>            DefaultMenuCamera;                                 // 0x0024(0x0008)(ZeroConstructor, IsPlainOldData, NoDestructor, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	uint8                                         Pad_2C[0x4];                                       // 0x002C(0x0004)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyMenuStack) == 0x000008, "Wrong alignment on FOdyMenuStack");
static_assert(sizeof(FOdyMenuStack) == 0x000030, "Wrong size on FOdyMenuStack");
static_assert(offsetof(FOdyMenuStack, Stack) == 0x000008, "Member 'FOdyMenuStack::Stack' has a wrong offset!");
static_assert(offsetof(FOdyMenuStack, Panel) == 0x000018, "Member 'FOdyMenuStack::Panel' has a wrong offset!");
static_assert(offsetof(FOdyMenuStack, bAllowsEmptyStack) == 0x000020, "Member 'FOdyMenuStack::bAllowsEmptyStack' has a wrong offset!");
static_assert(offsetof(FOdyMenuStack, bIsModal) == 0x000021, "Member 'FOdyMenuStack::bIsModal' has a wrong offset!");
static_assert(offsetof(FOdyMenuStack, DefaultMenuCamera) == 0x000024, "Member 'FOdyMenuStack::DefaultMenuCamera' has a wrong offset!");

// ScriptStruct OdyUI.OdyAnalogCursorTransientSettings
// 0x0003 (0x0003 - 0x0000)
struct FOdyAnalogCursorTransientSettings final
{
public:
	bool                                          bAllowed;                                          // 0x0000(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bHidden;                                           // 0x0001(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
	bool                                          bLocked;                                           // 0x0002(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, HasGetValueTypeHash, NativeAccessSpecifierPublic)
};
static_assert(alignof(FOdyAnalogCursorTransientSettings) == 0x000001, "Wrong alignment on FOdyAnalogCursorTransientSettings");
static_assert(sizeof(FOdyAnalogCursorTransientSettings) == 0x000003, "Wrong size on FOdyAnalogCursorTransientSettings");
static_assert(offsetof(FOdyAnalogCursorTransientSettings, bAllowed) == 0x000000, "Member 'FOdyAnalogCursorTransientSettings::bAllowed' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorTransientSettings, bHidden) == 0x000001, "Member 'FOdyAnalogCursorTransientSettings::bHidden' has a wrong offset!");
static_assert(offsetof(FOdyAnalogCursorTransientSettings, bLocked) == 0x000002, "Member 'FOdyAnalogCursorTransientSettings::bLocked' has a wrong offset!");

// ScriptStruct OdyUI.OdyUITextBinding
// 0x0028 (0x0028 - 0x0000)
struct FOdyUITextBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class FText                                   InitialValue;                                      // 0x0008(0x0010)(Edit, Protected, NativeAccessSpecifierProtected)
	uint8                                         Pad_18[0x10];                                      // 0x0018(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUITextBinding) == 0x000008, "Wrong alignment on FOdyUITextBinding");
static_assert(sizeof(FOdyUITextBinding) == 0x000028, "Wrong size on FOdyUITextBinding");
static_assert(offsetof(FOdyUITextBinding, InitialValue) == 0x000008, "Member 'FOdyUITextBinding::InitialValue' has a wrong offset!");

// ScriptStruct OdyUI.OdyUITextureBinding
// 0x0060 (0x0060 - 0x0000)
struct FOdyUITextureBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	class UTexture*                               InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	TSoftObjectPtr<class UTexture>                InitialSoftValue;                                  // 0x0010(0x0028)(Edit, Protected, UObjectWrapper, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	class FString                                 InitialUrlValue;                                   // 0x0038(0x0010)(Edit, ZeroConstructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	ETextureBindingMode                           InitialTextureBindingMode;                         // 0x0048(0x0001)(Edit, ZeroConstructor, IsPlainOldData, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_49[0x17];                                      // 0x0049(0x0017)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUITextureBinding) == 0x000008, "Wrong alignment on FOdyUITextureBinding");
static_assert(sizeof(FOdyUITextureBinding) == 0x000060, "Wrong size on FOdyUITextureBinding");
static_assert(offsetof(FOdyUITextureBinding, InitialValue) == 0x000008, "Member 'FOdyUITextureBinding::InitialValue' has a wrong offset!");
static_assert(offsetof(FOdyUITextureBinding, InitialSoftValue) == 0x000010, "Member 'FOdyUITextureBinding::InitialSoftValue' has a wrong offset!");
static_assert(offsetof(FOdyUITextureBinding, InitialUrlValue) == 0x000038, "Member 'FOdyUITextureBinding::InitialUrlValue' has a wrong offset!");
static_assert(offsetof(FOdyUITextureBinding, InitialTextureBindingMode) == 0x000048, "Member 'FOdyUITextureBinding::InitialTextureBindingMode' has a wrong offset!");

// ScriptStruct OdyUI.OdyUITimespanBinding
// 0x0020 (0x0020 - 0x0000)
struct FOdyUITimespanBinding final
{
public:
	uint8                                         Pad_0[0x8];                                        // 0x0000(0x0008)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimespan                              InitialValue;                                      // 0x0008(0x0008)(Edit, ZeroConstructor, DisableEditOnInstance, NoDestructor, Protected, HasGetValueTypeHash, NativeAccessSpecifierProtected)
	uint8                                         Pad_10[0x10];                                      // 0x0010(0x0010)(Fixing Struct Size After Last Property [ Dumper-7 ])
};
static_assert(alignof(FOdyUITimespanBinding) == 0x000008, "Wrong alignment on FOdyUITimespanBinding");
static_assert(sizeof(FOdyUITimespanBinding) == 0x000020, "Wrong size on FOdyUITimespanBinding");
static_assert(offsetof(FOdyUITimespanBinding, InitialValue) == 0x000008, "Member 'FOdyUITimespanBinding::InitialValue' has a wrong offset!");

}

