#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: WBP_FloatingIndicators_Panel

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "OdyUI_classes.hpp"


namespace SDK
{

// WidgetBlueprintGeneratedClass WBP_FloatingIndicators_Panel.WBP_FloatingIndicators_Panel_C
// 0x0050 (0x03E8 - 0x0398)
class UWBP_FloatingIndicators_Panel_C final : public UOdyWidget
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x0398(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UCanvasPanel*                           Panel;                                             // 0x03A0(0x0008)(BlueprintVisible, ExportObject, BlueprintReadOnly, ZeroConstructor, DisableEditOnInstance, InstancedReference, RepSkip, NoDestructor, PersistentInstance, HasGetValueTypeHash)
	TArray<class UWBP_FloatingIndicator_C*>       AlliesIndicators;                                  // 0x03A8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class UWBP_FloatingIndicator_C*>       EnemiesIndicators;                                 // 0x03B8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)
	TArray<class ACharacterRenderer_Base_C*>      Characters;                                        // 0x03C8(0x0010)(Edit, BlueprintVisible, DisableEditOnTemplate, DisableEditOnInstance)
	TArray<class UWBP_FloatingIndicator_TimedChest_C*> TimedChests;                                       // 0x03D8(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance, ContainsInstancedReference)

public:
	void AddTimedChestFloatingIndicator(class AR_TimedChest_C* Timed_Chest, class UWBP_FloatingIndicator_TimedChest_C** FloatingIndicator, class UWBP_FloatingIndicator_TimedChest_C** NewParam);
	void AddAllyIndicator(class UMatchaPlayerUIData* Player, class UWBP_FloatingIndicator_C** FloatingIndicator);
	void AddEnemyIndicator(class UMatchaPlayerUIData* PlayerUIData, class UWBP_FloatingIndicator_C** FloatingIndicator);
	void Tick(const struct FGeometry& MyGeometry, float InDeltaTime);
	void BindData(class UOdyUIData* NewUIData);
	void UnbindData(class UOdyUIData* OldUIData);
	void OnTeamMembersUpdated();
	void UpdateRelevantEnemyPlayerIndicators(const TArray<int32>& RelevantEnemyPlayerIndicesArray);
	void OnRelevantEnemyPlayerIndicesChanged();
	void ExecuteUbergraph_WBP_FloatingIndicators_Panel(int32 EntryPoint);

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"WBP_FloatingIndicators_Panel_C">();
	}
	static class UWBP_FloatingIndicators_Panel_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<UWBP_FloatingIndicators_Panel_C>();
	}
};
static_assert(alignof(UWBP_FloatingIndicators_Panel_C) == 0x000008, "Wrong alignment on UWBP_FloatingIndicators_Panel_C");
static_assert(sizeof(UWBP_FloatingIndicators_Panel_C) == 0x0003E8, "Wrong size on UWBP_FloatingIndicators_Panel_C");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, UberGraphFrame) == 0x000398, "Member 'UWBP_FloatingIndicators_Panel_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, Panel) == 0x0003A0, "Member 'UWBP_FloatingIndicators_Panel_C::Panel' has a wrong offset!");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, AlliesIndicators) == 0x0003A8, "Member 'UWBP_FloatingIndicators_Panel_C::AlliesIndicators' has a wrong offset!");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, EnemiesIndicators) == 0x0003B8, "Member 'UWBP_FloatingIndicators_Panel_C::EnemiesIndicators' has a wrong offset!");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, Characters) == 0x0003C8, "Member 'UWBP_FloatingIndicators_Panel_C::Characters' has a wrong offset!");
static_assert(offsetof(UWBP_FloatingIndicators_Panel_C, TimedChests) == 0x0003D8, "Member 'UWBP_FloatingIndicators_Panel_C::TimedChests' has a wrong offset!");

}

