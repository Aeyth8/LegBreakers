#pragma once

/*
* SDK generated by Dumper-7
*
* https://github.com/Encryqed/Dumper-7
*/

// Package: R_TimedChest

#include "Basic.hpp"

#include "Engine_structs.hpp"
#include "EChestState_structs.hpp"
#include "Matcha_classes.hpp"


namespace SDK
{

// BlueprintGeneratedClass R_TimedChest.R_TimedChest_C
// 0x00B8 (0x0358 - 0x02A0)
class AR_TimedChest_C final : public AMatchaSnapNetRenderer
{
public:
	struct FPointerToUberGraphFrame               UberGraphFrame;                                    // 0x02A0(0x0008)(ZeroConstructor, Transient, DuplicateTransient)
	class UTextRenderComponent*                   HelperText;                                        // 0x02A8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UStaticMeshComponent*                   StaticMesh;                                        // 0x02B0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UTextRenderComponent*                   CountdownText;                                     // 0x02B8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWidgetComponent*                       HealthBar;                                         // 0x02C0(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class USceneComponent*                        Scene;                                             // 0x02C8(0x0008)(BlueprintVisible, ZeroConstructor, InstancedReference, NonTransactional, NoDestructor, HasGetValueTypeHash)
	class UWBP_HealthBar_C*                       HealthBarWidget;                                   // 0x02D0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, InstancedReference, NoDestructor, HasGetValueTypeHash)
	double                                        MaxDamageAsFloat;                                  // 0x02D8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        CurrentDamageAsFloat;                              // 0x02E0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	double                                        LastDamageAsFloat;                                 // 0x02E8(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class UClass*                                 MinimapIndicatorWidget;                            // 0x02F0(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          bIsBroken;                                         // 0x02F8(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_2F9[0x7];                                      // 0x02F9(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class AE_TimedChest_C*                        TimedChestEntity;                                  // 0x0300(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnTemplate, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	int32                                         TimeRemaining;                                     // 0x0308(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_30C[0x4];                                      // 0x030C(0x0004)(Fixing Size After Last Property [ Dumper-7 ])
	struct FTimerHandle                           CountdownTimer;                                    // 0x0310(0x0008)(Edit, BlueprintVisible, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          Is_Alive;                                          // 0x0318(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_319[0x7];                                      // 0x0319(0x0007)(Fixing Size After Last Property [ Dumper-7 ])
	class UClass*                                 MiniMapIndicatorWidgetAvailable;                   // 0x0320(0x0008)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, NoDestructor, HasGetValueTypeHash)
	bool                                          FirstTimerTick;                                    // 0x0328(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	uint8                                         Pad_329[0x3];                                      // 0x0329(0x0003)(Fixing Size After Last Property [ Dumper-7 ])
	int32                                         TotalTime;                                         // 0x032C(0x0004)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	class FText                                   HowToUnlockInstructionsText;                       // 0x0330(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	class FText                                   TimeRemainingHelperText;                           // 0x0340(0x0010)(Edit, BlueprintVisible, DisableEditOnInstance)
	EChestState                                   CurrentChestState;                                 // 0x0350(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)
	bool                                          bPlayedUnlockSFX;                                  // 0x0351(0x0001)(Edit, BlueprintVisible, ZeroConstructor, DisableEditOnInstance, IsPlainOldData, NoDestructor, HasGetValueTypeHash)

public:
	void BndEvt__CharacterRenderer_MatchaSnapNet_EntityRendererComponent_K2Node_ComponentBoundEvent_0_UpdateFromEntityDynamicDelegate__DelegateSignature(const class USnapNetEntityComponent* EntityComponent, float DeltaSeconds, bool Teleported);
	void ExecuteUbergraph_R_TimedChest(int32 EntryPoint);
	TSubclassOf<class UOdyCompassIndicatorWidget> GetCompassIndicatorWidgetClass();
	TSubclassOf<class UOdyMinimapIndicatorWidget> GetIndicatorWidgetClass();
	void ReceiveBeginPlay();
	void StartTimer(int32 Duration);
	void TimerTick();
	void UpdateHealthBar(bool Enable);
	void UpdateLockStateVisuals(int32 RemainingTimeToUnlock, EChestState ChestState);
	void UpdateTimerText(int32 RemainingTime);

	struct FVector GetIndicatorWorldExtent() const;
	struct FVector GetIndicatorWorldPosition() const;
	void SetupIndicatorInstance(class UOdyMinimapIndicatorWidget* IndicatorInstance) const;
	bool ShouldCompassIndicatorBeVisible(class APlayerController* InPlayerController) const;
	bool ShouldIndicatorBeVisible(class APlayerController* InPlayerController) const;
	void TickIndicator(class UOdyMinimapIndicatorWidget* WidgetInstance) const;

public:
	static class UClass* StaticClass()
	{
		return StaticBPGeneratedClassImpl<"R_TimedChest_C">();
	}
	static class AR_TimedChest_C* GetDefaultObj()
	{
		return GetDefaultObjImpl<AR_TimedChest_C>();
	}
};
static_assert(alignof(AR_TimedChest_C) == 0x000008, "Wrong alignment on AR_TimedChest_C");
static_assert(sizeof(AR_TimedChest_C) == 0x000358, "Wrong size on AR_TimedChest_C");
static_assert(offsetof(AR_TimedChest_C, UberGraphFrame) == 0x0002A0, "Member 'AR_TimedChest_C::UberGraphFrame' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, HelperText) == 0x0002A8, "Member 'AR_TimedChest_C::HelperText' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, StaticMesh) == 0x0002B0, "Member 'AR_TimedChest_C::StaticMesh' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, CountdownText) == 0x0002B8, "Member 'AR_TimedChest_C::CountdownText' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, HealthBar) == 0x0002C0, "Member 'AR_TimedChest_C::HealthBar' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, Scene) == 0x0002C8, "Member 'AR_TimedChest_C::Scene' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, HealthBarWidget) == 0x0002D0, "Member 'AR_TimedChest_C::HealthBarWidget' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, MaxDamageAsFloat) == 0x0002D8, "Member 'AR_TimedChest_C::MaxDamageAsFloat' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, CurrentDamageAsFloat) == 0x0002E0, "Member 'AR_TimedChest_C::CurrentDamageAsFloat' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, LastDamageAsFloat) == 0x0002E8, "Member 'AR_TimedChest_C::LastDamageAsFloat' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, MinimapIndicatorWidget) == 0x0002F0, "Member 'AR_TimedChest_C::MinimapIndicatorWidget' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, bIsBroken) == 0x0002F8, "Member 'AR_TimedChest_C::bIsBroken' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, TimedChestEntity) == 0x000300, "Member 'AR_TimedChest_C::TimedChestEntity' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, TimeRemaining) == 0x000308, "Member 'AR_TimedChest_C::TimeRemaining' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, CountdownTimer) == 0x000310, "Member 'AR_TimedChest_C::CountdownTimer' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, Is_Alive) == 0x000318, "Member 'AR_TimedChest_C::Is_Alive' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, MiniMapIndicatorWidgetAvailable) == 0x000320, "Member 'AR_TimedChest_C::MiniMapIndicatorWidgetAvailable' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, FirstTimerTick) == 0x000328, "Member 'AR_TimedChest_C::FirstTimerTick' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, TotalTime) == 0x00032C, "Member 'AR_TimedChest_C::TotalTime' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, HowToUnlockInstructionsText) == 0x000330, "Member 'AR_TimedChest_C::HowToUnlockInstructionsText' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, TimeRemainingHelperText) == 0x000340, "Member 'AR_TimedChest_C::TimeRemainingHelperText' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, CurrentChestState) == 0x000350, "Member 'AR_TimedChest_C::CurrentChestState' has a wrong offset!");
static_assert(offsetof(AR_TimedChest_C, bPlayedUnlockSFX) == 0x000351, "Member 'AR_TimedChest_C::bPlayedUnlockSFX' has a wrong offset!");

}

